{"__symbolic":"module","version":4,"metadata":{"LoginFormComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":33,"character":1},"arguments":[{"selector":"cal-login-form","template":"<div class=\"{{ fixedWidth ? 'login-wrapper' : '' }}\" id=\"debug-login-form\">\n  <mat-tab-group id=\"caliatys-login-form\" [selectedIndex]=\"selectedTab\">\n    <mat-tab label=\"login-form\">\n      <!-- NOTE: Login form -->\n      <form (ngSubmit)=\"onClickLogin()\" [formGroup]=\"formGroup\" *ngIf=\"!googleStyle\">\n        <div class=\"row no-gutters\">\n          <div class=\"col\">\n            <div class=\"row no-gutters\">\n              <div class=\"col\">\n                <!-- NOTE: Username -->\n                <mat-form-field class=\"w-100\">\n                  <div matPrefix class=\"mr-2\" *ngIf=\"icons.iconUsrOnLoginForm\">\n                    <mat-icon class=\"align-bottom\">person</mat-icon>\n                  </div>\n                  <input matInput formControlName=\"username\" \n                    name=\"username\" autocomplete=\"username\" \n                    placeholder=\"{{ labels.input.username }}\" \n                    type=\"text\"/>\n                  <button *ngIf=\"formGroup.controls.username.value?.length > 0 && inputs.clearUsrOnLoginForm\" \n                    mat-button matSuffix mat-icon-button aria-label=\"Clear\" \n                    color=\"primary\" (click)=\"formGroup.controls.username.setValue('')\" \n                    [disabled]=\"formType === forms.MFA && formLayouts.mfa === layouts.INLINE ? true : false\" \n                    type=\"button\">\n                    <mat-icon>close</mat-icon>\n                  </button>\n                  <!-- NOTE: Error message(s) -->\n                  <mat-hint align=\"start\" *ngIf=\"formGroup.controls.username.errors?.required && errors.login\">\n                    {{ labels.policy.required }}\n                  </mat-hint>\n                  <mat-hint align=\"start\" *ngIf=\"formGroup.controls.username.errors?.pattern && errors.login && usrPolicy === userPolicies.EMAIL\">\n                    {{ labels.policy.email }}\n                  </mat-hint>\n                  <mat-hint align=\"start\" *ngIf=\"formGroup.controls.username.errors?.pattern && errors.login && usrPolicy === userPolicies.PHONE\">\n                    {{ labels.policy.phone }}\n                  </mat-hint>\n                  <mat-hint align=\"start\" *ngIf=\"formGroup.controls.username.errors?.pattern && errors.login && usrPolicy && usrPolicy !== userPolicies.EMAIL && usrPolicy !== userPolicies.PHONE\">\n                    {{ labels.policy.customRegex }}\n                  </mat-hint>\n                </mat-form-field>\n              </div>\n            </div>\n            <div class=\"row no-gutters\">\n              <div class=\"col\">\n                <!-- NOTE: Password -->\n                <mat-form-field class=\"w-100\">\n                  <div matPrefix class=\"mr-2\" *ngIf=\"icons.iconPwdOnLoginForm\">\n                    <mat-icon class=\"align-bottom\">lock</mat-icon>\n                  </div>\n                  <input matInput formControlName=\"password\" \n                    name=\"password\" autocomplete=\"password\" \n                    placeholder=\"{{ labels.input.password }}\" \n                    type=\"{{ showPassword ? 'text' : 'password' }}\"/>\n                  <button *ngIf=\"inputs.showPwdOnLoginForm\" \n                    mat-button matSuffix mat-icon-button aria-label=\"Clear\" \n                    color=\"primary\" (click)=\"showPassword=!showPassword\" \n                    [disabled]=\"formType === forms.MFA && formLayouts.mfa === layouts.INLINE ? true : false\" \n                    type=\"button\">\n                    <mat-icon>{{ showPassword ? 'visibility_off' : 'visibility' }}</mat-icon>\n                  </button>\n                  <!-- NOTE: Error message -->\n                  <mat-hint align=\"start\" *ngIf=\"formGroup.controls.password.errors?.required && errors.login\">\n                    {{ labels.policy.required }}\n                  </mat-hint>\n                </mat-form-field>\n              </div> \n            </div>\n            <!-- NOTE: Buttons -->\n            <ng-container *ngIf=\"!( formType === forms.MFA && formLayouts.mfa === layouts.INLINE )\">\n              <div class=\"row no-gutters pb-3\">\n                <div class=\"col text-left\">\n                  <!-- TODO: Remember me -->\n                </div>\n                <!-- NOTE: Forgot password -->\n                <div class=\"col text-right\" *ngIf=\"buttons.forgotPassword\">\n                  <a (click)=\"onClickForgotPassword()\" href=\"#\" class=\"small\">\n                    {{ labels.button.forgotPassword }}\n                  </a>\n                </div>\n              </div>\n              <div class=\"row no-gutters pb-3\">\n                <div class=\"col text-right\">\n                  <!-- NOTE: Sign up -->\n                  <button mat-button (click)=\"onClickSignUp()\" type=\"button\" color=\"primary\" class=\"small text-uppercase mr-3\" *ngIf=\"buttons.signUp\">\n                    {{ labels.button.signUp }}\n                  </button>\n                  <!-- NOTE: Sign in -->\n                  <button mat-raised-button type=\"submit\" color=\"primary\" [disabled]=\"!formGroup.valid\" class=\"small text-uppercase\">\n                    {{ labels.button.signIn }}\n                  </button>\n                </div>\n              </div>\n            </ng-container>\n          </div>\n        </div>\n      </form>\n      <!-- NOTE: Login by steps buttons -->\n      <div class=\"row no-gutters mb-3\" *ngIf=\"googleStyle\">\n        <div class=\"col text-right\" *ngIf=\"buttons.signUp\">\n          <!-- NOTE: Sign up -->\n          <button mat-button (click)=\"onClickSignUp()\" type=\"button\" color=\"primary\" class=\"small text-uppercase mr-2\">\n            {{ labels.button.signUp }}\n          </button>\n        </div>\n        <div class=\"col {{ buttons.signUp ? 'text-left' : 'text-center'}}\">\n          <!-- NOTE: Sign in -->\n          <button mat-raised-button (click)=\"onClickNextStep(0)\" type=\"button\" color=\"primary\" class=\"small text-uppercase ml-2\">\n            {{ labels.button.signIn }}\n          </button>\n        </div>\n      </div>\n      <!-- NOTE: Social buttons -->\n      <ng-container *ngIf=\"!( formType === forms.MFA && formLayouts.mfa === layouts.INLINE )\">\n        <div class=\"row no-gutters\">\n          <div class=\"col text-center\">\n            <!-- NOTE: Google -->\n            <div class=\"d-block mb-3\" *ngIf=\"buttons.google\">\n              <button mat-raised-button type=\"button\" class=\"mat-raised-button cal-btn google {{ theme }}\" (click)=\"onClickLoginSocial('google')\">\n                <span class=\"cal-bg-icon\">\n                  <mat-icon class=\"align-middle cal-icon\" svgIcon=\"google\"></mat-icon>\n                </span>\n                <span class=\"cal-label\">{{ labels.button.googleSignIn }}</span>\n              </button>\n            </div>\n            <!-- NOTE: Facebook -->\n            <div class=\"d-block mb-3\" *ngIf=\"buttons.facebook\">\n              <button mat-raised-button type=\"button\" class=\"cal-btn facebook\" (click)=\"onClickLoginSocial('facebook')\">\n                <span class=\"cal-bg-icon\">\n                  <mat-icon class=\"align-middle cal-icon\" svgIcon=\"facebook\"></mat-icon>\n                </span>\n                <span class=\"cal-label\">{{ labels.button.facebookSignIn }}</span>\n              </button>\n            </div>\n          </div>\n        </div>\n      </ng-container>\n      <!-- NOTE: Inline MFA -->\n      <ng-container *ngIf=\"formType === forms.MFA && formLayouts.mfa === layouts.INLINE\">\n        <div class=\"row no-gutters\">\n          <div class=\"col\">\n            <cal-mfa-form \n              [inputs]=\"inputs\" \n              [labels]=\"labels\" \n              [errors]=\"errors\" \n              (sendMfa)=\"tabSendMfaCode($event)\">\n            </cal-mfa-form>\n          </div>\n        </div>\n      </ng-container>\n    </mat-tab>\n    <mat-tab label=\"usr-step\" *ngIf=\"googleStyle\">\n      <!-- NOTE: Back button -->\n      <div class=\"row no-gutters mb-3\">\n        <div class=\"col\">\n          <a href=\"#\" (click)=\"onClickPrevStep(1)\" title=\"{{ labels.button.back }}\">\n            <mat-icon class=\"align-bottom mr-2\">keyboard_arrow_left</mat-icon>{{ labels.button.back }}\n          </a>\n        </div>\n      </div>\n      <form (ngSubmit)=\"onClickNextStep(1)\" [formGroup]=\"usrFormGroup\">\n        <!-- NOTE: Username -->\n        <mat-form-field class=\"w-100\">\n          <div matPrefix class=\"mr-2\" *ngIf=\"icons.iconUsrOnLoginForm\">\n            <mat-icon class=\"align-bottom\">person</mat-icon>\n          </div>\n          <input matInput formControlName=\"username\" \n            name=\"username\" autocomplete=\"username\" \n            placeholder=\"{{ labels.input.username }}\" \n            type=\"text\"/>\n          <button *ngIf=\"usrFormGroup.controls.username.value?.length > 0 && inputs.clearUsrOnLoginForm\" \n            mat-button matSuffix mat-icon-button aria-label=\"Clear\" \n            color=\"primary\" (click)=\"usrFormGroup.controls.username.setValue('')\" \n            [disabled]=\"formType === forms.MFA && formLayouts.mfa === layouts.INLINE ? true : false\" \n            type=\"button\">\n            <mat-icon>close</mat-icon>\n          </button>\n          <!-- NOTE: Error message(s) -->\n          <mat-hint align=\"start\" *ngIf=\"usrFormGroup.controls.username.errors?.required && errors.login\">\n            {{ labels.policy.required }}\n          </mat-hint>\n          <mat-hint align=\"start\" *ngIf=\"usrFormGroup.controls.username.errors?.pattern && errors.login && usrPolicy === userPolicies.EMAIL\">\n            {{ labels.policy.email }}\n          </mat-hint>\n          <mat-hint align=\"start\" *ngIf=\"usrFormGroup.controls.username.errors?.pattern && errors.login && usrPolicy === userPolicies.PHONE\">\n            {{ labels.policy.phone }}\n          </mat-hint>\n          <mat-hint align=\"start\" *ngIf=\"usrFormGroup.controls.username.errors?.pattern && errors.login && usrPolicy && usrPolicy !== userPolicies.EMAIL && usrPolicy !== userPolicies.PHONE\">\n            {{ labels.policy.customRegex }}\n          </mat-hint>\n        </mat-form-field>\n        <div class=\"row no-gutters mb-3\">\n          <!-- NOTE: Forgot password -->\n          <div class=\"col text-left\" *ngIf=\"buttons.forgotPassword\">\n            <a (click)=\"onClickForgotPassword()\" href=\"#\" class=\"small\">\n              {{ labels.button.forgotPassword }}\n            </a>\n          </div>\n          <!-- NOTE: Next button -->\n          <div class=\"col text-right\">\n            <button mat-raised-button type=\"submit\" color=\"primary\" [disabled]=\"!usrFormGroup.valid\" class=\"small text-uppercase\">\n              {{ labels.button.next }}\n            </button>\n          </div>\n        </div>\n      </form>\n    </mat-tab>\n    <mat-tab label=\"pwd-step\" *ngIf=\"googleStyle\">\n      <!-- NOTE: Back button -->\n      <div class=\"row no-gutters mb-3\">\n        <div class=\"col\">\n          <a href=\"#\" (click)=\"onClickPrevStep(2)\" title=\"{{ labels.button.back }}\">\n            <mat-icon class=\"align-bottom mr-2\">keyboard_arrow_left</mat-icon>{{ labels.button.back }}\n          </a>\n        </div>\n      </div>\n      <!-- TODO: User info -->\n      <p>{{ userInfo }}</p>\n      <form (ngSubmit)=\"onClickNextStep(2)\" [formGroup]=\"pwdFormGroup\">\n        <!-- NOTE: Password -->\n        <mat-form-field class=\"w-100\">\n          <div matPrefix class=\"mr-2\" *ngIf=\"icons.iconPwdOnLoginForm\">\n            <mat-icon class=\"align-bottom\">lock</mat-icon>\n          </div>\n          <input matInput formControlName=\"password\" \n            name=\"password\" autocomplete=\"password\" \n            placeholder=\"{{ labels.input.password }}\" \n            type=\"{{ showPassword ? 'text' : 'password' }}\"/>\n          <button *ngIf=\"inputs.showPwdOnLoginForm\" \n            mat-button matSuffix mat-icon-button aria-label=\"Clear\" \n            color=\"primary\" (click)=\"showPassword=!showPassword\" \n            [disabled]=\"formType === forms.MFA && formLayouts.mfa === layouts.INLINE ? true : false\" \n            type=\"button\">\n            <mat-icon>{{ showPassword ? 'visibility_off' : 'visibility' }}</mat-icon>\n          </button>\n          <!-- NOTE: Error message -->\n          <mat-hint align=\"start\" *ngIf=\"pwdFormGroup.controls.password.errors?.required && errors.login\">\n            {{ labels.policy.required }}\n          </mat-hint>\n        </mat-form-field>\n        <!-- NOTE: Next button -->\n        <div class=\"row no-gutters mb-3\">\n          <div class=\"col text-right\">\n            <button mat-raised-button type=\"submit\" color=\"primary\" [disabled]=\"!pwdFormGroup.valid\" class=\"small text-uppercase\">\n              {{ labels.button.next }}\n            </button>\n          </div>\n        </div>\n      </form>\n    </mat-tab>\n    <mat-tab label=\"tab-wrapper\" *ngIf=\"(formLayouts | existsLayout: layouts.TAB)\">\n      <!-- NOTE: Tab form -->\n      <cal-tab-wrapper \n        [formType]=\"formType\" \n        [isFirst]=\"isFirst\" \n        [code]   =\"code\" \n        [qrCode] =\"qrCode\" \n        [pwdPolicies]=\"pwdPolicies\" \n        [errors]=\"errors\" \n        [labels]=\"labels\" \n        [inputs]=\"inputs\" \n        (sendCloseTab)=\"onClickCloseTab($event)\" \n        (relayFirstLog)=\"tabFirstLog($event)\" \n        (relayLostPwd)=\"tabLostPwd($event)\" \n        (relaySaveMfaKey)=\"tabSaveMfaKey($event)\" \n        (relaySendMfaCode)=\"tabSendMfaCode($event)\">\n      </cal-tab-wrapper>\n    </mat-tab>\n  </mat-tab-group>\n</div>","styles":["/deep/ #caliatys-login-form mat-tab-header{display:none!important}mat-form-field mat-icon{color:grey}.login-wrapper{width:100%;max-width:330px;padding:15px;margin:0 auto}.cal-btn{line-height:35px;border:0!important;padding:1px!important}.cal-btn .cal-bg-icon{padding:8px;width:34px;height:34px;display:inline-block;vertical-align:top!important}.cal-btn .cal-bg-icon .cal-icon{display:inline-block;height:18px;width:18px;margin-top:-4px;vertical-align:top!important}.cal-btn .cal-label{padding-right:8px;padding-left:16px;size:14px;font-family:Roboto,sans-serif}.adn{background-color:#d87a68!important;color:#fff!important}.adn i{color:#fff!important}.adn:hover{background-color:#e29e91!important}.bitbucket{background-color:#205081!important;color:#fff!important}.bitbucket i{color:#fff!important}.bitbucket:hover{background-color:#2a69aa!important}.dropbox{background-color:#1087dd!important;color:#fff!important}.dropbox i{color:#fff!important}.dropbox:hover{background-color:#309ff0!important}.facebook{background-color:#3b5998!important;color:#fff!important}.facebook i{color:#fff!important}.facebook:hover{background-color:#4c70ba!important}.flickr{background-color:#ff0084!important;color:#fff!important}.flickr i{color:#fff!important}.flickr:hover{background-color:#ff339d!important}.foursquare{background-color:#f94877!important;color:#fff!important}.foursquare i{color:#fff!important}.foursquare:hover{background-color:#fb799c!important}.github{background-color:#444!important;color:#fff!important}.github i{color:#fff!important}.github:hover{background-color:#5e5e5e!important}.instagram{background-color:#405de6!important;color:#fff!important}.instagram i{color:#fff!important}.instagram:hover{background-color:#6d83ec!important}.linkedin{background-color:#007bb6!important;color:#fff!important}.linkedin i{color:#fff!important}.linkedin:hover{background-color:#009de9!important}.microsoft{background-color:#2672ec!important;color:#fff!important}.microsoft i{color:#fff!important}.microsoft:hover{background-color:#5590f0!important}.windows{background-color:#2672ec!important;color:#fff!important}.windows i{color:#fff!important}.windows:hover{background-color:#5590f0!important}.odnoklassniki{background-color:#f4731c!important;color:#fff!important}.odnoklassniki i{color:#fff!important}.odnoklassniki:hover{background-color:#f6914d!important}.openid{background-color:#f7931e!important;color:#fff!important}.openid i{color:#fff!important}.openid:hover{background-color:#f9ab4f!important}.pinterest{background-color:#cb2027!important;color:#fff!important}.pinterest i{color:#fff!important}.pinterest:hover{background-color:#e03e44!important}.reddit{background-color:#eff7ff!important;color:#000!important}.reddit i{color:#000!important}.reddit:hover{background-color:#fff!important}.soundcloud{background-color:#f50!important;color:#fff!important}.soundcloud i{color:#fff!important}.soundcloud:hover{background-color:#f73!important}.tumblr{background-color:#2c4762!important;color:#fff!important}.tumblr i{color:#fff!important}.tumblr:hover{background-color:#3c6185!important}.twitter{background-color:#55acee!important;color:#fff!important}.twitter i{color:#fff!important}.twitter:hover{background-color:#83c3f3!important}.vimeo{background-color:#1ab7ea!important;color:#fff!important}.vimeo i{color:#fff!important}.vimeo:hover{background-color:#49c6ee!important}.vk{background-color:#587ea3!important;color:#fff!important}.vk i{color:#fff!important}.vk:hover{background-color:#7897b6!important}.yahoo{background-color:#720e9e!important;color:#fff!important}.yahoo i{color:#fff!important}.yahoo:hover{background-color:#9412cd!important}.google.light{background-color:#fff!important;color:#5f6368!important}.google.light i{color:#5f6368!important}.google.light:hover{background-color:#fff!important}.google.dark{background-color:#4285f4!important;color:#fff!important}.google.dark i{color:#fff!important}.google.dark:hover{background-color:#72a4f7!important}.google.dark .cal-bg-icon{background:#fff}"]}]}],"members":{"fixedWidth":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":320,"character":3}}]}],"googleStyle":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":322,"character":3}}]}],"googleTheme":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":324,"character":3}}]}],"customFormLayouts":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":327,"character":3}}]}],"customUsrPolicy":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":331,"character":3}}]}],"customPwdPolicies":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":333,"character":3}}]}],"customIcons":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":336,"character":3}}]}],"customButtons":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":339,"character":3}}]}],"customInputs":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":342,"character":3}}]}],"customErrors":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":345,"character":3}}]}],"customLabels":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":348,"character":3}}]}],"initialized":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":351,"character":3}}]}],"signUp":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":353,"character":3}}]}],"login":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":355,"character":3}}]}],"loginSocial":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":357,"character":3}}]}],"forgotPwd":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":359,"character":3}}]}],"sendResetPwd":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":361,"character":3}}]}],"sendFirstPwd":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":363,"character":3}}]}],"saveMfaKey":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":365,"character":3}}]}],"sendMfaCode":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":367,"character":3}}]}],"stepUsr":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":369,"character":3}}]}],"stepPwd":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":371,"character":3}}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@angular/material","name":"MatDialog","line":408,"character":27},{"__symbolic":"reference","module":"@angular/platform-browser","name":"DomSanitizer","line":409,"character":27},{"__symbolic":"reference","module":"@angular/material","name":"MatIconRegistry","line":410,"character":27},{"__symbolic":"reference","module":"@angular/forms","name":"FormBuilder","line":411,"character":27}]}],"ngOnInit":[{"__symbolic":"method"}],"ngAfterViewInit":[{"__symbolic":"method"}],"ngOnChanges":[{"__symbolic":"method"}],"ngOnDestroy":[{"__symbolic":"method"}],"onClickLogin":[{"__symbolic":"method"}],"onClickLoginSocial":[{"__symbolic":"method"}],"onClickSignUp":[{"__symbolic":"method"}],"onClickForgotPassword":[{"__symbolic":"method"}],"showPwdForm":[{"__symbolic":"method"}],"showMfaSetupForm":[{"__symbolic":"method"}],"showMfaForm":[{"__symbolic":"method"}],"hidePwdForm":[{"__symbolic":"method"}],"hideMfaSetupForm":[{"__symbolic":"method"}],"hideMfaForm":[{"__symbolic":"method"}],"showPwdStep":[{"__symbolic":"method"}],"onClickNextStep":[{"__symbolic":"method"}],"onClickPrevStep":[{"__symbolic":"method"}],"tabFirstLog":[{"__symbolic":"method"}],"tabLostPwd":[{"__symbolic":"method"}],"tabSaveMfaKey":[{"__symbolic":"method"}],"tabSendMfaCode":[{"__symbolic":"method"}],"modalFirstLog":[{"__symbolic":"method"}],"modalLostPwd":[{"__symbolic":"method"}],"modalSaveMfaKey":[{"__symbolic":"method"}],"modalSendMfaCode":[{"__symbolic":"method"}],"onClickCloseTab":[{"__symbolic":"method"}],"openModal":[{"__symbolic":"method"}],"showLayout":[{"__symbolic":"method"}],"closeLayout":[{"__symbolic":"method"}],"closeModal":[{"__symbolic":"method"}],"openTab":[{"__symbolic":"method"}],"closeTab":[{"__symbolic":"method"}],"getEventResponse":[{"__symbolic":"method"}],"initFormLayouts":[{"__symbolic":"method"}],"initTheme":[{"__symbolic":"method"}],"initIcons":[{"__symbolic":"method"}],"initButtons":[{"__symbolic":"method"}],"initInputs":[{"__symbolic":"method"}],"initErrors":[{"__symbolic":"method"}],"initPolicies":[{"__symbolic":"method"}],"initLabels":[{"__symbolic":"method"}],"initFormGroups":[{"__symbolic":"method"}]}},"MaterialModule":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"NgModule","line":49,"character":1},"arguments":[{"exports":[{"__symbolic":"reference","module":"@angular/material","name":"MatButtonModule","line":53,"character":4},{"__symbolic":"reference","module":"@angular/material","name":"MatInputModule","line":56,"character":4},{"__symbolic":"reference","module":"@angular/material","name":"MatIconModule","line":66,"character":4},{"__symbolic":"reference","module":"@angular/material","name":"MatDialogModule","line":68,"character":4},{"__symbolic":"reference","module":"@angular/material","name":"MatTabsModule","line":74,"character":4}]}]}],"members":{}},"LoginFormModule":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"NgModule","line":82,"character":1},"arguments":[{"imports":[{"__symbolic":"reference","module":"@angular/common","name":"CommonModule","line":84,"character":4},{"__symbolic":"reference","name":"MaterialModule"},{"__symbolic":"reference","module":"@angular/forms","name":"FormsModule","line":86,"character":4},{"__symbolic":"reference","module":"@angular/forms","name":"ReactiveFormsModule","line":87,"character":4},{"__symbolic":"reference","module":"angularx-qrcode","name":"QRCodeModule","line":88,"character":4}],"declarations":[{"__symbolic":"reference","name":"LoginFormComponent"},{"__symbolic":"reference","name":"PwdFormComponent"},{"__symbolic":"reference","name":"ModalWrapperComponent"},{"__symbolic":"reference","name":"TabWrapperComponent"},{"__symbolic":"reference","name":"ɵa"},{"__symbolic":"reference","name":"ɵb"},{"__symbolic":"reference","name":"ɵc"}],"providers":[],"entryComponents":[{"__symbolic":"reference","name":"ModalWrapperComponent"}],"exports":[{"__symbolic":"reference","name":"LoginFormComponent"},{"__symbolic":"reference","name":"PwdFormComponent"},{"__symbolic":"reference","name":"ModalWrapperComponent"},{"__symbolic":"reference","name":"TabWrapperComponent"},{"__symbolic":"reference","name":"ɵa"},{"__symbolic":"reference","name":"ɵb"},{"__symbolic":"reference","name":"ɵc"}]}]}],"members":{}},"ModalWrapperComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":15,"character":1},"arguments":[{"selector":"cal-modal-wrapper","template":"<div class=\"header py-2 px-4\">\n  <div class=\"row align-items-center\">\n    <div class=\"col\">\n      <div *ngIf=\"!isFirst && formType === forms.PWD\">\n        <span class=\"h5 font-weight-light {{ labels.header.subtitlePwd ? 'd-block mb-0' : '' }}\">\n          {{ labels.header.titlePwd }}\n        </span>\n        <span *ngIf=\"labels.header.subtitlePwd\" class=\"d-block font-weight-light small\">\n          {{ labels.header.subtitlePwd }}\n        </span>\n      </div>\n      <div *ngIf=\"isFirst && formType === forms.PWD\">\n        <span class=\"h5 font-weight-light {{ labels.header.subtitlePwdSetup ? 'd-block mb-0' : '' }}\">\n          {{ labels.header.titlePwdSetup }}\n        </span>\n        <span *ngIf=\"labels.header.subtitlePwdSetup\" class=\"d-block font-weight-light small\">\n          {{ labels.header.subtitlePwdSetup }}\n        </span>\n      </div>\n      <div *ngIf=\"formType === forms.MFA\">\n        <span class=\"h5 font-weight-light {{ labels.header.subtitleMfa ? 'd-block mb-0' : '' }}\">\n          {{ labels.header.titleMfa }}\n        </span>\n        <span *ngIf=\"labels.header.subtitleMfa\" class=\"d-block font-weight-light small\">\n          {{ labels.header.subtitleMfa }}\n        </span>\n      </div>\n      <div *ngIf=\"formType === forms.MFA_SETUP\">\n        <span class=\"h5 font-weight-light {{ labels.header.subtitleMfaSetup ? 'd-block mb-0' : '' }}\">\n          {{ labels.header.titleMfaSetup }}\n        </span>\n        <span *ngIf=\"labels.header.subtitleMfaSetup\" class=\"d-block font-weight-light small\">\n          {{ labels.header.subtitleMfaSetup }}\n        </span>\n      </div>\n    </div>\n    <div class=\"col-2 px-0 text-right\">\n      <button mat-icon-button mat-dialog-close>\n        <mat-icon>close</mat-icon>\n      </button>\n    </div>\n  </div>\n</div>\n<mat-dialog-content class=\"py-4\">\n  <!-- NOTE: Pwd Form -->\n  <cal-pwd-form *ngIf=\"formType === forms.PWD\" \n    [isFirst]=\"isFirst\" \n    [pwdPolicies]=\"pwdPolicies\" \n    [labels]=\"labels\" \n    [inputs]=\"inputs\" \n    [errors]=\"errors\" \n    (firstConnection)=\"relayFirstLogEvent($event)\" \n    (lostPassword)=\"relayLostPwdEvent($event)\">\n  </cal-pwd-form>\n  <!-- NOTE: MFA Setup Form -->\n  <cal-mfa-setup-form *ngIf=\"formType === forms.MFA_SETUP\" \n    [qrCode]=\"qrCode\" \n    [code]  =\"code\" \n    [labels]=\"labels\" \n    [inputs]=\"inputs\" \n    [errors]=\"errors\" \n    (saveMfa)=\"relaySaveMfaKeyEvent($event)\">\n  </cal-mfa-setup-form>\n  <!-- NOTE: MFA Form -->\n  <cal-mfa-form *ngIf=\"formType === forms.MFA\" \n    [labels]=\"labels\" \n    [inputs]=\"inputs\" \n    [errors]=\"errors\" \n    (sendMfa)=\"relaySendMfaCodeEvent($event)\">\n  </cal-mfa-form>\n</mat-dialog-content>","styles":[".header{color:#fff;background:#5eacff}"]}]}],"members":{"__ctor__":[{"__symbolic":"constructor","parameterDecorators":[null,[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Inject","line":130,"character":5},"arguments":[{"__symbolic":"reference","module":"@angular/material","name":"MAT_DIALOG_DATA","line":130,"character":12}]}]],"parameters":[{"__symbolic":"reference","name":"MatDialogRef","module":"@angular/material","arguments":[{"__symbolic":"reference","name":"ModalWrapperComponent"}]},{"__symbolic":"reference","name":"any"}]}],"ngOnInit":[{"__symbolic":"method"}],"ngOnDestroy":[{"__symbolic":"method"}],"relayFirstLogEvent":[{"__symbolic":"method"}],"relayLostPwdEvent":[{"__symbolic":"method"}],"relaySaveMfaKeyEvent":[{"__symbolic":"method"}],"relaySendMfaCodeEvent":[{"__symbolic":"method"}],"loadParams":[{"__symbolic":"method"}]}},"TabWrapperComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":11,"character":1},"arguments":[{"selector":"cal-tab-wrapper","template":"<div class=\"header py-2 px-4 mb-3\">\n  <div class=\"row align-items-center\">\n    <div class=\"col-2 px-0 text-left\">\n      <button mat-icon-button (click)=\"backToLogin()\">\n        <mat-icon>arrow_back</mat-icon>\n      </button>\n    </div>\n    <div class=\"col text-right\">\n      <div *ngIf=\"!isFirst && formType === forms.PWD\">\n        <span class=\"h5 font-weight-light {{ labels.header.subtitlePwd ? 'd-block mb-0' : '' }}\">\n          {{ labels.header.titlePwd }}\n        </span>\n        <span *ngIf=\"labels.header.subtitlePwd\" class=\"d-block font-weight-light small\">\n          {{ labels.header.subtitlePwd }}\n        </span>\n      </div>\n      <div *ngIf=\"isFirst && formType === forms.PWD\">\n        <span class=\"h5 font-weight-light {{ labels.header.subtitlePwdSetup ? 'd-block mb-0' : '' }}\">\n          {{ labels.header.titlePwdSetup }}\n        </span>\n        <span *ngIf=\"labels.header.subtitlePwdSetup\" class=\"d-block font-weight-light small\">\n          {{ labels.header.subtitlePwdSetup }}\n        </span>\n      </div>\n      <div *ngIf=\"formType === forms.MFA\">\n        <span class=\"h5 font-weight-light {{ labels.header.subtitleMfa ? 'd-block mb-0' : '' }}\">\n          {{ labels.header.titleMfa }}\n        </span>\n        <span *ngIf=\"labels.header.subtitleMfa\" class=\"d-block font-weight-light small\">\n          {{ labels.header.subtitleMfa }}\n        </span>\n      </div>\n      <div *ngIf=\"formType === forms.MFA_SETUP\">\n        <span class=\"h5 font-weight-light {{ labels.header.subtitleMfaSetup ? 'd-block mb-0' : '' }}\">\n          {{ labels.header.titleMfaSetup }}\n        </span>\n        <span *ngIf=\"labels.header.subtitleMfaSetup\" class=\"d-block font-weight-light small\">\n          {{ labels.header.subtitleMfaSetup }}\n        </span>\n      </div>\n    </div>\n  </div>\n</div>\n<!-- NOTE: Pwd Form -->\n<cal-pwd-form *ngIf=\"formType === forms.PWD\" \n  [isFirst]=\"isFirst\" \n  [pwdPolicies]=\"pwdPolicies\" \n  [labels]=\"labels\" \n  [inputs]=\"inputs\" \n  [errors]=\"errors\" \n  (firstConnection)=\"relayFirstLogEvent($event)\" \n  (lostPassword)=\"relayLostPwdEvent($event)\">\n</cal-pwd-form>\n<!-- NOTE: MFA Setup Form -->\n<cal-mfa-setup-form *ngIf=\"formType === forms.MFA_SETUP\" \n  [qrCode]=\"qrCode\" \n  [code]  =\"code\" \n  [labels]=\"labels\" \n  [inputs]=\"inputs\" \n  [errors]=\"errors\" \n  (saveMfa)=\"relaySaveMfaKeyEvent($event)\">\n</cal-mfa-setup-form>\n<!-- NOTE: MFA Form -->\n<cal-mfa-form *ngIf=\"formType === forms.MFA\" \n  [labels]=\"labels\" \n  [inputs]=\"inputs\" \n  [errors]=\"errors\" \n  (sendMfa)=\"relaySendMfaCodeEvent($event)\">\n</cal-mfa-form>","styles":[".header{color:#fff;background:#5eacff}"]}]}],"members":{"formType":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":91,"character":3}}]}],"labels":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":93,"character":3}}]}],"errors":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":95,"character":3}}]}],"inputs":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":97,"character":3}}]}],"sendCloseTab":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":99,"character":3}}]}],"isFirst":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":103,"character":3}}]}],"pwdPolicies":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":105,"character":3}}]}],"relayFirstLog":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":107,"character":3}}]}],"relayLostPwd":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":108,"character":3}}]}],"code":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":112,"character":3}}]}],"qrCode":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":113,"character":3}}]}],"relaySaveMfaKey":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":115,"character":3}}]}],"relaySendMfaCode":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":119,"character":3}}]}],"__ctor__":[{"__symbolic":"constructor"}],"ngOnInit":[{"__symbolic":"method"}],"ngOnDestroy":[{"__symbolic":"method"}],"backToLogin":[{"__symbolic":"method"}],"relayFirstLogEvent":[{"__symbolic":"method"}],"relayLostPwdEvent":[{"__symbolic":"method"}],"relaySaveMfaKeyEvent":[{"__symbolic":"method"}],"relaySendMfaCodeEvent":[{"__symbolic":"method"}]}},"PwdFormComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":17,"character":1},"arguments":[{"selector":"cal-pwd-form","template":"<!-- NOTE: <form autocomplete=\"off\"> will turn off autocomplete for the form in most browsers\n     except for username/email/password fields -->\n<form (ngSubmit)=\"send()\" [formGroup]=\"formGroup\" autocomplete=\"off\">\n\n  <!-- NOTE: fake fields are a workaround for chrome/opera autofill getting the wrong fields -->\n  <input id=\"username\" style=\"display:none\" type=\"text\" name=\"fakeusernameremembered\">\n  <input id=\"password\" style=\"display:none\" type=\"password\" name=\"fakepasswordremembered\">\n\n  <div class=\"row w-100 no-gutters\" *ngIf=\"!isFirst\">\n    <div class=\"col\">\n      <mat-form-field class=\"w-100\">\n        <!-- NOTE: <input autocomplete=\"nope\"> turns off autocomplete on many other browsers that don't respect\n          the form's \"off\", but not for \"password\" inputs. -->\n        <input matInput formControlName=\"verifCode\" \n          name=\"verif-code\" autocomplete=\"nope\" \n          placeholder=\"{{ labels.input.verifCode }}\" \n          pattern=\"\\d{6}\" \n          type=\"text\"/> <!-- NOTE: Pattern matches any non-whitespace character -->\n        <button *ngIf=\"formGroup.controls.verifCode.valid && inputs.clearCodeOnPwdForm\" \n          mat-button matSuffix mat-icon-button aria-label=\"Clear\" \n          color=\"primary\" (click)=\"formGroup.controls.verifCode.setValue('')\" \n          type=\"button\">\n          <mat-icon>close</mat-icon>\n        </button>\n        <!-- NOTE: Error messages -->\n        <mat-hint align=\"start\" *ngIf=\"formGroup.controls.verifCode.errors?.required && errors.pwd\">\n          {{ labels.policy.required }}\n        </mat-hint>\n        <mat-hint align=\"start\" *ngIf=\"formGroup.controls.verifCode.errors?.pattern && errors.pwd\">\n          {{ labels.policy.sixDigits }}\n        </mat-hint>\n      </mat-form-field>\n    </div>\n  </div>\n  <!-- NOTE: <input type=\"password\" autocomplete=\"new-password\" will turn it off for passwords everywhere -->\n  <div class=\"row w-100 no-gutters\">\n    <div class=\"col\">\n      <mat-form-field class=\"w-100\">\n        <input matInput formControlName=\"newPassword\" \n          name=\"new-password\" autocomplete=\"new-password\" \n          placeholder=\"{{ labels.input.newPassword }}\" \n          type=\"{{ showPassword ? 'text' : 'password' }}\"/>\n        <button *ngIf=\"inputs.showPwdOnPwdForm\" \n          mat-button matSuffix mat-icon-button aria-label=\"Clear\" \n          color=\"primary\" (click)=\"showPassword=!showPassword\" \n          type=\"button\">\n          <mat-icon>{{ showPassword ? 'visibility_off' : 'visibility' }}</mat-icon>\n        </button>\n        <!-- NOTE: Error message -->\n        <mat-hint align=\"start\" *ngIf=\"formGroup.controls.newPassword.errors?.required && errors.pwd\">\n          {{ labels.policy.required }}\n        </mat-hint>\n      </mat-form-field>\n    </div>\n  </div>\n  <div class=\"row w-100 no-gutters\">\n    <div class=\"col\">\n      <ul class=\"list-unstyled small\">\n        <li class=\"check-policy\">\n          <mat-icon class=\"red-policy\" *ngIf=\"formGroup.controls.newPassword.errors && formGroup.controls.newPassword.errors.longEnough\">close</mat-icon>\n          <mat-icon class=\"green-policy\" *ngIf=\"!formGroup.controls.newPassword.errors || !formGroup.controls.newPassword.errors.longEnough\">check</mat-icon>\n          {{ labels.policy.pwdLengthReplaced }}\n        </li>\n        <li class=\"check-policy\" *ngIf=\"pwdPolicies.upper\">\n          <mat-icon class=\"red-policy\" *ngIf=\"formGroup.controls.newPassword.errors && formGroup.controls.newPassword.errors.upper\">close</mat-icon>\n          <mat-icon class=\"green-policy\" *ngIf=\"!formGroup.controls.newPassword.errors || !formGroup.controls.newPassword.errors.upper\">check</mat-icon>\n          {{ labels.policy.pwdUppercase }}\n        </li>\n        <li class=\"check-policy\" *ngIf=\"pwdPolicies.lower\">\n          <mat-icon class=\"red-policy\" *ngIf=\"formGroup.controls.newPassword.errors && formGroup.controls.newPassword.errors.lower\">close</mat-icon>\n          <mat-icon class=\"green-policy\" *ngIf=\"!formGroup.controls.newPassword.errors || !formGroup.controls.newPassword.errors.lower\">check</mat-icon>\n          {{ labels.policy.pwdLowercase }}\n        </li>\n        <li class=\"check-policy\" *ngIf=\"pwdPolicies.number\">\n          <mat-icon class=\"red-policy\" *ngIf=\"formGroup.controls.newPassword.errors && formGroup.controls.newPassword.errors.number\">close</mat-icon>\n          <mat-icon class=\"green-policy\" *ngIf=\"!formGroup.controls.newPassword.errors || !formGroup.controls.newPassword.errors.number\">check</mat-icon>\n          {{ labels.policy.pwdNumber }}\n        </li>\n        <li class=\"check-policy\" *ngIf=\"pwdPolicies.char\">\n          <mat-icon class=\"red-policy\" *ngIf=\"formGroup.controls.newPassword.errors && formGroup.controls.newPassword.errors.char\">close</mat-icon>\n          <mat-icon class=\"green-policy\" *ngIf=\"!formGroup.controls.newPassword.errors || !formGroup.controls.newPassword.errors.char\">check</mat-icon>\n          {{ labels.policy.pwdSpecial }}\n        </li>\n      </ul>\n    </div>\n  </div>\n  <!-- TODO: Enable Google Captcha -->\n  <!-- <div class=\"row w-100 no-gutters\">\n    <div class=\"col\">\n      <re-captcha site_key=\"6LdBtAkUAAAAAB2_l_TOz7oZmTLXaFjP1cxnu4yM\"\n        (captchaResponse)=\"handleCorrectCaptcha($event)\">\n      </re-captcha>\n    </div>\n  </div> -->\n  <div class=\"pt-0 pb-4 px-4\">\n    <div class=\"row w-100 no-gutters\">\n      <div class=\"col text-right\">\n        <button color=\"primary\" mat-raised-button class=\"small text-uppercase\" type=\"submit\" [disabled]=\"!formGroup.valid\">\n          {{ labels.button.send }}\n        </button>\n      </div>\n    </div>\n  </div>\n</form>","styles":[".green-policy{color:green}.red-policy{color:red}.check-policy{display:flex;align-items:center}.check-policy .mat-icon{margin-right:4px;font-size:22px;height:22px;width:22px}"]}]}],"members":{"labels":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":132,"character":3}}]}],"errors":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":134,"character":3}}]}],"inputs":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":136,"character":3}}]}],"isFirst":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":139,"character":3}}]}],"pwdPolicies":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":141,"character":3}}]}],"firstConnection":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":143,"character":3}}]}],"lostPassword":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":144,"character":3}}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@angular/forms","name":"FormBuilder","line":148,"character":22}]}],"ngOnInit":[{"__symbolic":"method"}],"ngOnChanges":[{"__symbolic":"method"}],"ngOnDestroy":[{"__symbolic":"method"}],"send":[{"__symbolic":"method"}],"initFormGroups":[{"__symbolic":"method"}]}},"ɵa":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":12,"character":1},"arguments":[{"selector":"cal-mfa-setup-form","template":"<div class=\"code text-center\">\n  <qrcode [qrdata]=\"qrCode\" [size]=\"100\" [level]=\"'L'\"></qrcode>\n  <p class=\"my-3\">{{ code }}</p>\n</div>\n<form (ngSubmit)=\"send()\" [formGroup]=\"formGroup\" autocomplete=\"off\">\n  <mat-form-field class=\"w-100\">\n    <input matInput formControlName=\"verifCode\" \n      name=\"verifCode\" placeholder=\"{{ labels.input.verifCode }}\" \n      pattern=\"\\d{6}\" \n      type=\"text\"/> <!-- NOTE: Pattern matches 6 digits -->\n    <button *ngIf=\"formGroup.controls.verifCode.valid && inputs.clearCodeOnMfaForm\" \n      mat-button matSuffix mat-icon-button aria-label=\"Clear\" \n      color=\"primary\" (click)=\"formGroup.controls.verifCode.setValue('')\" \n      type=\"button\">\n      <mat-icon>close</mat-icon>\n    </button>\n    <!-- NOTE: Error messages -->\n    <mat-hint align=\"start\" *ngIf=\"formGroup.controls.verifCode.errors?.required && errors.mfa\">\n      {{ labels.policy.required }}\n    </mat-hint>\n    <mat-hint align=\"start\" *ngIf=\"formGroup.controls.verifCode.errors?.pattern && errors.mfa\">\n      {{ labels.policy.sixDigits }}\n    </mat-hint>\n  </mat-form-field>\n  <div class=\"row w-100 no-gutters\">\n    <div class=\"col text-right\">\n      <button color=\"primary\" mat-raised-button class=\"small text-uppercase\" type=\"submit\" [disabled]=\"!formGroup.valid\">\n        {{ labels.button.save }}\n      </button>\n    </div>\n  </div>\n</form>","styles":[".code{display:flex;flex-direction:column;align-items:center}"]}]}],"members":{"labels":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":53,"character":3}}]}],"errors":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":55,"character":3}}]}],"inputs":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":57,"character":3}}]}],"qrCode":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":60,"character":3}}]}],"code":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":61,"character":3}}]}],"saveMfa":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":63,"character":3}}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@angular/forms","name":"FormBuilder","line":67,"character":22}]}],"ngOnInit":[{"__symbolic":"method"}],"ngOnDestroy":[{"__symbolic":"method"}],"send":[{"__symbolic":"method"}],"initFormGroups":[{"__symbolic":"method"}]}},"ɵb":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":12,"character":1},"arguments":[{"selector":"cal-mfa-form","template":"<form (ngSubmit)=\"send()\" [formGroup]=\"formGroup\" autocomplete=\"off\">\n  <mat-form-field class=\"w-100\">\n    <input matInput formControlName=\"verifCode\" \n      name=\"verifCode\" placeholder=\"{{ labels.input.verifCode }}\" \n      pattern=\"\\d{6}\" \n      type=\"text\"/> <!-- NOTE: Pattern matches 6 digits -->\n    <button *ngIf=\"formGroup.controls.verifCode.valid && inputs.clearCodeOnMfaForm\" \n      mat-button matSuffix mat-icon-button aria-label=\"Clear\" \n      color=\"primary\" (click)=\"formGroup.controls.verifCode.setValue('')\" \n      type=\"button\">\n      <mat-icon>close</mat-icon>\n    </button>\n    <!-- NOTE: Error messages -->\n    <mat-hint align=\"start\" *ngIf=\"formGroup.controls.verifCode.errors?.required && errors.mfa\">\n      {{ labels.policy.required }}\n    </mat-hint>\n    <mat-hint align=\"start\" *ngIf=\"formGroup.controls.verifCode.errors?.pattern && errors.mfa\">\n      {{ labels.policy.sixDigits }}\n    </mat-hint>\n  </mat-form-field>\n  <div class=\"row w-100 no-gutters\">\n    <div class=\"col text-right\">\n      <button color=\"primary\" mat-raised-button class=\"small text-uppercase\" type=\"submit\" [disabled]=\"!formGroup.valid\">\n        {{ labels.button.send }}\n      </button>\n    </div>\n  </div>\n</form>","styles":[""]}]}],"members":{"labels":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":49,"character":3}}]}],"errors":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":51,"character":3}}]}],"inputs":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":53,"character":3}}]}],"sendMfa":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":56,"character":3}}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@angular/forms","name":"FormBuilder","line":60,"character":22}]}],"ngOnInit":[{"__symbolic":"method"}],"ngOnDestroy":[{"__symbolic":"method"}],"send":[{"__symbolic":"method"}],"initFormGroups":[{"__symbolic":"method"}]}},"ɵc":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Pipe","line":3,"character":1},"arguments":[{"name":"existsLayout"}]}],"members":{"transform":[{"__symbolic":"method"}]}}},"origins":{"LoginFormComponent":"./lib/login-form.component","MaterialModule":"./lib/login-form.module","LoginFormModule":"./lib/login-form.module","ModalWrapperComponent":"./lib/layouts/modal-wrapper/modal-wrapper.component","TabWrapperComponent":"./lib/layouts/tab-wrapper/tab-wrapper.component","PwdFormComponent":"./lib/forms/pwd-form/pwd-form.component","ɵa":"./lib/forms/mfa-setup-form/mfa-setup-form.component","ɵb":"./lib/forms/mfa-form/mfa-form.component","ɵc":"./lib/pipes/exists-layout.pipe"},"importAs":"@caliatys/login-form"}