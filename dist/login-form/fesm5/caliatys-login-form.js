import { Component, Inject, EventEmitter, Input, Output, Pipe, NgModule } from '@angular/core';
import { MatDialogRef, MAT_DIALOG_DATA, MatDialog, MatIconRegistry, MatButtonModule, MatIconModule, MatInputModule, MatTabsModule, MatDialogModule } from '@angular/material';
import { DomSanitizer } from '@angular/platform-browser';
import { FormControl, FormBuilder, Validators, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { __values } from 'tslib';
import { CommonModule } from '@angular/common';
import { QRCodeModule } from 'angularx-qrcode';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var UsrValidator = /** @class */ (function () {
    function UsrValidator() {
    }
    /**
     * @param {?} regexp
     * @return {?}
     */
    UsrValidator.custom = /**
     * @param {?} regexp
     * @return {?}
     */
    function (regexp) {
        var /** @type {?} */ func = function (control) {
            var /** @type {?} */ isRespectful = control.value !== null && regexp.test(control.value);
            if (!isRespectful)
                return { custom: true };
            return null;
        };
        return func;
    };
    /**
     * @param {?} control
     * @return {?}
     */
    UsrValidator.email = /**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        var /** @type {?} */ isEmail = control.value !== null && /[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,4}/.test(control.value);
        if (!isEmail)
            return { email: true };
        return null;
    };
    /**
     * @param {?} control
     * @return {?}
     */
    UsrValidator.phone = /**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        var /** @type {?} */ isPhone = control.value !== null && /^\+?\d*$/.test(control.value);
        if (!isPhone)
            return { phone: true };
        return null;
    };
    return UsrValidator;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/** @enum {string} */
var Layouts = {
    MODAL: 'modal',
    TAB: 'tab',
    INLINE: 'inline',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/** @enum {string} */
var Themes = {
    LIGHT: 'light',
    DARK: 'dark',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/** @enum {string} */
var Forms = {
    PWD: 'pwd',
    MFA_SETUP: 'mfaSetup',
    MFA: 'mfa',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/** @enum {string} */
var UserPolicies = {
    EMAIL: 'email',
    PHONE: 'phone',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var ModalWrapperComponent = /** @class */ (function () {
    function ModalWrapperComponent(dialogRef, data) {
        this.dialogRef = dialogRef;
        this.data = data;
        this.forms = Forms;
        this.relayFirstLog = new EventEmitter();
        this.relayLostPwd = new EventEmitter();
        this.relaySaveMfaKey = new EventEmitter();
        this.relaySendMfaCode = new EventEmitter();
        this.loadParams();
    }
    /**
     * @return {?}
     */
    ModalWrapperComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    ModalWrapperComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.closeSub)
            this.closeSub.unsubscribe();
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ModalWrapperComponent.prototype.relayFirstLogEvent = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.relayFirstLog.emit($event);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ModalWrapperComponent.prototype.relayLostPwdEvent = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.relayLostPwd.emit($event);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ModalWrapperComponent.prototype.relaySaveMfaKeyEvent = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.relaySaveMfaKey.emit($event);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ModalWrapperComponent.prototype.relaySendMfaCodeEvent = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.relaySendMfaCode.emit($event);
    };
    /**
     * @return {?}
     */
    ModalWrapperComponent.prototype.loadParams = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var /** @type {?} */ data;
        data = this.data;
        if (data !== null) {
            this.formType = data.formType;
            // NOTE: Common
            // Labels
            this.labels = data.labels;
            // Labels
            this.errors = data.errors;
            // Labels
            this.inputs = data.inputs;
            // NOTE: Password
            // First connection or Forgot password
            this.isFirst = data.isFirst;
            // Password policies
            this.pwdPolicies = data.pwdPolicies;
            // NOTE: MFA
            // Mfa setupd codes
            this.code = data.code;
            this.qrCode = data.qrCode;
            // Close dialog event
            this.closeSub = data.closeEvent.subscribe(function (res) {
                _this.dialogRef.close();
            });
        }
    };
    ModalWrapperComponent.decorators = [
        { type: Component, args: [{
                    selector: 'cal-modal-wrapper',
                    template: "<div class=\"header py-2 px-4\">\n  <div class=\"row align-items-center\">\n    <div class=\"col\">\n      <div *ngIf=\"!isFirst && formType === forms.PWD\">\n        <span class=\"h5 font-weight-light {{ labels.header.subtitlePwd ? 'd-block mb-0' : '' }}\">\n          {{ labels.header.titlePwd }}\n        </span>\n        <span *ngIf=\"labels.header.subtitlePwd\" class=\"d-block font-weight-light small\">\n          {{ labels.header.subtitlePwd }}\n        </span>\n      </div>\n      <div *ngIf=\"isFirst && formType === forms.PWD\">\n        <span class=\"h5 font-weight-light {{ labels.header.subtitlePwdSetup ? 'd-block mb-0' : '' }}\">\n          {{ labels.header.titlePwdSetup }}\n        </span>\n        <span *ngIf=\"labels.header.subtitlePwdSetup\" class=\"d-block font-weight-light small\">\n          {{ labels.header.subtitlePwdSetup }}\n        </span>\n      </div>\n      <div *ngIf=\"formType === forms.MFA\">\n        <span class=\"h5 font-weight-light {{ labels.header.subtitleMfa ? 'd-block mb-0' : '' }}\">\n          {{ labels.header.titleMfa }}\n        </span>\n        <span *ngIf=\"labels.header.subtitleMfa\" class=\"d-block font-weight-light small\">\n          {{ labels.header.subtitleMfa }}\n        </span>\n      </div>\n      <div *ngIf=\"formType === forms.MFA_SETUP\">\n        <span class=\"h5 font-weight-light {{ labels.header.subtitleMfaSetup ? 'd-block mb-0' : '' }}\">\n          {{ labels.header.titleMfaSetup }}\n        </span>\n        <span *ngIf=\"labels.header.subtitleMfaSetup\" class=\"d-block font-weight-light small\">\n          {{ labels.header.subtitleMfaSetup }}\n        </span>\n      </div>\n    </div>\n    <div class=\"col-2 px-0 text-right\">\n      <button mat-icon-button mat-dialog-close>\n        <mat-icon>close</mat-icon>\n      </button>\n    </div>\n  </div>\n</div>\n<mat-dialog-content class=\"py-4\">\n  <!-- NOTE: Pwd Form -->\n  <cal-pwd-form *ngIf=\"formType === forms.PWD\" \n    [isFirst]=\"isFirst\" \n    [pwdPolicies]=\"pwdPolicies\" \n    [labels]=\"labels\" \n    [inputs]=\"inputs\" \n    [errors]=\"errors\" \n    (firstConnection)=\"relayFirstLogEvent($event)\" \n    (lostPassword)=\"relayLostPwdEvent($event)\">\n  </cal-pwd-form>\n  <!-- NOTE: MFA Setup Form -->\n  <cal-mfa-setup-form *ngIf=\"formType === forms.MFA_SETUP\" \n    [qrCode]=\"qrCode\" \n    [code]  =\"code\" \n    [labels]=\"labels\" \n    [inputs]=\"inputs\" \n    [errors]=\"errors\" \n    (saveMfa)=\"relaySaveMfaKeyEvent($event)\">\n  </cal-mfa-setup-form>\n  <!-- NOTE: MFA Form -->\n  <cal-mfa-form *ngIf=\"formType === forms.MFA\" \n    [labels]=\"labels\" \n    [inputs]=\"inputs\" \n    [errors]=\"errors\" \n    (sendMfa)=\"relaySendMfaCodeEvent($event)\">\n  </cal-mfa-form>\n</mat-dialog-content>",
                    styles: [".header{color:#fff;background:#5eacff}"]
                },] },
    ];
    /** @nocollapse */
    ModalWrapperComponent.ctorParameters = function () { return [
        { type: MatDialogRef, },
        { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] },] },
    ]; };
    return ModalWrapperComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var LoginFormComponent = /** @class */ (function () {
    // TODO: Captcha
    // @Input()  rememberMe    : boolean = true; // TODO: check box
    function LoginFormComponent(dialog, sanitizer, iconRegistry, builder) {
        this.dialog = dialog;
        this.sanitizer = sanitizer;
        this.iconRegistry = iconRegistry;
        this.builder = builder;
        // Display login form inside a container
        this.fixedWidth = false;
        // Display login form like Google & Microsoft (step by step)
        this.googleStyle = false;
        // Display Google button with the supplied theme : light / dark
        this.googleTheme = null;
        // Optional policy applied on the username input : email / phone / regex
        // Be careful, you must double all the backslashes used in the supplied regex
        this.customUsrPolicy = null;
        // Event triggered after creating the login form (AfterViewInit)
        this.initialized = new EventEmitter();
        // Event triggered after clicking on the sign up button.
        this.signUp = new EventEmitter();
        // Event object containing username and password properties
        this.login = new EventEmitter();
        // Event object containing username, password and social properties
        this.loginSocial = new EventEmitter();
        // Event object containing username property
        this.forgotPwd = new EventEmitter();
        // Event object containing password and code properties
        this.sendResetPwd = new EventEmitter();
        // Event object containing password property
        this.sendFirstPwd = new EventEmitter();
        // Event object containing code property
        this.saveMfaKey = new EventEmitter();
        // Event object containing code property
        this.sendMfaCode = new EventEmitter();
        // Event object containing username property
        this.stepUsr = new EventEmitter();
        // Event object containing username and password property
        this.stepPwd = new EventEmitter();
        this.showPassword = false;
        this.userPolicies = UserPolicies;
        this.forms = Forms;
        this.isFirst = false;
        this.code = null;
        this.qrCode = null;
        this.userInfo = null;
        this.userImage = null;
        this.layouts = Layouts;
        this.selectedTab = 0;
        this.closeModalEvent = new EventEmitter();
        // Social icons
        // TODO: Fix Angular 6 Library assets : https://github.com/angular/angular-cli/issues/11071
        iconRegistry.addSvgIcon('google', sanitizer.bypassSecurityTrustResourceUrl('../assets/img/google.svg'));
        iconRegistry.addSvgIcon('facebook', sanitizer.bypassSecurityTrustResourceUrl('../assets/img/facebook.svg'));
    }
    /**
     * @return {?}
     */
    LoginFormComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        // Login form
        this.initFormGroups();
        // Style (container, step, theme & layout)
        this.initFormLayouts();
        this.initTheme();
        this.initPolicies();
        this.initIcons();
        this.initButtons();
        this.initInputs();
        this.initErrors();
        this.initLabels();
    };
    /**
     * @return {?}
     */
    LoginFormComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.initialized.emit();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    LoginFormComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes["googleStyle"])
            this.initFormGroups();
        if (changes["customFormLayouts"])
            this.initFormLayouts();
        if (changes["googleTheme"])
            this.initTheme();
        if (changes["customPwdPolicies"] || changes["customUsrPolicy"])
            this.initPolicies();
        if (changes["customIcons"])
            this.initIcons();
        if (changes["customButtons"])
            this.initButtons();
        if (changes["customInputs"])
            this.initInputs();
        if (changes["customErrors"])
            this.initErrors();
        if (changes["customLabels"])
            this.initLabels();
    };
    /**
     * @return {?}
     */
    LoginFormComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.modalFirstSub)
            this.modalFirstSub.unsubscribe();
        if (this.modalLostSub)
            this.modalLostSub.unsubscribe();
        if (this.modalSaveMfaKeySub)
            this.modalSaveMfaKeySub.unsubscribe();
        if (this.modalSendMfaCodeSub)
            this.modalSendMfaCodeSub.unsubscribe();
    };
    /**
     * Emit `$event` object containing username and password properties.
     *
     * \@example
     * var username : string = $event.username;
     * var password : string = $event.password;
     * @return {?}
     */
    LoginFormComponent.prototype.onClickLogin = /**
     * Emit `$event` object containing username and password properties.
     *
     * \@example
     * var username : string = $event.username;
     * var password : string = $event.password;
     * @return {?}
     */
    function () {
        var /** @type {?} */ event = {};
        event = this.getEventResponse();
        this.login.emit(event);
    };
    /**
     * Emit `$event` object containing username, password and social properties.
     *
     * \@example
     * var username : string = $event.username;
     * var password : string = $event.password;
     * var social   : string = $event.social;
     * @param {?} social Name of the social provider
     * @return {?}
     */
    LoginFormComponent.prototype.onClickLoginSocial = /**
     * Emit `$event` object containing username, password and social properties.
     *
     * \@example
     * var username : string = $event.username;
     * var password : string = $event.password;
     * var social   : string = $event.social;
     * @param {?} social Name of the social provider
     * @return {?}
     */
    function (social) {
        var /** @type {?} */ event = {};
        event = this.getEventResponse();
        event.social = social;
        this.loginSocial.emit(event);
    };
    /**
     * Emit a click event on the sign up button.
     * @return {?}
     */
    LoginFormComponent.prototype.onClickSignUp = /**
     * Emit a click event on the sign up button.
     * @return {?}
     */
    function () {
        this.signUp.emit();
    };
    /**
     * Emit `$event` object containing username property.
     *
     * \@example
     * var username : string = $event.username;
     * @return {?}
     */
    LoginFormComponent.prototype.onClickForgotPassword = /**
     * Emit `$event` object containing username property.
     *
     * \@example
     * var username : string = $event.username;
     * @return {?}
     */
    function () {
        var /** @type {?} */ event = {};
        event = this.getEventResponse('usr');
        this.forgotPwd.emit(event);
    };
    /**
     * Show password form either to initialize first password or to reset forgot password.
     *
     * @param {?} isFirst Initialize first password or reset forgot password
     * @return {?}
     */
    LoginFormComponent.prototype.showPwdForm = /**
     * Show password form either to initialize first password or to reset forgot password.
     *
     * @param {?} isFirst Initialize first password or reset forgot password
     * @return {?}
     */
    function (isFirst) {
        this.isFirst = isFirst;
        this.formType = Forms.PWD;
        this.showLayout(this.formLayouts.pwd);
    };
    /**
     * Show MFA setup form to initialize first TOTP (Time-based One-time Password).
     *
     * @param {?} code
     * @param {?} qrCode
     * @return {?}
     */
    LoginFormComponent.prototype.showMfaSetupForm = /**
     * Show MFA setup form to initialize first TOTP (Time-based One-time Password).
     *
     * @param {?} code
     * @param {?} qrCode
     * @return {?}
     */
    function (code, qrCode) {
        this.code = code;
        this.qrCode = qrCode;
        this.formType = Forms.MFA_SETUP;
        this.showLayout(this.formLayouts.mfaSetup);
    };
    /**
     * Show MFA form to get verification code.
     * @return {?}
     */
    LoginFormComponent.prototype.showMfaForm = /**
     * Show MFA form to get verification code.
     * @return {?}
     */
    function () {
        this.formType = Forms.MFA;
        this.showLayout(this.formLayouts.mfa);
    };
    /**
     * Hide password form.
     * @return {?}
     */
    LoginFormComponent.prototype.hidePwdForm = /**
     * Hide password form.
     * @return {?}
     */
    function () {
        this.closeLayout(this.formLayouts.password);
    };
    /**
     * Hide MFA setup form.
     * @return {?}
     */
    LoginFormComponent.prototype.hideMfaSetupForm = /**
     * Hide MFA setup form.
     * @return {?}
     */
    function () {
        this.closeLayout(this.formLayouts.mfaSetup);
    };
    /**
     * Hide MFA form.
     * @return {?}
     */
    LoginFormComponent.prototype.hideMfaForm = /**
     * Hide MFA form.
     * @return {?}
     */
    function () {
        this.closeLayout(this.formLayouts.mfa);
    };
    /**
     * Go password step.
     * @param {?=} userInfo
     * @param {?=} userImage
     * @return {?}
     */
    LoginFormComponent.prototype.showPwdStep = /**
     * Go password step.
     * @param {?=} userInfo
     * @param {?=} userImage
     * @return {?}
     */
    function (userInfo, userImage) {
        if (userInfo === void 0) { userInfo = null; }
        if (userImage === void 0) { userImage = null; }
        this.userInfo = userInfo;
        this.userImage = userImage;
        this.selectedTab = 2;
    };
    /**
     * @param {?} currentStep
     * @return {?}
     */
    LoginFormComponent.prototype.onClickNextStep = /**
     * @param {?} currentStep
     * @return {?}
     */
    function (currentStep) {
        switch (currentStep) {
            case 0:
                this.selectedTab = 1;
                break;
            case 1:
                // Username
                var /** @type {?} */ eventUsr = null;
                eventUsr = this.getEventResponse('usr');
                this.stepUsr.emit(eventUsr);
                break;
            case 2:
                // Password
                var /** @type {?} */ eventPwd = null;
                eventPwd = this.getEventResponse();
                this.stepPwd.emit(eventPwd);
                break;
            default:
                break;
        }
    };
    /**
     * @param {?} currentStep
     * @return {?}
     */
    LoginFormComponent.prototype.onClickPrevStep = /**
     * @param {?} currentStep
     * @return {?}
     */
    function (currentStep) {
        switch (currentStep) {
            case 0:
                break;
            case 1:
                // Username
                this.selectedTab = 0;
                break;
            case 2:
                // Password
                this.selectedTab = 1;
                break;
            default:
                break;
        }
    };
    /**
     * Emit `$event` object containing password property.
     *
     * \@example
     * var newPassword : string = $event.password;
     * @param {?} $event
     * @return {?}
     */
    LoginFormComponent.prototype.tabFirstLog = /**
     * Emit `$event` object containing password property.
     *
     * \@example
     * var newPassword : string = $event.password;
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.sendFirstPwd.emit($event);
    };
    /**
     * Emit `$event` object containing password and code properties.
     *
     * \@example
     * var newPassword      : string = $event.password;
     * var verificationCode : string = $event.code;
     * @param {?} $event
     * @return {?}
     */
    LoginFormComponent.prototype.tabLostPwd = /**
     * Emit `$event` object containing password and code properties.
     *
     * \@example
     * var newPassword      : string = $event.password;
     * var verificationCode : string = $event.code;
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.sendResetPwd.emit($event);
    };
    /**
     * Emit `$event` object containing code property.
     *
     * \@example
     * var verificationCode : string = $event.code;
     * @param {?} $event
     * @return {?}
     */
    LoginFormComponent.prototype.tabSaveMfaKey = /**
     * Emit `$event` object containing code property.
     *
     * \@example
     * var verificationCode : string = $event.code;
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.saveMfaKey.emit($event);
    };
    /**
     * Emit `$event` object containing code property.
     *
     * \@example
     * var verificationCode : string = $event.code;
     * @param {?} $event
     * @return {?}
     */
    LoginFormComponent.prototype.tabSendMfaCode = /**
     * Emit `$event` object containing code property.
     *
     * \@example
     * var verificationCode : string = $event.code;
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.sendMfaCode.emit($event);
    };
    /**
     * Emit `$event` object containing password property.
     *
     * \@example
     * var newPassword : string = $event.password;
     * @param {?} dialogRef
     * @return {?}
     */
    LoginFormComponent.prototype.modalFirstLog = /**
     * Emit `$event` object containing password property.
     *
     * \@example
     * var newPassword : string = $event.password;
     * @param {?} dialogRef
     * @return {?}
     */
    function (dialogRef) {
        var _this = this;
        this.modalFirstSub = dialogRef.componentInstance.relayFirstLog.subscribe(function (event) {
            _this.sendFirstPwd.emit(event);
        });
    };
    /**
     * Emit `$event` object containing password and code properties.
     *
     * \@example
     * var newPassword      : string = $event.password;
     * var verificationCode : string = $event.code;
     * @param {?} dialogRef
     * @return {?}
     */
    LoginFormComponent.prototype.modalLostPwd = /**
     * Emit `$event` object containing password and code properties.
     *
     * \@example
     * var newPassword      : string = $event.password;
     * var verificationCode : string = $event.code;
     * @param {?} dialogRef
     * @return {?}
     */
    function (dialogRef) {
        var _this = this;
        this.modalLostSub = dialogRef.componentInstance.relayLostPwd.subscribe(function (event) {
            _this.sendResetPwd.emit(event);
        });
    };
    /**
     * Emit `$event` object containing code property.
     *
     * \@example
     * var verificationCode : string = $event.code;
     * @param {?} dialogRef
     * @return {?}
     */
    LoginFormComponent.prototype.modalSaveMfaKey = /**
     * Emit `$event` object containing code property.
     *
     * \@example
     * var verificationCode : string = $event.code;
     * @param {?} dialogRef
     * @return {?}
     */
    function (dialogRef) {
        var _this = this;
        this.modalSaveMfaKeySub = dialogRef.componentInstance.relaySaveMfaKey.subscribe(function (event) {
            _this.saveMfaKey.emit(event);
        });
    };
    /**
     * Emit `$event` object containing code property.
     *
     * \@example
     * var verificationCode : string = $event.code;
     * @param {?} dialogRef
     * @return {?}
     */
    LoginFormComponent.prototype.modalSendMfaCode = /**
     * Emit `$event` object containing code property.
     *
     * \@example
     * var verificationCode : string = $event.code;
     * @param {?} dialogRef
     * @return {?}
     */
    function (dialogRef) {
        var _this = this;
        this.modalSendMfaCodeSub = dialogRef.componentInstance.relaySendMfaCode.subscribe(function (event) {
            _this.sendMfaCode.emit(event);
        });
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    LoginFormComponent.prototype.onClickCloseTab = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.closeTab();
    };
    /**
     * @return {?}
     */
    LoginFormComponent.prototype.openModal = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var /** @type {?} */ params = {
            // Common
            formType: this.formType,
            labels: this.labels,
            closeEvent: this.closeModalEvent,
            errors: this.errors,
            inputs: this.inputs,
            // Password form
            isFirst: this.isFirst,
            pwdPolicies: this.pwdPolicies,
            // Mfa form
            code: this.code,
            qrCode: this.qrCode
        };
        var /** @type {?} */ dialogRef = this.dialog.open(ModalWrapperComponent, { data: params });
        if (this.formType === Forms.PWD) {
            this.modalFirstLog(dialogRef);
            this.modalLostPwd(dialogRef);
        }
        if (this.formType === Forms.MFA_SETUP)
            this.modalSaveMfaKey(dialogRef);
        if (this.formType === Forms.MFA)
            this.modalSendMfaCode(dialogRef);
        dialogRef.afterClosed().subscribe(function (result) {
            _this.formType = null;
            if (result)
                _this.formGroup.controls["password"].setValue(result); // Set password
        });
    };
    /**
     * @param {?} formLayout
     * @return {?}
     */
    LoginFormComponent.prototype.showLayout = /**
     * @param {?} formLayout
     * @return {?}
     */
    function (formLayout) {
        switch (formLayout) {
            case Layouts.TAB:
                this.openTab();
                break;
            case Layouts.MODAL:
                this.openModal();
                break;
            case Layouts.INLINE:
                this.formGroup.controls["username"].disable();
                this.formGroup.controls["password"].disable();
                break;
            default:
                this.openTab();
                break;
        }
    };
    /**
     * @param {?} formLayout
     * @return {?}
     */
    LoginFormComponent.prototype.closeLayout = /**
     * @param {?} formLayout
     * @return {?}
     */
    function (formLayout) {
        this.formType = null;
        switch (formLayout) {
            case Layouts.TAB:
                this.closeTab();
                break;
            case Layouts.MODAL:
                this.closeModal();
                break;
            case Layouts.INLINE:
                this.formGroup.controls["username"].enable();
                this.formGroup.controls["password"].enable();
                break;
            default:
                this.closeTab();
                break;
        }
    };
    /**
     * @return {?}
     */
    LoginFormComponent.prototype.closeModal = /**
     * @return {?}
     */
    function () {
        this.closeModalEvent.emit();
    };
    /**
     * @return {?}
     */
    LoginFormComponent.prototype.openTab = /**
     * @return {?}
     */
    function () {
        if (this.googleStyle)
            this.selectedTab = 3;
        else
            this.selectedTab = 1;
    };
    /**
     * @return {?}
     */
    LoginFormComponent.prototype.closeTab = /**
     * @return {?}
     */
    function () {
        this.selectedTab = 0;
    };
    /**
     * @param {?=} onlyOne
     * @return {?}
     */
    LoginFormComponent.prototype.getEventResponse = /**
     * @param {?=} onlyOne
     * @return {?}
     */
    function (onlyOne) {
        if (onlyOne === void 0) { onlyOne = null; }
        var /** @type {?} */ event = {};
        var /** @type {?} */ username = null;
        var /** @type {?} */ password = null;
        if (this.googleStyle) {
            username = this.usrFormGroup.controls["username"].value;
            password = this.pwdFormGroup.controls["password"].value;
        }
        else {
            username = this.formGroup.controls["username"].value;
            password = this.formGroup.controls["password"].value;
        }
        if (!onlyOne) {
            event.username = username;
            event.password = password;
        }
        if (onlyOne && onlyOne === 'usr')
            event.username = username;
        if (onlyOne && onlyOne === 'pwd')
            event.password = password;
        return event;
    };
    /**
     * @return {?}
     */
    LoginFormComponent.prototype.initFormLayouts = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ defaultFormLayouts = null;
        var /** @type {?} */ formLayouts = null;
        // Form layouts
        defaultFormLayouts = {
            pwd: Layouts.TAB,
            mfaSetup: Layouts.TAB,
            mfa: Layouts.TAB,
        };
        formLayouts = Object.assign(defaultFormLayouts, this.customFormLayouts);
        // Corrections
        if (formLayouts.pwd === Layouts.INLINE)
            formLayouts.pwd = Layouts.TAB;
        if (formLayouts.mfaSetup === Layouts.INLINE)
            formLayouts.mfaSetup = Layouts.TAB;
        if (this.googleStyle && formLayouts.mfa === Layouts.INLINE)
            formLayouts.mfa = Layouts.TAB;
        this.formLayouts = formLayouts;
    };
    /**
     * @return {?}
     */
    LoginFormComponent.prototype.initTheme = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ theme = null;
        // Theme
        switch (this.googleTheme) {
            case Themes.LIGHT:
                theme = this.googleTheme;
                break;
            case Themes.DARK:
                theme = this.googleTheme;
                break;
            default:
                theme = Themes.LIGHT;
                break;
        }
        this.theme = theme;
    };
    /**
     * @return {?}
     */
    LoginFormComponent.prototype.initIcons = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ defaultIcons = null;
        var /** @type {?} */ icons = null;
        // Icons
        defaultIcons = {
            iconUsrOnLoginForm: true,
            iconPwdOnLoginForm: true,
        };
        icons = Object.assign(defaultIcons, this.customIcons);
        this.icons = icons;
    };
    /**
     * @return {?}
     */
    LoginFormComponent.prototype.initButtons = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ defaultButons = null;
        var /** @type {?} */ buttons = null;
        // Buttons
        defaultButons = {
            forgotPassword: true,
            signUp: true,
            google: true,
            facebook: true
        };
        buttons = Object.assign(defaultButons, this.customButtons);
        this.buttons = buttons;
    };
    /**
     * @return {?}
     */
    LoginFormComponent.prototype.initInputs = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ defaultInputs = null;
        var /** @type {?} */ inputs = null;
        // Inputs
        defaultInputs = {
            clearUsrOnLoginForm: true,
            showPwdOnLoginForm: true,
            showPwdOnPwdForm: true,
            clearCodeOnPwdForm: true,
            clearCodeOnMfaForm: true
        };
        inputs = Object.assign(defaultInputs, this.customInputs);
        this.inputs = inputs;
    };
    /**
     * @return {?}
     */
    LoginFormComponent.prototype.initErrors = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ defaultErrors = null;
        var /** @type {?} */ errors = null;
        // Errors
        defaultErrors = {
            login: true,
            pwd: true,
            mfa: true
        };
        errors = Object.assign(defaultErrors, this.customErrors);
        this.errors = errors;
    };
    /**
     * @return {?}
     */
    LoginFormComponent.prototype.initPolicies = /**
     * @return {?}
     */
    function () {
        // NOTE: Password
        var /** @type {?} */ defaultPwdPolicies = null;
        var /** @type {?} */ pwdPolicies = null;
        var /** @type {?} */ defaultMin = 8;
        var /** @type {?} */ defaultMax = 128;
        // Password policies
        defaultPwdPolicies = {
            range: {
                min: defaultMin,
                max: defaultMax,
            },
            char: true,
            number: true,
            lower: true,
            upper: true
        };
        pwdPolicies = Object.assign(defaultPwdPolicies, this.customPwdPolicies);
        if (pwdPolicies.range.min > pwdPolicies.range.max) {
            pwdPolicies.range.min = defaultMin;
            pwdPolicies.range.max = defaultMax;
        }
        this.pwdPolicies = pwdPolicies;
        // NOTE: Username
        if (!this.customUsrPolicy)
            return;
        var /** @type {?} */ validators = [];
        switch (this.customUsrPolicy) {
            case UserPolicies.EMAIL:
                validators.push(UsrValidator.email);
                break;
            case UserPolicies.PHONE:
                validators.push(UsrValidator.phone);
                break;
            default:
                var /** @type {?} */ regExp = null;
                regExp = new RegExp(this.customUsrPolicy);
                validators.push(UsrValidator.custom(regExp));
                break;
        }
        validators.push(Validators.required);
        if (this.googleStyle)
            this.usrFormGroup.controls["username"].setValidators(validators);
        else
            this.formGroup.controls["username"].setValidators(validators);
    };
    /**
     * @return {?}
     */
    LoginFormComponent.prototype.initLabels = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ defaultLabels = {};
        var /** @type {?} */ labels = {};
        defaultLabels.header = {
            titlePwd: 'Lost password',
            subtitlePwd: 'Please enter the confirmation code',
            titlePwdSetup: 'Password setup',
            subtitlePwdSetup: 'Please enter a new password',
            titleMfa: 'MFA',
            subtitleMfa: 'Please enter the confirmation code',
            titleMfaSetup: 'MFA setup',
            subtitleMfaSetup: 'Save this secret key for future connection'
        };
        defaultLabels.input = {
            username: 'Username',
            password: 'Password',
            verifCode: 'Verification code',
            newPassword: 'New password'
        };
        defaultLabels.button = {
            signIn: 'Sign in',
            signUp: 'Sign up',
            next: 'Next',
            back: 'Back',
            send: 'Send',
            save: 'Save',
            forgotPassword: 'Forgot password',
            googleSignIn: 'Sign in with Google',
            facebookSignIn: 'Sign in with Facebook'
        };
        defaultLabels.policy = {
            required: 'This field is required',
            nonWhitespace: 'This value must not contain any spaces',
            email: 'This value must be an email',
            phone: 'This value must be a phone number',
            sixDigits: 'This value must contains six digits',
            customRegex: 'This value must match the custom regex provided',
            pwdLength: 'Minimum password length ({{min}} to {{max}})',
            pwdUppercase: 'Require at least one uppercase letter (A to Z)',
            pwdLowercase: 'Require at least one lowercase letter (a to z)',
            pwdNumber: 'Require at least one number (0 to 9)',
            pwdSpecial: 'Require at least one nonalphanumeric character ! @ # $ % ^ & * ( ) _ + - = [ ] { } | \''
        };
        labels = Object.assign(defaultLabels, this.customLabels);
        this.labels = labels;
    };
    /**
     * @return {?}
     */
    LoginFormComponent.prototype.initFormGroups = /**
     * @return {?}
     */
    function () {
        if (!this.googleStyle) {
            this.formGroup = this.builder.group({
                username: new FormControl({
                    value: null,
                    disabled: false
                }, [Validators.required]),
                password: new FormControl({
                    value: null,
                    disabled: false
                }, [Validators.required]),
            });
            return;
        }
        this.usrFormGroup = this.builder.group({
            username: new FormControl({
                value: null,
                disabled: false
            }, [Validators.required])
        });
        this.pwdFormGroup = this.builder.group({
            password: new FormControl({
                value: null,
                disabled: false
            }, [Validators.required])
        });
    };
    LoginFormComponent.decorators = [
        { type: Component, args: [{
                    selector: 'cal-login-form',
                    template: "<div class=\"{{ fixedWidth ? 'login-wrapper' : '' }}\" id=\"debug-login-form\">\n  <mat-tab-group id=\"caliatys-login-form\" [selectedIndex]=\"selectedTab\">\n    <mat-tab label=\"login-form\">\n      <!-- NOTE: Login form -->\n      <form (ngSubmit)=\"onClickLogin()\" [formGroup]=\"formGroup\" *ngIf=\"!googleStyle\">\n        <div class=\"row no-gutters\">\n          <div class=\"col\">\n            <div class=\"row no-gutters\">\n              <div class=\"col\">\n                <!-- NOTE: Username -->\n                <mat-form-field class=\"w-100\">\n                  <div matPrefix class=\"mr-2\" *ngIf=\"icons.iconUsrOnLoginForm\">\n                    <mat-icon class=\"align-bottom\">person</mat-icon>\n                  </div>\n                  <input matInput formControlName=\"username\" \n                    name=\"username\" autocomplete=\"username\" \n                    placeholder=\"{{ labels.input.username }}\" \n                    type=\"text\"/>\n                  <button *ngIf=\"formGroup.controls.username.value?.length > 0 && inputs.clearUsrOnLoginForm\" \n                    mat-button matSuffix mat-icon-button aria-label=\"Clear\" \n                    color=\"primary\" (click)=\"formGroup.controls.username.setValue('')\" \n                    [disabled]=\"formType === forms.MFA && formLayouts.mfa === layouts.INLINE ? true : false\" \n                    type=\"button\">\n                    <mat-icon>close</mat-icon>\n                  </button>\n                  <!-- NOTE: Error message(s) -->\n                  <mat-hint align=\"start\" *ngIf=\"formGroup.controls.username.errors?.required && errors.login\">\n                    {{ labels.policy.required }}\n                  </mat-hint>\n                  <mat-hint align=\"start\" *ngIf=\"formGroup.controls.username.errors?.pattern && errors.login && usrPolicy === userPolicies.EMAIL\">\n                    {{ labels.policy.email }}\n                  </mat-hint>\n                  <mat-hint align=\"start\" *ngIf=\"formGroup.controls.username.errors?.pattern && errors.login && usrPolicy === userPolicies.PHONE\">\n                    {{ labels.policy.phone }}\n                  </mat-hint>\n                  <mat-hint align=\"start\" *ngIf=\"formGroup.controls.username.errors?.pattern && errors.login && usrPolicy && usrPolicy !== userPolicies.EMAIL && usrPolicy !== userPolicies.PHONE\">\n                    {{ labels.policy.customRegex }}\n                  </mat-hint>\n                </mat-form-field>\n              </div>\n            </div>\n            <div class=\"row no-gutters\">\n              <div class=\"col\">\n                <!-- NOTE: Password -->\n                <mat-form-field class=\"w-100\">\n                  <div matPrefix class=\"mr-2\" *ngIf=\"icons.iconPwdOnLoginForm\">\n                    <mat-icon class=\"align-bottom\">lock</mat-icon>\n                  </div>\n                  <input matInput formControlName=\"password\" \n                    name=\"password\" autocomplete=\"password\" \n                    placeholder=\"{{ labels.input.password }}\" \n                    type=\"{{ showPassword ? 'text' : 'password' }}\"/>\n                  <button *ngIf=\"inputs.showPwdOnLoginForm\" \n                    mat-button matSuffix mat-icon-button aria-label=\"Clear\" \n                    color=\"primary\" (click)=\"showPassword=!showPassword\" \n                    [disabled]=\"formType === forms.MFA && formLayouts.mfa === layouts.INLINE ? true : false\" \n                    type=\"button\">\n                    <mat-icon>{{ showPassword ? 'visibility_off' : 'visibility' }}</mat-icon>\n                  </button>\n                  <!-- NOTE: Error message -->\n                  <mat-hint align=\"start\" *ngIf=\"formGroup.controls.password.errors?.required && errors.login\">\n                    {{ labels.policy.required }}\n                  </mat-hint>\n                </mat-form-field>\n              </div> \n            </div>\n            <!-- NOTE: Buttons -->\n            <ng-container *ngIf=\"!( formType === forms.MFA && formLayouts.mfa === layouts.INLINE )\">\n              <div class=\"row no-gutters pb-3\">\n                <div class=\"col text-left\">\n                  <!-- TODO: Remember me -->\n                </div>\n                <!-- NOTE: Forgot password -->\n                <div class=\"col text-right\" *ngIf=\"buttons.forgotPassword\">\n                  <a (click)=\"onClickForgotPassword()\" href=\"#\" class=\"small\">\n                    {{ labels.button.forgotPassword }}\n                  </a>\n                </div>\n              </div>\n              <div class=\"row no-gutters pb-3\">\n                <div class=\"col text-right\">\n                  <!-- NOTE: Sign up -->\n                  <button mat-button (click)=\"onClickSignUp()\" type=\"button\" color=\"primary\" class=\"small text-uppercase mr-3\" *ngIf=\"buttons.signUp\">\n                    {{ labels.button.signUp }}\n                  </button>\n                  <!-- NOTE: Sign in -->\n                  <button mat-raised-button type=\"submit\" color=\"primary\" [disabled]=\"!formGroup.valid\" class=\"small text-uppercase\">\n                    {{ labels.button.signIn }}\n                  </button>\n                </div>\n              </div>\n            </ng-container>\n          </div>\n        </div>\n      </form>\n      <!-- NOTE: Login by steps buttons -->\n      <div class=\"row no-gutters mb-3\" *ngIf=\"googleStyle\">\n        <div class=\"col text-right\" *ngIf=\"buttons.signUp\">\n          <!-- NOTE: Sign up -->\n          <button mat-button (click)=\"onClickSignUp()\" type=\"button\" color=\"primary\" class=\"small text-uppercase mr-2\">\n            {{ labels.button.signUp }}\n          </button>\n        </div>\n        <div class=\"col {{ buttons.signUp ? 'text-left' : 'text-center'}}\">\n          <!-- NOTE: Sign in -->\n          <button mat-raised-button (click)=\"onClickNextStep(0)\" type=\"button\" color=\"primary\" class=\"small text-uppercase ml-2\">\n            {{ labels.button.signIn }}\n          </button>\n        </div>\n      </div>\n      <!-- NOTE: Social buttons -->\n      <ng-container *ngIf=\"!( formType === forms.MFA && formLayouts.mfa === layouts.INLINE )\">\n        <div class=\"row no-gutters\">\n          <div class=\"col text-center\">\n            <!-- NOTE: Google -->\n            <div class=\"d-block mb-3\" *ngIf=\"buttons.google\">\n              <button mat-raised-button type=\"button\" class=\"mat-raised-button cal-btn google {{ theme }}\" (click)=\"onClickLoginSocial('google')\">\n                <span class=\"cal-bg-icon\">\n                  <mat-icon class=\"align-middle cal-icon\" svgIcon=\"google\"></mat-icon>\n                </span>\n                <span class=\"cal-label\">{{ labels.button.googleSignIn }}</span>\n              </button>\n            </div>\n            <!-- NOTE: Facebook -->\n            <div class=\"d-block mb-3\" *ngIf=\"buttons.facebook\">\n              <button mat-raised-button type=\"button\" class=\"cal-btn facebook\" (click)=\"onClickLoginSocial('facebook')\">\n                <span class=\"cal-bg-icon\">\n                  <mat-icon class=\"align-middle cal-icon\" svgIcon=\"facebook\"></mat-icon>\n                </span>\n                <span class=\"cal-label\">{{ labels.button.facebookSignIn }}</span>\n              </button>\n            </div>\n          </div>\n        </div>\n      </ng-container>\n      <!-- NOTE: Inline MFA -->\n      <ng-container *ngIf=\"formType === forms.MFA && formLayouts.mfa === layouts.INLINE\">\n        <div class=\"row no-gutters\">\n          <div class=\"col\">\n            <cal-mfa-form \n              [inputs]=\"inputs\" \n              [labels]=\"labels\" \n              [errors]=\"errors\" \n              (sendMfa)=\"tabSendMfaCode($event)\">\n            </cal-mfa-form>\n          </div>\n        </div>\n      </ng-container>\n    </mat-tab>\n    <mat-tab label=\"usr-step\" *ngIf=\"googleStyle\">\n      <!-- NOTE: Back button -->\n      <div class=\"row no-gutters mb-3\">\n        <div class=\"col\">\n          <a href=\"#\" (click)=\"onClickPrevStep(1)\" title=\"{{ labels.button.back }}\">\n            <mat-icon class=\"align-bottom mr-2\">keyboard_arrow_left</mat-icon>{{ labels.button.back }}\n          </a>\n        </div>\n      </div>\n      <form (ngSubmit)=\"onClickNextStep(1)\" [formGroup]=\"usrFormGroup\">\n        <!-- NOTE: Username -->\n        <mat-form-field class=\"w-100\">\n          <div matPrefix class=\"mr-2\" *ngIf=\"icons.iconUsrOnLoginForm\">\n            <mat-icon class=\"align-bottom\">person</mat-icon>\n          </div>\n          <input matInput formControlName=\"username\" \n            name=\"username\" autocomplete=\"username\" \n            placeholder=\"{{ labels.input.username }}\" \n            type=\"text\"/>\n          <button *ngIf=\"usrFormGroup.controls.username.value?.length > 0 && inputs.clearUsrOnLoginForm\" \n            mat-button matSuffix mat-icon-button aria-label=\"Clear\" \n            color=\"primary\" (click)=\"usrFormGroup.controls.username.setValue('')\" \n            [disabled]=\"formType === forms.MFA && formLayouts.mfa === layouts.INLINE ? true : false\" \n            type=\"button\">\n            <mat-icon>close</mat-icon>\n          </button>\n          <!-- NOTE: Error message(s) -->\n          <mat-hint align=\"start\" *ngIf=\"usrFormGroup.controls.username.errors?.required && errors.login\">\n            {{ labels.policy.required }}\n          </mat-hint>\n          <mat-hint align=\"start\" *ngIf=\"usrFormGroup.controls.username.errors?.pattern && errors.login && usrPolicy === userPolicies.EMAIL\">\n            {{ labels.policy.email }}\n          </mat-hint>\n          <mat-hint align=\"start\" *ngIf=\"usrFormGroup.controls.username.errors?.pattern && errors.login && usrPolicy === userPolicies.PHONE\">\n            {{ labels.policy.phone }}\n          </mat-hint>\n          <mat-hint align=\"start\" *ngIf=\"usrFormGroup.controls.username.errors?.pattern && errors.login && usrPolicy && usrPolicy !== userPolicies.EMAIL && usrPolicy !== userPolicies.PHONE\">\n            {{ labels.policy.customRegex }}\n          </mat-hint>\n        </mat-form-field>\n        <div class=\"row no-gutters mb-3\">\n          <!-- NOTE: Forgot password -->\n          <div class=\"col text-left\" *ngIf=\"buttons.forgotPassword\">\n            <a (click)=\"onClickForgotPassword()\" href=\"#\" class=\"small\">\n              {{ labels.button.forgotPassword }}\n            </a>\n          </div>\n          <!-- NOTE: Next button -->\n          <div class=\"col text-right\">\n            <button mat-raised-button type=\"submit\" color=\"primary\" [disabled]=\"!usrFormGroup.valid\" class=\"small text-uppercase\">\n              {{ labels.button.next }}\n            </button>\n          </div>\n        </div>\n      </form>\n    </mat-tab>\n    <mat-tab label=\"pwd-step\" *ngIf=\"googleStyle\">\n      <!-- NOTE: Back button -->\n      <div class=\"row no-gutters mb-3\">\n        <div class=\"col\">\n          <a href=\"#\" (click)=\"onClickPrevStep(2)\" title=\"{{ labels.button.back }}\">\n            <mat-icon class=\"align-bottom mr-2\">keyboard_arrow_left</mat-icon>{{ labels.button.back }}\n          </a>\n        </div>\n      </div>\n      <!-- TODO: User info -->\n      <p>{{ userInfo }}</p>\n      <form (ngSubmit)=\"onClickNextStep(2)\" [formGroup]=\"pwdFormGroup\">\n        <!-- NOTE: Password -->\n        <mat-form-field class=\"w-100\">\n          <div matPrefix class=\"mr-2\" *ngIf=\"icons.iconPwdOnLoginForm\">\n            <mat-icon class=\"align-bottom\">lock</mat-icon>\n          </div>\n          <input matInput formControlName=\"password\" \n            name=\"password\" autocomplete=\"password\" \n            placeholder=\"{{ labels.input.password }}\" \n            type=\"{{ showPassword ? 'text' : 'password' }}\"/>\n          <button *ngIf=\"inputs.showPwdOnLoginForm\" \n            mat-button matSuffix mat-icon-button aria-label=\"Clear\" \n            color=\"primary\" (click)=\"showPassword=!showPassword\" \n            [disabled]=\"formType === forms.MFA && formLayouts.mfa === layouts.INLINE ? true : false\" \n            type=\"button\">\n            <mat-icon>{{ showPassword ? 'visibility_off' : 'visibility' }}</mat-icon>\n          </button>\n          <!-- NOTE: Error message -->\n          <mat-hint align=\"start\" *ngIf=\"pwdFormGroup.controls.password.errors?.required && errors.login\">\n            {{ labels.policy.required }}\n          </mat-hint>\n        </mat-form-field>\n        <!-- NOTE: Next button -->\n        <div class=\"row no-gutters mb-3\">\n          <div class=\"col text-right\">\n            <button mat-raised-button type=\"submit\" color=\"primary\" [disabled]=\"!pwdFormGroup.valid\" class=\"small text-uppercase\">\n              {{ labels.button.next }}\n            </button>\n          </div>\n        </div>\n      </form>\n    </mat-tab>\n    <mat-tab label=\"tab-wrapper\" *ngIf=\"(formLayouts | existsLayout: layouts.TAB)\">\n      <!-- NOTE: Tab form -->\n      <cal-tab-wrapper \n        [formType]=\"formType\" \n        [isFirst]=\"isFirst\" \n        [code]   =\"code\" \n        [qrCode] =\"qrCode\" \n        [pwdPolicies]=\"pwdPolicies\" \n        [errors]=\"errors\" \n        [labels]=\"labels\" \n        [inputs]=\"inputs\" \n        (sendCloseTab)=\"onClickCloseTab($event)\" \n        (relayFirstLog)=\"tabFirstLog($event)\" \n        (relayLostPwd)=\"tabLostPwd($event)\" \n        (relaySaveMfaKey)=\"tabSaveMfaKey($event)\" \n        (relaySendMfaCode)=\"tabSendMfaCode($event)\">\n      </cal-tab-wrapper>\n    </mat-tab>\n  </mat-tab-group>\n</div>",
                    styles: ["/deep/ #caliatys-login-form mat-tab-header{display:none!important}mat-form-field mat-icon{color:grey}.login-wrapper{width:100%;max-width:330px;padding:15px;margin:0 auto}.cal-btn{line-height:35px;border:0!important;padding:1px!important}.cal-btn .cal-bg-icon{padding:8px;width:34px;height:34px;display:inline-block;vertical-align:top!important}.cal-btn .cal-bg-icon .cal-icon{display:inline-block;height:18px;width:18px;margin-top:-4px;vertical-align:top!important}.cal-btn .cal-label{padding-right:8px;padding-left:16px;size:14px;font-family:Roboto,sans-serif}.adn{background-color:#d87a68!important;color:#fff!important}.adn i{color:#fff!important}.adn:hover{background-color:#e29e91!important}.bitbucket{background-color:#205081!important;color:#fff!important}.bitbucket i{color:#fff!important}.bitbucket:hover{background-color:#2a69aa!important}.dropbox{background-color:#1087dd!important;color:#fff!important}.dropbox i{color:#fff!important}.dropbox:hover{background-color:#309ff0!important}.facebook{background-color:#3b5998!important;color:#fff!important}.facebook i{color:#fff!important}.facebook:hover{background-color:#4c70ba!important}.flickr{background-color:#ff0084!important;color:#fff!important}.flickr i{color:#fff!important}.flickr:hover{background-color:#ff339d!important}.foursquare{background-color:#f94877!important;color:#fff!important}.foursquare i{color:#fff!important}.foursquare:hover{background-color:#fb799c!important}.github{background-color:#444!important;color:#fff!important}.github i{color:#fff!important}.github:hover{background-color:#5e5e5e!important}.instagram{background-color:#405de6!important;color:#fff!important}.instagram i{color:#fff!important}.instagram:hover{background-color:#6d83ec!important}.linkedin{background-color:#007bb6!important;color:#fff!important}.linkedin i{color:#fff!important}.linkedin:hover{background-color:#009de9!important}.microsoft{background-color:#2672ec!important;color:#fff!important}.microsoft i{color:#fff!important}.microsoft:hover{background-color:#5590f0!important}.windows{background-color:#2672ec!important;color:#fff!important}.windows i{color:#fff!important}.windows:hover{background-color:#5590f0!important}.odnoklassniki{background-color:#f4731c!important;color:#fff!important}.odnoklassniki i{color:#fff!important}.odnoklassniki:hover{background-color:#f6914d!important}.openid{background-color:#f7931e!important;color:#fff!important}.openid i{color:#fff!important}.openid:hover{background-color:#f9ab4f!important}.pinterest{background-color:#cb2027!important;color:#fff!important}.pinterest i{color:#fff!important}.pinterest:hover{background-color:#e03e44!important}.reddit{background-color:#eff7ff!important;color:#000!important}.reddit i{color:#000!important}.reddit:hover{background-color:#fff!important}.soundcloud{background-color:#f50!important;color:#fff!important}.soundcloud i{color:#fff!important}.soundcloud:hover{background-color:#f73!important}.tumblr{background-color:#2c4762!important;color:#fff!important}.tumblr i{color:#fff!important}.tumblr:hover{background-color:#3c6185!important}.twitter{background-color:#55acee!important;color:#fff!important}.twitter i{color:#fff!important}.twitter:hover{background-color:#83c3f3!important}.vimeo{background-color:#1ab7ea!important;color:#fff!important}.vimeo i{color:#fff!important}.vimeo:hover{background-color:#49c6ee!important}.vk{background-color:#587ea3!important;color:#fff!important}.vk i{color:#fff!important}.vk:hover{background-color:#7897b6!important}.yahoo{background-color:#720e9e!important;color:#fff!important}.yahoo i{color:#fff!important}.yahoo:hover{background-color:#9412cd!important}.google.light{background-color:#fff!important;color:#5f6368!important}.google.light i{color:#5f6368!important}.google.light:hover{background-color:#fff!important}.google.dark{background-color:#4285f4!important;color:#fff!important}.google.dark i{color:#fff!important}.google.dark:hover{background-color:#72a4f7!important}.google.dark .cal-bg-icon{background:#fff}"]
                },] },
    ];
    /** @nocollapse */
    LoginFormComponent.ctorParameters = function () { return [
        { type: MatDialog, },
        { type: DomSanitizer, },
        { type: MatIconRegistry, },
        { type: FormBuilder, },
    ]; };
    LoginFormComponent.propDecorators = {
        "fixedWidth": [{ type: Input },],
        "googleStyle": [{ type: Input },],
        "googleTheme": [{ type: Input },],
        "customFormLayouts": [{ type: Input },],
        "customUsrPolicy": [{ type: Input },],
        "customPwdPolicies": [{ type: Input },],
        "customIcons": [{ type: Input },],
        "customButtons": [{ type: Input },],
        "customInputs": [{ type: Input },],
        "customErrors": [{ type: Input },],
        "customLabels": [{ type: Input },],
        "initialized": [{ type: Output },],
        "signUp": [{ type: Output },],
        "login": [{ type: Output },],
        "loginSocial": [{ type: Output },],
        "forgotPwd": [{ type: Output },],
        "sendResetPwd": [{ type: Output },],
        "sendFirstPwd": [{ type: Output },],
        "saveMfaKey": [{ type: Output },],
        "sendMfaCode": [{ type: Output },],
        "stepUsr": [{ type: Output },],
        "stepPwd": [{ type: Output },],
    };
    return LoginFormComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var TabWrapperComponent = /** @class */ (function () {
    function TabWrapperComponent() {
        this.forms = Forms;
        // Event sent from tab
        this.sendCloseTab = new EventEmitter();
        // Event sent from password form
        this.relayFirstLog = new EventEmitter();
        this.relayLostPwd = new EventEmitter();
        // Event sent from mfa setup form
        this.relaySaveMfaKey = new EventEmitter();
        // NOTE: MFA
        // Event sent from mfa form
        this.relaySendMfaCode = new EventEmitter();
    }
    /**
     * @return {?}
     */
    TabWrapperComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    TabWrapperComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    TabWrapperComponent.prototype.backToLogin = /**
     * @return {?}
     */
    function () {
        this.sendCloseTab.emit();
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    TabWrapperComponent.prototype.relayFirstLogEvent = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.relayFirstLog.emit($event);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    TabWrapperComponent.prototype.relayLostPwdEvent = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.relayLostPwd.emit($event);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    TabWrapperComponent.prototype.relaySaveMfaKeyEvent = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.relaySaveMfaKey.emit($event);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    TabWrapperComponent.prototype.relaySendMfaCodeEvent = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.relaySendMfaCode.emit($event);
    };
    TabWrapperComponent.decorators = [
        { type: Component, args: [{
                    selector: 'cal-tab-wrapper',
                    template: "<div class=\"header py-2 px-4 mb-3\">\n  <div class=\"row align-items-center\">\n    <div class=\"col-2 px-0 text-left\">\n      <button mat-icon-button (click)=\"backToLogin()\">\n        <mat-icon>arrow_back</mat-icon>\n      </button>\n    </div>\n    <div class=\"col text-right\">\n      <div *ngIf=\"!isFirst && formType === forms.PWD\">\n        <span class=\"h5 font-weight-light {{ labels.header.subtitlePwd ? 'd-block mb-0' : '' }}\">\n          {{ labels.header.titlePwd }}\n        </span>\n        <span *ngIf=\"labels.header.subtitlePwd\" class=\"d-block font-weight-light small\">\n          {{ labels.header.subtitlePwd }}\n        </span>\n      </div>\n      <div *ngIf=\"isFirst && formType === forms.PWD\">\n        <span class=\"h5 font-weight-light {{ labels.header.subtitlePwdSetup ? 'd-block mb-0' : '' }}\">\n          {{ labels.header.titlePwdSetup }}\n        </span>\n        <span *ngIf=\"labels.header.subtitlePwdSetup\" class=\"d-block font-weight-light small\">\n          {{ labels.header.subtitlePwdSetup }}\n        </span>\n      </div>\n      <div *ngIf=\"formType === forms.MFA\">\n        <span class=\"h5 font-weight-light {{ labels.header.subtitleMfa ? 'd-block mb-0' : '' }}\">\n          {{ labels.header.titleMfa }}\n        </span>\n        <span *ngIf=\"labels.header.subtitleMfa\" class=\"d-block font-weight-light small\">\n          {{ labels.header.subtitleMfa }}\n        </span>\n      </div>\n      <div *ngIf=\"formType === forms.MFA_SETUP\">\n        <span class=\"h5 font-weight-light {{ labels.header.subtitleMfaSetup ? 'd-block mb-0' : '' }}\">\n          {{ labels.header.titleMfaSetup }}\n        </span>\n        <span *ngIf=\"labels.header.subtitleMfaSetup\" class=\"d-block font-weight-light small\">\n          {{ labels.header.subtitleMfaSetup }}\n        </span>\n      </div>\n    </div>\n  </div>\n</div>\n<!-- NOTE: Pwd Form -->\n<cal-pwd-form *ngIf=\"formType === forms.PWD\" \n  [isFirst]=\"isFirst\" \n  [pwdPolicies]=\"pwdPolicies\" \n  [labels]=\"labels\" \n  [inputs]=\"inputs\" \n  [errors]=\"errors\" \n  (firstConnection)=\"relayFirstLogEvent($event)\" \n  (lostPassword)=\"relayLostPwdEvent($event)\">\n</cal-pwd-form>\n<!-- NOTE: MFA Setup Form -->\n<cal-mfa-setup-form *ngIf=\"formType === forms.MFA_SETUP\" \n  [qrCode]=\"qrCode\" \n  [code]  =\"code\" \n  [labels]=\"labels\" \n  [inputs]=\"inputs\" \n  [errors]=\"errors\" \n  (saveMfa)=\"relaySaveMfaKeyEvent($event)\">\n</cal-mfa-setup-form>\n<!-- NOTE: MFA Form -->\n<cal-mfa-form *ngIf=\"formType === forms.MFA\" \n  [labels]=\"labels\" \n  [inputs]=\"inputs\" \n  [errors]=\"errors\" \n  (sendMfa)=\"relaySendMfaCodeEvent($event)\">\n</cal-mfa-form>",
                    styles: [".header{color:#fff;background:#5eacff}"]
                },] },
    ];
    /** @nocollapse */
    TabWrapperComponent.ctorParameters = function () { return []; };
    TabWrapperComponent.propDecorators = {
        "formType": [{ type: Input },],
        "labels": [{ type: Input },],
        "errors": [{ type: Input },],
        "inputs": [{ type: Input },],
        "sendCloseTab": [{ type: Output },],
        "isFirst": [{ type: Input },],
        "pwdPolicies": [{ type: Input },],
        "relayFirstLog": [{ type: Output },],
        "relayLostPwd": [{ type: Output },],
        "code": [{ type: Input },],
        "qrCode": [{ type: Input },],
        "relaySaveMfaKey": [{ type: Output },],
        "relaySendMfaCode": [{ type: Output },],
    };
    return TabWrapperComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var PwdValidator = /** @class */ (function () {
    function PwdValidator() {
    }
    /**
     * @param {?} min
     * @param {?} max
     * @return {?}
     */
    PwdValidator.longEnough = /**
     * @param {?} min
     * @param {?} max
     * @return {?}
     */
    function (min, max) {
        var /** @type {?} */ func = function (control) {
            var /** @type {?} */ isLongEnough = control.value !== null && control.value.length >= min && control.value.length <= max;
            if (!isLongEnough)
                return { longEnough: true };
            return null;
        };
        return func;
    };
    /**
     * @param {?} control
     * @return {?}
     */
    PwdValidator.number = /**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        var /** @type {?} */ hasNumber = control.value !== null && /\d/.test(control.value);
        if (!hasNumber)
            return { number: true };
        return null;
    };
    /**
     * @param {?} control
     * @return {?}
     */
    PwdValidator.upper = /**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        var /** @type {?} */ hasUpper = control.value !== null && /[A-Z]/.test(control.value);
        if (!hasUpper)
            return { upper: true };
        return null;
    };
    /**
     * @param {?} control
     * @return {?}
     */
    PwdValidator.lower = /**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        var /** @type {?} */ hasLower = control.value !== null && /[a-z]/.test(control.value);
        if (!hasLower)
            return { lower: true };
        return null;
    };
    /**
     * @param {?} control
     * @return {?}
     */
    PwdValidator.char = /**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        var /** @type {?} */ hasChar = control.value !== null && /[!@#$%^&\*()_+\-=\[\]{}|']/.test(control.value);
        if (!hasChar)
            return { char: true };
        return null;
    };
    return PwdValidator;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var PwdFormComponent = /** @class */ (function () {
    function PwdFormComponent(builder) {
        this.builder = builder;
        this.showPassword = false;
        // Event sent to the login form and relayed parents (modal & tab)
        this.firstConnection = new EventEmitter();
        this.lostPassword = new EventEmitter();
    }
    /**
     * @return {?}
     */
    PwdFormComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.initFormGroups();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    PwdFormComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes["pwdPolicies"])
            this.initFormGroups(true);
    };
    /**
     * @return {?}
     */
    PwdFormComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    PwdFormComponent.prototype.send = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ event = {};
        var /** @type {?} */ verifCode = null;
        var /** @type {?} */ newPassword = null;
        verifCode = this.formGroup.controls["verifCode"].value;
        newPassword = this.formGroup.controls["newPassword"].value;
        event.password = newPassword;
        // First connection
        if (this.isFirst) {
            this.firstConnection.emit(event);
            return;
        }
        event.code = verifCode;
        // Lost password
        this.lostPassword.emit(event);
    };
    /**
     * @param {?=} refresh
     * @return {?}
     */
    PwdFormComponent.prototype.initFormGroups = /**
     * @param {?=} refresh
     * @return {?}
     */
    function (refresh) {
        if (refresh === void 0) { refresh = false; }
        var /** @type {?} */ verifCode = null;
        var /** @type {?} */ newPassword = null;
        if (refresh && this.formGroup) {
            verifCode = this.formGroup.controls["verifCode"].value;
            newPassword = this.formGroup.controls["newPassword"].value;
        }
        var /** @type {?} */ validators = [];
        if (this.pwdPolicies.char)
            validators.push(PwdValidator.char);
        if (this.pwdPolicies.number)
            validators.push(PwdValidator.number);
        if (this.pwdPolicies.upper)
            validators.push(PwdValidator.upper);
        if (this.pwdPolicies.lower)
            validators.push(PwdValidator.lower);
        validators.push(Validators.required);
        validators.push(PwdValidator.longEnough(this.pwdPolicies.range.min, this.pwdPolicies.range.max));
        // Refresh min max label
        var /** @type {?} */ rangeLabel = null;
        rangeLabel = this.labels.policy.pwdLength;
        rangeLabel = rangeLabel.replace(/{{min}}/, this.pwdPolicies.range.min);
        rangeLabel = rangeLabel.replace(/{{max}}/, this.pwdPolicies.range.max);
        this.labels.policy.pwdLengthReplaced = rangeLabel;
        this.formGroup = this.builder.group({
            verifCode: new FormControl({
                value: verifCode,
                disabled: false
            }),
            newPassword: new FormControl({
                value: newPassword,
                disabled: false
            }, validators),
        });
        if (!this.isFirst)
            this.formGroup.controls["verifCode"].setValidators([Validators.required]);
    };
    PwdFormComponent.decorators = [
        { type: Component, args: [{
                    selector: 'cal-pwd-form',
                    template: "<!-- NOTE: <form autocomplete=\"off\"> will turn off autocomplete for the form in most browsers\n     except for username/email/password fields -->\n<form (ngSubmit)=\"send()\" [formGroup]=\"formGroup\" autocomplete=\"off\">\n\n  <!-- NOTE: fake fields are a workaround for chrome/opera autofill getting the wrong fields -->\n  <input id=\"username\" style=\"display:none\" type=\"text\" name=\"fakeusernameremembered\">\n  <input id=\"password\" style=\"display:none\" type=\"password\" name=\"fakepasswordremembered\">\n\n  <div class=\"row w-100 no-gutters\" *ngIf=\"!isFirst\">\n    <div class=\"col\">\n      <mat-form-field class=\"w-100\">\n        <!-- NOTE: <input autocomplete=\"nope\"> turns off autocomplete on many other browsers that don't respect\n          the form's \"off\", but not for \"password\" inputs. -->\n        <input matInput formControlName=\"verifCode\" \n          name=\"verif-code\" autocomplete=\"nope\" \n          placeholder=\"{{ labels.input.verifCode }}\" \n          pattern=\"\\d{6}\" \n          type=\"text\"/> <!-- NOTE: Pattern matches any non-whitespace character -->\n        <button *ngIf=\"formGroup.controls.verifCode.valid && inputs.clearCodeOnPwdForm\" \n          mat-button matSuffix mat-icon-button aria-label=\"Clear\" \n          color=\"primary\" (click)=\"formGroup.controls.verifCode.setValue('')\" \n          type=\"button\">\n          <mat-icon>close</mat-icon>\n        </button>\n        <!-- NOTE: Error messages -->\n        <mat-hint align=\"start\" *ngIf=\"formGroup.controls.verifCode.errors?.required && errors.pwd\">\n          {{ labels.policy.required }}\n        </mat-hint>\n        <mat-hint align=\"start\" *ngIf=\"formGroup.controls.verifCode.errors?.pattern && errors.pwd\">\n          {{ labels.policy.sixDigits }}\n        </mat-hint>\n      </mat-form-field>\n    </div>\n  </div>\n  <!-- NOTE: <input type=\"password\" autocomplete=\"new-password\" will turn it off for passwords everywhere -->\n  <div class=\"row w-100 no-gutters\">\n    <div class=\"col\">\n      <mat-form-field class=\"w-100\">\n        <input matInput formControlName=\"newPassword\" \n          name=\"new-password\" autocomplete=\"new-password\" \n          placeholder=\"{{ labels.input.newPassword }}\" \n          type=\"{{ showPassword ? 'text' : 'password' }}\"/>\n        <button *ngIf=\"inputs.showPwdOnPwdForm\" \n          mat-button matSuffix mat-icon-button aria-label=\"Clear\" \n          color=\"primary\" (click)=\"showPassword=!showPassword\" \n          type=\"button\">\n          <mat-icon>{{ showPassword ? 'visibility_off' : 'visibility' }}</mat-icon>\n        </button>\n        <!-- NOTE: Error message -->\n        <mat-hint align=\"start\" *ngIf=\"formGroup.controls.newPassword.errors?.required && errors.pwd\">\n          {{ labels.policy.required }}\n        </mat-hint>\n      </mat-form-field>\n    </div>\n  </div>\n  <div class=\"row w-100 no-gutters\">\n    <div class=\"col\">\n      <ul class=\"list-unstyled small\">\n        <li class=\"check-policy\">\n          <mat-icon class=\"red-policy\" *ngIf=\"formGroup.controls.newPassword.errors && formGroup.controls.newPassword.errors.longEnough\">close</mat-icon>\n          <mat-icon class=\"green-policy\" *ngIf=\"!formGroup.controls.newPassword.errors || !formGroup.controls.newPassword.errors.longEnough\">check</mat-icon>\n          {{ labels.policy.pwdLengthReplaced }}\n        </li>\n        <li class=\"check-policy\" *ngIf=\"pwdPolicies.upper\">\n          <mat-icon class=\"red-policy\" *ngIf=\"formGroup.controls.newPassword.errors && formGroup.controls.newPassword.errors.upper\">close</mat-icon>\n          <mat-icon class=\"green-policy\" *ngIf=\"!formGroup.controls.newPassword.errors || !formGroup.controls.newPassword.errors.upper\">check</mat-icon>\n          {{ labels.policy.pwdUppercase }}\n        </li>\n        <li class=\"check-policy\" *ngIf=\"pwdPolicies.lower\">\n          <mat-icon class=\"red-policy\" *ngIf=\"formGroup.controls.newPassword.errors && formGroup.controls.newPassword.errors.lower\">close</mat-icon>\n          <mat-icon class=\"green-policy\" *ngIf=\"!formGroup.controls.newPassword.errors || !formGroup.controls.newPassword.errors.lower\">check</mat-icon>\n          {{ labels.policy.pwdLowercase }}\n        </li>\n        <li class=\"check-policy\" *ngIf=\"pwdPolicies.number\">\n          <mat-icon class=\"red-policy\" *ngIf=\"formGroup.controls.newPassword.errors && formGroup.controls.newPassword.errors.number\">close</mat-icon>\n          <mat-icon class=\"green-policy\" *ngIf=\"!formGroup.controls.newPassword.errors || !formGroup.controls.newPassword.errors.number\">check</mat-icon>\n          {{ labels.policy.pwdNumber }}\n        </li>\n        <li class=\"check-policy\" *ngIf=\"pwdPolicies.char\">\n          <mat-icon class=\"red-policy\" *ngIf=\"formGroup.controls.newPassword.errors && formGroup.controls.newPassword.errors.char\">close</mat-icon>\n          <mat-icon class=\"green-policy\" *ngIf=\"!formGroup.controls.newPassword.errors || !formGroup.controls.newPassword.errors.char\">check</mat-icon>\n          {{ labels.policy.pwdSpecial }}\n        </li>\n      </ul>\n    </div>\n  </div>\n  <!-- TODO: Enable Google Captcha -->\n  <!-- <div class=\"row w-100 no-gutters\">\n    <div class=\"col\">\n      <re-captcha site_key=\"6LdBtAkUAAAAAB2_l_TOz7oZmTLXaFjP1cxnu4yM\"\n        (captchaResponse)=\"handleCorrectCaptcha($event)\">\n      </re-captcha>\n    </div>\n  </div> -->\n  <div class=\"pt-0 pb-4 px-4\">\n    <div class=\"row w-100 no-gutters\">\n      <div class=\"col text-right\">\n        <button color=\"primary\" mat-raised-button class=\"small text-uppercase\" type=\"submit\" [disabled]=\"!formGroup.valid\">\n          {{ labels.button.send }}\n        </button>\n      </div>\n    </div>\n  </div>\n</form>",
                    styles: [".green-policy{color:green}.red-policy{color:red}.check-policy{display:flex;align-items:center}.check-policy .mat-icon{margin-right:4px;font-size:22px;height:22px;width:22px}"]
                },] },
    ];
    /** @nocollapse */
    PwdFormComponent.ctorParameters = function () { return [
        { type: FormBuilder, },
    ]; };
    PwdFormComponent.propDecorators = {
        "labels": [{ type: Input },],
        "errors": [{ type: Input },],
        "inputs": [{ type: Input },],
        "isFirst": [{ type: Input },],
        "pwdPolicies": [{ type: Input },],
        "firstConnection": [{ type: Output },],
        "lostPassword": [{ type: Output },],
    };
    return PwdFormComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var MfaSetupFormComponent = /** @class */ (function () {
    function MfaSetupFormComponent(builder) {
        this.builder = builder;
        // Event sent to the login form and relayed parents (modal & tab)
        this.saveMfa = new EventEmitter();
    }
    /**
     * @return {?}
     */
    MfaSetupFormComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.initFormGroups();
    };
    /**
     * @return {?}
     */
    MfaSetupFormComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    MfaSetupFormComponent.prototype.send = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ event = {};
        var /** @type {?} */ verifCode = null;
        verifCode = this.formGroup.controls["verifCode"].value;
        event.code = verifCode;
        this.saveMfa.emit(event);
    };
    /**
     * @return {?}
     */
    MfaSetupFormComponent.prototype.initFormGroups = /**
     * @return {?}
     */
    function () {
        this.formGroup = this.builder.group({
            verifCode: new FormControl({
                value: null,
                disabled: false
            }, [Validators.required]),
        });
    };
    MfaSetupFormComponent.decorators = [
        { type: Component, args: [{
                    selector: 'cal-mfa-setup-form',
                    template: "<div class=\"code text-center\">\n  <qrcode [qrdata]=\"qrCode\" [size]=\"100\" [level]=\"'L'\"></qrcode>\n  <p class=\"my-3\">{{ code }}</p>\n</div>\n<form (ngSubmit)=\"send()\" [formGroup]=\"formGroup\" autocomplete=\"off\">\n  <mat-form-field class=\"w-100\">\n    <input matInput formControlName=\"verifCode\" \n      name=\"verifCode\" placeholder=\"{{ labels.input.verifCode }}\" \n      pattern=\"\\d{6}\" \n      type=\"text\"/> <!-- NOTE: Pattern matches 6 digits -->\n    <button *ngIf=\"formGroup.controls.verifCode.valid && inputs.clearCodeOnMfaForm\" \n      mat-button matSuffix mat-icon-button aria-label=\"Clear\" \n      color=\"primary\" (click)=\"formGroup.controls.verifCode.setValue('')\" \n      type=\"button\">\n      <mat-icon>close</mat-icon>\n    </button>\n    <!-- NOTE: Error messages -->\n    <mat-hint align=\"start\" *ngIf=\"formGroup.controls.verifCode.errors?.required && errors.mfa\">\n      {{ labels.policy.required }}\n    </mat-hint>\n    <mat-hint align=\"start\" *ngIf=\"formGroup.controls.verifCode.errors?.pattern && errors.mfa\">\n      {{ labels.policy.sixDigits }}\n    </mat-hint>\n  </mat-form-field>\n  <div class=\"row w-100 no-gutters\">\n    <div class=\"col text-right\">\n      <button color=\"primary\" mat-raised-button class=\"small text-uppercase\" type=\"submit\" [disabled]=\"!formGroup.valid\">\n        {{ labels.button.save }}\n      </button>\n    </div>\n  </div>\n</form>",
                    styles: [".code{display:flex;flex-direction:column;align-items:center}"]
                },] },
    ];
    /** @nocollapse */
    MfaSetupFormComponent.ctorParameters = function () { return [
        { type: FormBuilder, },
    ]; };
    MfaSetupFormComponent.propDecorators = {
        "labels": [{ type: Input },],
        "errors": [{ type: Input },],
        "inputs": [{ type: Input },],
        "qrCode": [{ type: Input },],
        "code": [{ type: Input },],
        "saveMfa": [{ type: Output },],
    };
    return MfaSetupFormComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var MfaFormComponent = /** @class */ (function () {
    function MfaFormComponent(builder) {
        this.builder = builder;
        // Event sent to the login form and relayed parents (modal & tab)
        this.sendMfa = new EventEmitter();
    }
    /**
     * @return {?}
     */
    MfaFormComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.initFormGroups();
    };
    /**
     * @return {?}
     */
    MfaFormComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    MfaFormComponent.prototype.send = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ event = {};
        var /** @type {?} */ verifCode = null;
        verifCode = this.formGroup.controls["verifCode"].value;
        event.code = verifCode;
        this.sendMfa.emit(event);
    };
    /**
     * @return {?}
     */
    MfaFormComponent.prototype.initFormGroups = /**
     * @return {?}
     */
    function () {
        this.formGroup = this.builder.group({
            verifCode: new FormControl({
                value: null,
                disabled: false
            }, [Validators.required]),
        });
    };
    MfaFormComponent.decorators = [
        { type: Component, args: [{
                    selector: 'cal-mfa-form',
                    template: "<form (ngSubmit)=\"send()\" [formGroup]=\"formGroup\" autocomplete=\"off\">\n  <mat-form-field class=\"w-100\">\n    <input matInput formControlName=\"verifCode\" \n      name=\"verifCode\" placeholder=\"{{ labels.input.verifCode }}\" \n      pattern=\"\\d{6}\" \n      type=\"text\"/> <!-- NOTE: Pattern matches 6 digits -->\n    <button *ngIf=\"formGroup.controls.verifCode.valid && inputs.clearCodeOnMfaForm\" \n      mat-button matSuffix mat-icon-button aria-label=\"Clear\" \n      color=\"primary\" (click)=\"formGroup.controls.verifCode.setValue('')\" \n      type=\"button\">\n      <mat-icon>close</mat-icon>\n    </button>\n    <!-- NOTE: Error messages -->\n    <mat-hint align=\"start\" *ngIf=\"formGroup.controls.verifCode.errors?.required && errors.mfa\">\n      {{ labels.policy.required }}\n    </mat-hint>\n    <mat-hint align=\"start\" *ngIf=\"formGroup.controls.verifCode.errors?.pattern && errors.mfa\">\n      {{ labels.policy.sixDigits }}\n    </mat-hint>\n  </mat-form-field>\n  <div class=\"row w-100 no-gutters\">\n    <div class=\"col text-right\">\n      <button color=\"primary\" mat-raised-button class=\"small text-uppercase\" type=\"submit\" [disabled]=\"!formGroup.valid\">\n        {{ labels.button.send }}\n      </button>\n    </div>\n  </div>\n</form>",
                    styles: [""]
                },] },
    ];
    /** @nocollapse */
    MfaFormComponent.ctorParameters = function () { return [
        { type: FormBuilder, },
    ]; };
    MfaFormComponent.propDecorators = {
        "labels": [{ type: Input },],
        "errors": [{ type: Input },],
        "inputs": [{ type: Input },],
        "sendMfa": [{ type: Output },],
    };
    return MfaFormComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var ExistsLayoutPipe = /** @class */ (function () {
    function ExistsLayoutPipe() {
    }
    /**
     * @param {?} value
     * @param {?} layout
     * @return {?}
     */
    ExistsLayoutPipe.prototype.transform = /**
     * @param {?} value
     * @param {?} layout
     * @return {?}
     */
    function (value, layout) {
        var /** @type {?} */ exist = false;
        try {
            for (var _a = __values(Object.keys(value)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var key = _b.value;
                if (value[key] === layout)
                    exist = true;
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return exist;
        var e_1, _c;
    };
    ExistsLayoutPipe.decorators = [
        { type: Pipe, args: [{ name: 'existsLayout' },] },
    ];
    return ExistsLayoutPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var MaterialModule = /** @class */ (function () {
    function MaterialModule() {
    }
    MaterialModule.decorators = [
        { type: NgModule, args: [{
                    exports: [
                        MatButtonModule,
                        MatInputModule,
                        MatIconModule,
                        MatDialogModule,
                        MatTabsModule,
                    ]
                },] },
    ];
    return MaterialModule;
}());
var LoginFormModule = /** @class */ (function () {
    function LoginFormModule() {
    }
    LoginFormModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        MaterialModule,
                        FormsModule,
                        ReactiveFormsModule,
                        QRCodeModule
                    ],
                    declarations: [
                        LoginFormComponent,
                        PwdFormComponent,
                        ModalWrapperComponent,
                        TabWrapperComponent,
                        MfaSetupFormComponent,
                        MfaFormComponent,
                        ExistsLayoutPipe
                    ],
                    providers: [],
                    entryComponents: [ModalWrapperComponent],
                    exports: [
                        LoginFormComponent,
                        PwdFormComponent,
                        ModalWrapperComponent,
                        TabWrapperComponent,
                        MfaSetupFormComponent,
                        MfaFormComponent,
                        ExistsLayoutPipe
                    ]
                },] },
    ];
    return LoginFormModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { LoginFormComponent, MaterialModule, LoginFormModule, ModalWrapperComponent, TabWrapperComponent, PwdFormComponent, MfaFormComponent as ɵb, MfaSetupFormComponent as ɵa, ExistsLayoutPipe as ɵc };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,