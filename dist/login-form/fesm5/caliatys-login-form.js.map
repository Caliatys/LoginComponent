{"version":3,"file":"caliatys-login-form.js.map","sources":["ng://@caliatys/login-form/lib/validators/usr.validator.ts","ng://@caliatys/login-form/lib/enums/layouts.enum.ts","ng://@caliatys/login-form/lib/enums/themes.enum.ts","ng://@caliatys/login-form/lib/enums/forms.enum.ts","ng://@caliatys/login-form/lib/enums/user-policies.enum.ts","ng://@caliatys/login-form/lib/layouts/modal-wrapper/modal-wrapper.component.ts","ng://@caliatys/login-form/lib/login-form.component.ts","ng://@caliatys/login-form/lib/layouts/tab-wrapper/tab-wrapper.component.ts","ng://@caliatys/login-form/lib/validators/pwd.validator.ts","ng://@caliatys/login-form/lib/forms/pwd-form/pwd-form.component.ts","ng://@caliatys/login-form/lib/forms/mfa-setup-form/mfa-setup-form.component.ts","ng://@caliatys/login-form/lib/forms/mfa-form/mfa-form.component.ts","ng://@caliatys/login-form/lib/pipes/exists-layout.pipe.ts","ng://@caliatys/login-form/lib/login-form.module.ts"],"sourcesContent":["import { FormControl }     from '@angular/forms';\r\nimport { AbstractControl } from '@angular/forms';\r\nimport { ValidatorFn }     from '@angular/forms';\r\n\r\nexport interface ValidationResult\r\n{\r\n  [key : string] : boolean;\r\n}\r\n\r\nexport class UsrValidator\r\n{\r\n  public static custom(regexp : RegExp) : ValidatorFn\r\n  {\r\n    let func = (control : AbstractControl) : { [key : string] : boolean } | null =>\r\n    {\r\n      let isRespectful = control.value !== null && regexp.test(control.value);\r\n      if ( !isRespectful )\r\n        return { custom : true };\r\n\r\n      return null;\r\n    };\r\n    return func;\r\n  }\r\n\r\n  public static email(control : FormControl) : ValidationResult\r\n  {\r\n    let isEmail = control.value !== null && /[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}/.test(control.value);\r\n    if ( !isEmail )\r\n      return { email: true };\r\n\r\n    return null;\r\n  }\r\n\r\n  public static phone(control : FormControl) : ValidationResult\r\n  {\r\n    let isPhone = control.value !== null && /^\\+?\\d*$/.test(control.value);\r\n    if ( !isPhone )\r\n      return { phone: true };\r\n\r\n    return null;\r\n  }\r\n\r\n}\r\n","export enum Layouts\r\n{\r\n  MODAL  = 'modal',\r\n  TAB    = 'tab',\r\n  INLINE = 'inline'\r\n}\r\n","export enum Themes\r\n{\r\n  LIGHT = 'light',\r\n  DARK  = 'dark'\r\n}\r\n","export enum Forms\r\n{\r\n  PWD       = 'pwd',\r\n  MFA_SETUP = 'mfaSetup',\r\n  MFA       = 'mfa'\r\n}\r\n","export enum UserPolicies\r\n{\r\n  EMAIL  = 'email',\r\n  PHONE  = 'phone'\r\n}\r\n","// Angular modules\r\nimport { Component }       from '@angular/core';\r\nimport { OnInit }          from '@angular/core';\r\nimport { OnDestroy }       from '@angular/core';\r\nimport { Inject }          from '@angular/core';\r\nimport { EventEmitter }    from '@angular/core';\r\nimport { MatDialogRef }    from '@angular/material';\r\nimport { MAT_DIALOG_DATA } from '@angular/material';\r\n\r\n// External modules\r\nimport { Subscription }    from 'rxjs/Subscription';\r\n\r\n// Enum\r\nimport { Forms }           from '../../enums/forms.enum';\r\n\r\n@Component({\r\n  selector    : 'cal-modal-wrapper',\r\n  template: `<div class=\"header py-2 px-4\">\r\n  <div class=\"row align-items-center\">\r\n    <div class=\"col\">\r\n      <div *ngIf=\"!isFirst && formType === forms.PWD\">\r\n        <span class=\"h5 font-weight-light {{ labels.header.subtitlePwd ? 'd-block mb-0' : '' }}\">\r\n          {{ labels.header.titlePwd }}\r\n        </span>\r\n        <span *ngIf=\"labels.header.subtitlePwd\" class=\"d-block font-weight-light small\">\r\n          {{ labels.header.subtitlePwd }}\r\n        </span>\r\n      </div>\r\n      <div *ngIf=\"isFirst && formType === forms.PWD\">\r\n        <span class=\"h5 font-weight-light {{ labels.header.subtitlePwdSetup ? 'd-block mb-0' : '' }}\">\r\n          {{ labels.header.titlePwdSetup }}\r\n        </span>\r\n        <span *ngIf=\"labels.header.subtitlePwdSetup\" class=\"d-block font-weight-light small\">\r\n          {{ labels.header.subtitlePwdSetup }}\r\n        </span>\r\n      </div>\r\n      <div *ngIf=\"formType === forms.MFA\">\r\n        <span class=\"h5 font-weight-light {{ labels.header.subtitleMfa ? 'd-block mb-0' : '' }}\">\r\n          {{ labels.header.titleMfa }}\r\n        </span>\r\n        <span *ngIf=\"labels.header.subtitleMfa\" class=\"d-block font-weight-light small\">\r\n          {{ labels.header.subtitleMfa }}\r\n        </span>\r\n      </div>\r\n      <div *ngIf=\"formType === forms.MFA_SETUP\">\r\n        <span class=\"h5 font-weight-light {{ labels.header.subtitleMfaSetup ? 'd-block mb-0' : '' }}\">\r\n          {{ labels.header.titleMfaSetup }}\r\n        </span>\r\n        <span *ngIf=\"labels.header.subtitleMfaSetup\" class=\"d-block font-weight-light small\">\r\n          {{ labels.header.subtitleMfaSetup }}\r\n        </span>\r\n      </div>\r\n    </div>\r\n    <div class=\"col-2 px-0 text-right\">\r\n      <button mat-icon-button mat-dialog-close>\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n  </div>\r\n</div>\r\n<mat-dialog-content class=\"py-4\">\r\n  <!-- NOTE: Pwd Form -->\r\n  <cal-pwd-form *ngIf=\"formType === forms.PWD\" \r\n    [isFirst]=\"isFirst\" \r\n    [pwdPolicies]=\"pwdPolicies\" \r\n    [labels]=\"labels\" \r\n    [inputs]=\"inputs\" \r\n    [errors]=\"errors\" \r\n    (firstConnection)=\"relayFirstLogEvent($event)\" \r\n    (lostPassword)=\"relayLostPwdEvent($event)\">\r\n  </cal-pwd-form>\r\n  <!-- NOTE: MFA Setup Form -->\r\n  <cal-mfa-setup-form *ngIf=\"formType === forms.MFA_SETUP\" \r\n    [qrCode]=\"qrCode\" \r\n    [code]  =\"code\" \r\n    [labels]=\"labels\" \r\n    [inputs]=\"inputs\" \r\n    [errors]=\"errors\" \r\n    (saveMfa)=\"relaySaveMfaKeyEvent($event)\">\r\n  </cal-mfa-setup-form>\r\n  <!-- NOTE: MFA Form -->\r\n  <cal-mfa-form *ngIf=\"formType === forms.MFA\" \r\n    [labels]=\"labels\" \r\n    [inputs]=\"inputs\" \r\n    [errors]=\"errors\" \r\n    (sendMfa)=\"relaySendMfaCodeEvent($event)\">\r\n  </cal-mfa-form>\r\n</mat-dialog-content>`,\r\n  styles: [`.header{color:#fff;background:#5eacff}`]\r\n})\r\nexport class ModalWrapperComponent implements OnInit, OnDestroy\r\n{\r\n  // NOTE: Useful for template\r\n  public forms = Forms;\r\n\r\n  // NOTE: Common\r\n  // Form type (password / mfa)\r\n  public formType        : string;\r\n  // Labels\r\n  public labels    : any;\r\n  // Errors\r\n  public errors    : any;\r\n  // Inputs\r\n  public inputs    : any;\r\n  // Event sent from modal\r\n  public closeSub        : Subscription;\r\n\r\n  // NOTE: Password\r\n  // First connection or Forgot password\r\n  public isFirst       : boolean;\r\n  // Password policies\r\n  public pwdPolicies   : any;\r\n  // Event sent from password form\r\n  public relayFirstLog : EventEmitter<any> = new EventEmitter();\r\n  public relayLostPwd  : EventEmitter<any> = new EventEmitter();\r\n\r\n  // NOTE: MFA setup\r\n  // MFA secret key\r\n  public code            : string;\r\n  public qrCode          : string;\r\n  // Event sent from mfa setup form\r\n  public relaySaveMfaKey : EventEmitter<any> = new EventEmitter();\r\n\r\n  // NOTE: MFA\r\n  // Event sent from mfa form\r\n  public relaySendMfaCode : EventEmitter<any> = new EventEmitter();\r\n\r\n  constructor\r\n  (\r\n    public  dialogRef : MatDialogRef<ModalWrapperComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: any\r\n  )\r\n  {\r\n    this.loadParams();\r\n  }\r\n\r\n  public ngOnInit() : void\r\n  {\r\n  }\r\n\r\n  public ngOnDestroy() : void\r\n  {\r\n    if(this.closeSub)\r\n      this.closeSub.unsubscribe();\r\n  }\r\n\r\n  public relayFirstLogEvent($event : any) : void\r\n  {\r\n    this.relayFirstLog.emit($event);\r\n  }\r\n\r\n  public relayLostPwdEvent($event : any) : void\r\n  {\r\n    this.relayLostPwd.emit($event);\r\n  }\r\n\r\n  public relaySaveMfaKeyEvent($event : any) : void\r\n  {\r\n    this.relaySaveMfaKey.emit($event);\r\n  }\r\n\r\n  public relaySendMfaCodeEvent($event : any) : void\r\n  {\r\n    this.relaySendMfaCode.emit($event);\r\n  }\r\n\r\n  private loadParams() : void\r\n  {\r\n    var data : any;\r\n    data = this.data;\r\n\r\n    if(data !== null)\r\n    {\r\n      this.formType       = data.formType;\r\n\r\n      // NOTE: Common\r\n      // Labels\r\n      this.labels         = data.labels;\r\n      // Labels\r\n      this.errors         = data.errors;\r\n      // Labels\r\n      this.inputs         = data.inputs;\r\n\r\n      // NOTE: Password\r\n      // First connection or Forgot password\r\n      this.isFirst        = data.isFirst;\r\n      // Password policies\r\n      this.pwdPolicies    = data.pwdPolicies;\r\n\r\n      // NOTE: MFA\r\n      // Mfa setupd codes\r\n      this.code           = data.code;\r\n      this.qrCode         = data.qrCode;\r\n\r\n      // Close dialog event\r\n      this.closeSub = data.closeEvent.subscribe((res) =>\r\n      {\r\n        this.dialogRef.close();\r\n      });\r\n    }\r\n  }\r\n\r\n}\r\n","// Angular modules\r\nimport { OnInit }          from '@angular/core';\r\nimport { AfterViewInit }   from '@angular/core';\r\nimport { OnChanges }       from '@angular/core';\r\nimport { SimpleChanges }   from '@angular/core';\r\nimport { OnDestroy }       from '@angular/core';\r\nimport { Input }           from '@angular/core';\r\nimport { Output }          from '@angular/core';\r\nimport { Component }       from '@angular/core';\r\nimport { EventEmitter }    from '@angular/core';\r\nimport { MatDialog }       from '@angular/material';\r\nimport { MatIconRegistry } from '@angular/material';\r\nimport { DomSanitizer }    from '@angular/platform-browser';\r\nimport { FormControl }     from '@angular/forms';\r\nimport { FormGroup }       from '@angular/forms';\r\nimport { FormBuilder }     from '@angular/forms';\r\nimport { Validators }      from '@angular/forms';\r\n\r\n// External modules\r\nimport { Subscription }    from 'rxjs/Subscription';\r\n\r\n// Internal modules\r\nimport { UsrValidator }    from './validators/usr.validator';\r\n\r\n// Enums\r\nimport { Layouts }         from './enums/layouts.enum';\r\nimport { Themes }          from './enums/themes.enum';\r\nimport { Forms }           from './enums/forms.enum';\r\nimport { UserPolicies }    from './enums/user-policies.enum';\r\n\r\n// Components\r\nimport { ModalWrapperComponent } from './layouts/modal-wrapper/modal-wrapper.component';\r\n\r\n@Component({\r\n  selector    : 'cal-login-form',\r\n  template: `<div class=\"{{ fixedWidth ? 'login-wrapper' : '' }}\" id=\"debug-login-form\">\r\n  <mat-tab-group id=\"caliatys-login-form\" [selectedIndex]=\"selectedTab\">\r\n    <mat-tab label=\"login-form\">\r\n      <!-- NOTE: Login form -->\r\n      <form (ngSubmit)=\"onClickLogin()\" [formGroup]=\"formGroup\" *ngIf=\"!googleStyle\">\r\n        <div class=\"row no-gutters\">\r\n          <div class=\"col\">\r\n            <div class=\"row no-gutters\">\r\n              <div class=\"col\">\r\n                <!-- NOTE: Username -->\r\n                <mat-form-field class=\"w-100\">\r\n                  <div matPrefix class=\"mr-2\" *ngIf=\"icons.iconUsrOnLoginForm\">\r\n                    <mat-icon class=\"align-bottom\">person</mat-icon>\r\n                  </div>\r\n                  <input matInput formControlName=\"username\" \r\n                    name=\"username\" autocomplete=\"username\" \r\n                    placeholder=\"{{ labels.input.username }}\" \r\n                    type=\"text\"/>\r\n                  <button *ngIf=\"formGroup.controls.username.value?.length > 0 && inputs.clearUsrOnLoginForm\" \r\n                    mat-button matSuffix mat-icon-button aria-label=\"Clear\" \r\n                    color=\"primary\" (click)=\"formGroup.controls.username.setValue('')\" \r\n                    [disabled]=\"formType === forms.MFA && formLayouts.mfa === layouts.INLINE ? true : false\" \r\n                    type=\"button\">\r\n                    <mat-icon>close</mat-icon>\r\n                  </button>\r\n                  <!-- NOTE: Error message(s) -->\r\n                  <mat-hint align=\"start\" *ngIf=\"formGroup.controls.username.errors?.required && errors.login\">\r\n                    {{ labels.policy.required }}\r\n                  </mat-hint>\r\n                  <mat-hint align=\"start\" *ngIf=\"formGroup.controls.username.errors?.pattern && errors.login && usrPolicy === userPolicies.EMAIL\">\r\n                    {{ labels.policy.email }}\r\n                  </mat-hint>\r\n                  <mat-hint align=\"start\" *ngIf=\"formGroup.controls.username.errors?.pattern && errors.login && usrPolicy === userPolicies.PHONE\">\r\n                    {{ labels.policy.phone }}\r\n                  </mat-hint>\r\n                  <mat-hint align=\"start\" *ngIf=\"formGroup.controls.username.errors?.pattern && errors.login && usrPolicy && usrPolicy !== userPolicies.EMAIL && usrPolicy !== userPolicies.PHONE\">\r\n                    {{ labels.policy.customRegex }}\r\n                  </mat-hint>\r\n                </mat-form-field>\r\n              </div>\r\n            </div>\r\n            <div class=\"row no-gutters\">\r\n              <div class=\"col\">\r\n                <!-- NOTE: Password -->\r\n                <mat-form-field class=\"w-100\">\r\n                  <div matPrefix class=\"mr-2\" *ngIf=\"icons.iconPwdOnLoginForm\">\r\n                    <mat-icon class=\"align-bottom\">lock</mat-icon>\r\n                  </div>\r\n                  <input matInput formControlName=\"password\" \r\n                    name=\"password\" autocomplete=\"password\" \r\n                    placeholder=\"{{ labels.input.password }}\" \r\n                    type=\"{{ showPassword ? 'text' : 'password' }}\"/>\r\n                  <button *ngIf=\"inputs.showPwdOnLoginForm\" \r\n                    mat-button matSuffix mat-icon-button aria-label=\"Clear\" \r\n                    color=\"primary\" (click)=\"showPassword=!showPassword\" \r\n                    [disabled]=\"formType === forms.MFA && formLayouts.mfa === layouts.INLINE ? true : false\" \r\n                    type=\"button\">\r\n                    <mat-icon>{{ showPassword ? 'visibility_off' : 'visibility' }}</mat-icon>\r\n                  </button>\r\n                  <!-- NOTE: Error message -->\r\n                  <mat-hint align=\"start\" *ngIf=\"formGroup.controls.password.errors?.required && errors.login\">\r\n                    {{ labels.policy.required }}\r\n                  </mat-hint>\r\n                </mat-form-field>\r\n              </div> \r\n            </div>\r\n            <!-- NOTE: Buttons -->\r\n            <ng-container *ngIf=\"!( formType === forms.MFA && formLayouts.mfa === layouts.INLINE )\">\r\n              <div class=\"row no-gutters pb-3\">\r\n                <div class=\"col text-left\">\r\n                  <!-- TODO: Remember me -->\r\n                </div>\r\n                <!-- NOTE: Forgot password -->\r\n                <div class=\"col text-right\" *ngIf=\"buttons.forgotPassword\">\r\n                  <a (click)=\"onClickForgotPassword()\" href=\"#\" class=\"small\">\r\n                    {{ labels.button.forgotPassword }}\r\n                  </a>\r\n                </div>\r\n              </div>\r\n              <div class=\"row no-gutters pb-3\">\r\n                <div class=\"col text-right\">\r\n                  <!-- NOTE: Sign up -->\r\n                  <button mat-button (click)=\"onClickSignUp()\" type=\"button\" color=\"primary\" class=\"small text-uppercase mr-3\" *ngIf=\"buttons.signUp\">\r\n                    {{ labels.button.signUp }}\r\n                  </button>\r\n                  <!-- NOTE: Sign in -->\r\n                  <button mat-raised-button type=\"submit\" color=\"primary\" [disabled]=\"!formGroup.valid\" class=\"small text-uppercase\">\r\n                    {{ labels.button.signIn }}\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </ng-container>\r\n          </div>\r\n        </div>\r\n      </form>\r\n      <!-- NOTE: Login by steps buttons -->\r\n      <div class=\"row no-gutters mb-3\" *ngIf=\"googleStyle\">\r\n        <div class=\"col text-right\" *ngIf=\"buttons.signUp\">\r\n          <!-- NOTE: Sign up -->\r\n          <button mat-button (click)=\"onClickSignUp()\" type=\"button\" color=\"primary\" class=\"small text-uppercase mr-2\">\r\n            {{ labels.button.signUp }}\r\n          </button>\r\n        </div>\r\n        <div class=\"col {{ buttons.signUp ? 'text-left' : 'text-center'}}\">\r\n          <!-- NOTE: Sign in -->\r\n          <button mat-raised-button (click)=\"onClickNextStep(0)\" type=\"button\" color=\"primary\" class=\"small text-uppercase ml-2\">\r\n            {{ labels.button.signIn }}\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <!-- NOTE: Social buttons -->\r\n      <ng-container *ngIf=\"!( formType === forms.MFA && formLayouts.mfa === layouts.INLINE )\">\r\n        <div class=\"row no-gutters\">\r\n          <div class=\"col text-center\">\r\n            <!-- NOTE: Google -->\r\n            <div class=\"d-block mb-3\" *ngIf=\"buttons.google\">\r\n              <button mat-raised-button type=\"button\" class=\"mat-raised-button cal-btn google {{ theme }}\" (click)=\"onClickLoginSocial('google')\">\r\n                <span class=\"cal-bg-icon\">\r\n                  <mat-icon class=\"align-middle cal-icon\" svgIcon=\"google\"></mat-icon>\r\n                </span>\r\n                <span class=\"cal-label\">{{ labels.button.googleSignIn }}</span>\r\n              </button>\r\n            </div>\r\n            <!-- NOTE: Facebook -->\r\n            <div class=\"d-block mb-3\" *ngIf=\"buttons.facebook\">\r\n              <button mat-raised-button type=\"button\" class=\"cal-btn facebook\" (click)=\"onClickLoginSocial('facebook')\">\r\n                <span class=\"cal-bg-icon\">\r\n                  <mat-icon class=\"align-middle cal-icon\" svgIcon=\"facebook\"></mat-icon>\r\n                </span>\r\n                <span class=\"cal-label\">{{ labels.button.facebookSignIn }}</span>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </ng-container>\r\n      <!-- NOTE: Inline MFA -->\r\n      <ng-container *ngIf=\"formType === forms.MFA && formLayouts.mfa === layouts.INLINE\">\r\n        <div class=\"row no-gutters\">\r\n          <div class=\"col\">\r\n            <cal-mfa-form \r\n              [inputs]=\"inputs\" \r\n              [labels]=\"labels\" \r\n              [errors]=\"errors\" \r\n              (sendMfa)=\"tabSendMfaCode($event)\">\r\n            </cal-mfa-form>\r\n          </div>\r\n        </div>\r\n      </ng-container>\r\n    </mat-tab>\r\n    <mat-tab label=\"usr-step\" *ngIf=\"googleStyle\">\r\n      <!-- NOTE: Back button -->\r\n      <div class=\"row no-gutters mb-3\">\r\n        <div class=\"col\">\r\n          <a href=\"#\" (click)=\"onClickPrevStep(1)\" title=\"{{ labels.button.back }}\">\r\n            <mat-icon class=\"align-bottom mr-2\">keyboard_arrow_left</mat-icon>{{ labels.button.back }}\r\n          </a>\r\n        </div>\r\n      </div>\r\n      <form (ngSubmit)=\"onClickNextStep(1)\" [formGroup]=\"usrFormGroup\">\r\n        <!-- NOTE: Username -->\r\n        <mat-form-field class=\"w-100\">\r\n          <div matPrefix class=\"mr-2\" *ngIf=\"icons.iconUsrOnLoginForm\">\r\n            <mat-icon class=\"align-bottom\">person</mat-icon>\r\n          </div>\r\n          <input matInput formControlName=\"username\" \r\n            name=\"username\" autocomplete=\"username\" \r\n            placeholder=\"{{ labels.input.username }}\" \r\n            type=\"text\"/>\r\n          <button *ngIf=\"usrFormGroup.controls.username.value?.length > 0 && inputs.clearUsrOnLoginForm\" \r\n            mat-button matSuffix mat-icon-button aria-label=\"Clear\" \r\n            color=\"primary\" (click)=\"usrFormGroup.controls.username.setValue('')\" \r\n            [disabled]=\"formType === forms.MFA && formLayouts.mfa === layouts.INLINE ? true : false\" \r\n            type=\"button\">\r\n            <mat-icon>close</mat-icon>\r\n          </button>\r\n          <!-- NOTE: Error message(s) -->\r\n          <mat-hint align=\"start\" *ngIf=\"usrFormGroup.controls.username.errors?.required && errors.login\">\r\n            {{ labels.policy.required }}\r\n          </mat-hint>\r\n          <mat-hint align=\"start\" *ngIf=\"usrFormGroup.controls.username.errors?.pattern && errors.login && usrPolicy === userPolicies.EMAIL\">\r\n            {{ labels.policy.email }}\r\n          </mat-hint>\r\n          <mat-hint align=\"start\" *ngIf=\"usrFormGroup.controls.username.errors?.pattern && errors.login && usrPolicy === userPolicies.PHONE\">\r\n            {{ labels.policy.phone }}\r\n          </mat-hint>\r\n          <mat-hint align=\"start\" *ngIf=\"usrFormGroup.controls.username.errors?.pattern && errors.login && usrPolicy && usrPolicy !== userPolicies.EMAIL && usrPolicy !== userPolicies.PHONE\">\r\n            {{ labels.policy.customRegex }}\r\n          </mat-hint>\r\n        </mat-form-field>\r\n        <div class=\"row no-gutters mb-3\">\r\n          <!-- NOTE: Forgot password -->\r\n          <div class=\"col text-left\" *ngIf=\"buttons.forgotPassword\">\r\n            <a (click)=\"onClickForgotPassword()\" href=\"#\" class=\"small\">\r\n              {{ labels.button.forgotPassword }}\r\n            </a>\r\n          </div>\r\n          <!-- NOTE: Next button -->\r\n          <div class=\"col text-right\">\r\n            <button mat-raised-button type=\"submit\" color=\"primary\" [disabled]=\"!usrFormGroup.valid\" class=\"small text-uppercase\">\r\n              {{ labels.button.next }}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </mat-tab>\r\n    <mat-tab label=\"pwd-step\" *ngIf=\"googleStyle\">\r\n      <!-- NOTE: Back button -->\r\n      <div class=\"row no-gutters mb-3\">\r\n        <div class=\"col\">\r\n          <a href=\"#\" (click)=\"onClickPrevStep(2)\" title=\"{{ labels.button.back }}\">\r\n            <mat-icon class=\"align-bottom mr-2\">keyboard_arrow_left</mat-icon>{{ labels.button.back }}\r\n          </a>\r\n        </div>\r\n      </div>\r\n      <!-- TODO: User info -->\r\n      <p>{{ userInfo }}</p>\r\n      <form (ngSubmit)=\"onClickNextStep(2)\" [formGroup]=\"pwdFormGroup\">\r\n        <!-- NOTE: Password -->\r\n        <mat-form-field class=\"w-100\">\r\n          <div matPrefix class=\"mr-2\" *ngIf=\"icons.iconPwdOnLoginForm\">\r\n            <mat-icon class=\"align-bottom\">lock</mat-icon>\r\n          </div>\r\n          <input matInput formControlName=\"password\" \r\n            name=\"password\" autocomplete=\"password\" \r\n            placeholder=\"{{ labels.input.password }}\" \r\n            type=\"{{ showPassword ? 'text' : 'password' }}\"/>\r\n          <button *ngIf=\"inputs.showPwdOnLoginForm\" \r\n            mat-button matSuffix mat-icon-button aria-label=\"Clear\" \r\n            color=\"primary\" (click)=\"showPassword=!showPassword\" \r\n            [disabled]=\"formType === forms.MFA && formLayouts.mfa === layouts.INLINE ? true : false\" \r\n            type=\"button\">\r\n            <mat-icon>{{ showPassword ? 'visibility_off' : 'visibility' }}</mat-icon>\r\n          </button>\r\n          <!-- NOTE: Error message -->\r\n          <mat-hint align=\"start\" *ngIf=\"pwdFormGroup.controls.password.errors?.required && errors.login\">\r\n            {{ labels.policy.required }}\r\n          </mat-hint>\r\n        </mat-form-field>\r\n        <!-- NOTE: Next button -->\r\n        <div class=\"row no-gutters mb-3\">\r\n          <div class=\"col text-right\">\r\n            <button mat-raised-button type=\"submit\" color=\"primary\" [disabled]=\"!pwdFormGroup.valid\" class=\"small text-uppercase\">\r\n              {{ labels.button.next }}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </mat-tab>\r\n    <mat-tab label=\"tab-wrapper\" *ngIf=\"(formLayouts | existsLayout: layouts.TAB)\">\r\n      <!-- NOTE: Tab form -->\r\n      <cal-tab-wrapper \r\n        [formType]=\"formType\" \r\n        [isFirst]=\"isFirst\" \r\n        [code]   =\"code\" \r\n        [qrCode] =\"qrCode\" \r\n        [pwdPolicies]=\"pwdPolicies\" \r\n        [errors]=\"errors\" \r\n        [labels]=\"labels\" \r\n        [inputs]=\"inputs\" \r\n        (sendCloseTab)=\"onClickCloseTab($event)\" \r\n        (relayFirstLog)=\"tabFirstLog($event)\" \r\n        (relayLostPwd)=\"tabLostPwd($event)\" \r\n        (relaySaveMfaKey)=\"tabSaveMfaKey($event)\" \r\n        (relaySendMfaCode)=\"tabSendMfaCode($event)\">\r\n      </cal-tab-wrapper>\r\n    </mat-tab>\r\n  </mat-tab-group>\r\n</div>`,\r\n  styles: [`/deep/ #caliatys-login-form mat-tab-header{display:none!important}mat-form-field mat-icon{color:grey}.login-wrapper{width:100%;max-width:330px;padding:15px;margin:0 auto}.cal-btn{line-height:35px;border:0!important;padding:1px!important}.cal-btn .cal-bg-icon{padding:8px;width:34px;height:34px;display:inline-block;vertical-align:top!important}.cal-btn .cal-bg-icon .cal-icon{display:inline-block;height:18px;width:18px;margin-top:-4px;vertical-align:top!important}.cal-btn .cal-label{padding-right:8px;padding-left:16px;size:14px;font-family:Roboto,sans-serif}.adn{background-color:#d87a68!important;color:#fff!important}.adn i{color:#fff!important}.adn:hover{background-color:#e29e91!important}.bitbucket{background-color:#205081!important;color:#fff!important}.bitbucket i{color:#fff!important}.bitbucket:hover{background-color:#2a69aa!important}.dropbox{background-color:#1087dd!important;color:#fff!important}.dropbox i{color:#fff!important}.dropbox:hover{background-color:#309ff0!important}.facebook{background-color:#3b5998!important;color:#fff!important}.facebook i{color:#fff!important}.facebook:hover{background-color:#4c70ba!important}.flickr{background-color:#ff0084!important;color:#fff!important}.flickr i{color:#fff!important}.flickr:hover{background-color:#ff339d!important}.foursquare{background-color:#f94877!important;color:#fff!important}.foursquare i{color:#fff!important}.foursquare:hover{background-color:#fb799c!important}.github{background-color:#444!important;color:#fff!important}.github i{color:#fff!important}.github:hover{background-color:#5e5e5e!important}.instagram{background-color:#405de6!important;color:#fff!important}.instagram i{color:#fff!important}.instagram:hover{background-color:#6d83ec!important}.linkedin{background-color:#007bb6!important;color:#fff!important}.linkedin i{color:#fff!important}.linkedin:hover{background-color:#009de9!important}.microsoft{background-color:#2672ec!important;color:#fff!important}.microsoft i{color:#fff!important}.microsoft:hover{background-color:#5590f0!important}.windows{background-color:#2672ec!important;color:#fff!important}.windows i{color:#fff!important}.windows:hover{background-color:#5590f0!important}.odnoklassniki{background-color:#f4731c!important;color:#fff!important}.odnoklassniki i{color:#fff!important}.odnoklassniki:hover{background-color:#f6914d!important}.openid{background-color:#f7931e!important;color:#fff!important}.openid i{color:#fff!important}.openid:hover{background-color:#f9ab4f!important}.pinterest{background-color:#cb2027!important;color:#fff!important}.pinterest i{color:#fff!important}.pinterest:hover{background-color:#e03e44!important}.reddit{background-color:#eff7ff!important;color:#000!important}.reddit i{color:#000!important}.reddit:hover{background-color:#fff!important}.soundcloud{background-color:#f50!important;color:#fff!important}.soundcloud i{color:#fff!important}.soundcloud:hover{background-color:#f73!important}.tumblr{background-color:#2c4762!important;color:#fff!important}.tumblr i{color:#fff!important}.tumblr:hover{background-color:#3c6185!important}.twitter{background-color:#55acee!important;color:#fff!important}.twitter i{color:#fff!important}.twitter:hover{background-color:#83c3f3!important}.vimeo{background-color:#1ab7ea!important;color:#fff!important}.vimeo i{color:#fff!important}.vimeo:hover{background-color:#49c6ee!important}.vk{background-color:#587ea3!important;color:#fff!important}.vk i{color:#fff!important}.vk:hover{background-color:#7897b6!important}.yahoo{background-color:#720e9e!important;color:#fff!important}.yahoo i{color:#fff!important}.yahoo:hover{background-color:#9412cd!important}.google.light{background-color:#fff!important;color:#5f6368!important}.google.light i{color:#5f6368!important}.google.light:hover{background-color:#fff!important}.google.dark{background-color:#4285f4!important;color:#fff!important}.google.dark i{color:#fff!important}.google.dark:hover{background-color:#72a4f7!important}.google.dark .cal-bg-icon{background:#fff}`]\r\n})\r\nexport class LoginFormComponent implements OnInit, OnChanges, AfterViewInit, OnDestroy\r\n{\r\n  public    formLayouts    : any;\r\n  public    theme          : string;\r\n\r\n  public    usrPolicy      : string;\r\n  public    pwdPolicies    : any;\r\n\r\n  public    icons          : any;\r\n  public    buttons        : any;\r\n  public    inputs         : any;\r\n  public    errors         : any;\r\n  public    labels         : any;\r\n\r\n  // Display login form inside a container\r\n  @Input()  fixedWidth        : boolean = false;\r\n  // Display login form like Google & Microsoft (step by step)\r\n  @Input()  googleStyle       : boolean = false;\r\n  // Display Google button with the supplied theme : light / dark\r\n  @Input()  googleTheme       : string  = null;\r\n  // Display forms inside a layout : tab (by default) / modal / inline\r\n  // The inline layout is only available for the MFA form\r\n  @Input()  customFormLayouts : any;\r\n\r\n  // Optional policy applied on the username input : email / phone / regex\r\n  // Be careful, you must double all the backslashes used in the supplied regex\r\n  @Input()  customUsrPolicy   : string = null;\r\n  // Policies applied on the password input\r\n  @Input()  customPwdPolicies : any;\r\n\r\n  // Dislay icon inside inputs on the login form\r\n  @Input()  customIcons   : any;\r\n\r\n  // Display buttons with events\r\n  @Input()  customButtons : any;\r\n\r\n  // Display clear & show/hide buttons inside inputs\r\n  @Input()  customInputs  : any;\r\n\r\n  // Display error messages\r\n  @Input()  customErrors  : any;\r\n\r\n  // Labels\r\n  @Input()  customLabels  : any;\r\n\r\n  // Event triggered after creating the login form (AfterViewInit)\r\n  @Output() initialized   : EventEmitter<any> = new EventEmitter();\r\n  // Event triggered after clicking on the sign up button.\r\n  @Output() signUp        : EventEmitter<any> = new EventEmitter();\r\n  // Event object containing username and password properties\r\n  @Output() login         : EventEmitter<any> = new EventEmitter();\r\n  // Event object containing username, password and social properties\r\n  @Output() loginSocial   : EventEmitter<any> = new EventEmitter();\r\n  // Event object containing username property\r\n  @Output() forgotPwd     : EventEmitter<any> = new EventEmitter();\r\n  // Event object containing password and code properties\r\n  @Output() sendResetPwd  : EventEmitter<any> = new EventEmitter();\r\n  // Event object containing password property\r\n  @Output() sendFirstPwd  : EventEmitter<any> = new EventEmitter();\r\n  // Event object containing code property\r\n  @Output() saveMfaKey    : EventEmitter<any> = new EventEmitter();\r\n  // Event object containing code property\r\n  @Output() sendMfaCode   : EventEmitter<any> = new EventEmitter();\r\n  // Event object containing username property\r\n  @Output() stepUsr       : EventEmitter<any> = new EventEmitter();\r\n  // Event object containing username and password property\r\n  @Output() stepPwd       : EventEmitter<any> = new EventEmitter();\r\n\r\n  // NOTE: Form\r\n  public    formGroup     : FormGroup;\r\n  public    showPassword  : boolean = false;\r\n  public    formType      : string;\r\n  public    userPolicies = UserPolicies;\r\n  public    forms = Forms;\r\n\r\n  // NOTE: Password\r\n  public    isFirst       : boolean = false;\r\n\r\n  // NOTE: MFA\r\n  public    code          : string  = null;\r\n  public    qrCode        : string  = null;\r\n\r\n  // NOTE: Steps\r\n  public    usrFormGroup  : FormGroup;\r\n  public    pwdFormGroup  : FormGroup;\r\n  public    userInfo      : string  = null;\r\n  public    userImage     : string  = null;\r\n\r\n  // NOTE: Wrapper\r\n  public    layouts = Layouts;\r\n  public    selectedTab     : number = 0;\r\n  public    closeModalEvent : EventEmitter<boolean> = new EventEmitter();\r\n\r\n  private   modalFirstSub       : Subscription;\r\n  private   modalLostSub        : Subscription;\r\n  private   modalSaveMfaKeySub  : Subscription;\r\n  private   modalSendMfaCodeSub : Subscription;\r\n\r\n  // TODO: Captcha\r\n  // @Input()  rememberMe    : boolean = true; // TODO: check box\r\n\r\n  constructor\r\n  (\r\n    public  dialog       : MatDialog,\r\n    public  sanitizer    : DomSanitizer,\r\n    public  iconRegistry : MatIconRegistry,\r\n    private builder      : FormBuilder\r\n  )\r\n  {\r\n    // Social icons\r\n    // TODO: Fix Angular 6 Library assets : https://github.com/angular/angular-cli/issues/11071\r\n    iconRegistry.addSvgIcon('google',   sanitizer.bypassSecurityTrustResourceUrl('../assets/img/google.svg'));\r\n    iconRegistry.addSvgIcon('facebook', sanitizer.bypassSecurityTrustResourceUrl('../assets/img/facebook.svg'));\r\n  }\r\n\r\n  public ngOnInit() : void\r\n  {\r\n    // Login form\r\n    this.initFormGroups();\r\n    // Style (container, step, theme & layout)\r\n    this.initFormLayouts();\r\n    this.initTheme();\r\n\r\n    this.initPolicies();\r\n    this.initIcons();\r\n    this.initButtons();\r\n    this.initInputs();\r\n    this.initErrors();\r\n    this.initLabels();\r\n  }\r\n\r\n  public ngAfterViewInit() : void\r\n  {\r\n    this.initialized.emit();\r\n  }\r\n\r\n  public ngOnChanges(changes : SimpleChanges) : void\r\n  {\r\n    if(changes.googleStyle)\r\n      this.initFormGroups();\r\n    if(changes.customFormLayouts)\r\n      this.initFormLayouts();\r\n    if(changes.googleTheme)\r\n      this.initTheme();\r\n\r\n    if(changes.customPwdPolicies || changes.customUsrPolicy)\r\n      this.initPolicies();\r\n    if(changes.customIcons)\r\n      this.initIcons();\r\n    if(changes.customButtons)\r\n      this.initButtons();\r\n    if(changes.customInputs)\r\n      this.initInputs();\r\n    if(changes.customErrors)\r\n      this.initErrors();\r\n    if(changes.customLabels)\r\n      this.initLabels();\r\n  }\r\n\r\n  public ngOnDestroy() : void\r\n  {\r\n    if(this.modalFirstSub)\r\n      this.modalFirstSub.unsubscribe();\r\n    if(this.modalLostSub)\r\n      this.modalLostSub.unsubscribe();\r\n    if(this.modalSaveMfaKeySub)\r\n      this.modalSaveMfaKeySub.unsubscribe();\r\n    if(this.modalSendMfaCodeSub)\r\n      this.modalSendMfaCodeSub.unsubscribe();\r\n  }\r\n\r\n  // -------------------------------------------------------------------------------------------\r\n  // NOTE: Event -------------------------------------------------------------------------------\r\n  // -------------------------------------------------------------------------------------------\r\n\r\n  // NOTE: From component to user --------------------------------------------------------------\r\n\r\n  /** Emit `$event` object containing username and password properties.\r\n  *\r\n  * @example\r\n  * var username : string = $event.username;\r\n  * var password : string = $event.password;\r\n  */\r\n  public onClickLogin() : void\r\n  {\r\n    let event : any = {};\r\n    event = this.getEventResponse();\r\n    this.login.emit(event);\r\n  }\r\n\r\n  /** Emit `$event` object containing username, password and social properties.\r\n  *\r\n  * @param social Name of the social provider\r\n  * @example\r\n  * var username : string = $event.username;\r\n  * var password : string = $event.password;\r\n  * var social   : string = $event.social;\r\n  */\r\n  public onClickLoginSocial(social : string) : void\r\n  {\r\n    let event : any = {};\r\n    event = this.getEventResponse();\r\n    event.social = social;\r\n    this.loginSocial.emit(event);\r\n  }\r\n\r\n  /** Emit a click event on the sign up button. */\r\n  public onClickSignUp() : void\r\n  {\r\n    this.signUp.emit();\r\n  }\r\n\r\n  /** Emit `$event` object containing username property.\r\n  *\r\n  * @example\r\n  * var username : string = $event.username;\r\n  */\r\n  public onClickForgotPassword() : void\r\n  {\r\n    let event : any = {};\r\n    event = this.getEventResponse('usr');\r\n    this.forgotPwd.emit(event);\r\n  }\r\n\r\n  // NOTE: From user to component --------------------------------------------------------------\r\n\r\n  /** Show password form either to initialize first password or to reset forgot password.\r\n  *\r\n  * @param isFirst Initialize first password or reset forgot password\r\n  */\r\n  public showPwdForm(isFirst : boolean) : void\r\n  {\r\n    this.isFirst  = isFirst;\r\n    this.formType = Forms.PWD;\r\n    this.showLayout(this.formLayouts.pwd);\r\n  }\r\n\r\n  /** Show MFA setup form to initialize first TOTP (Time-based One-time Password).\r\n  *\r\n  * @param code   \r\n  * @param qrCode \r\n  */\r\n  public showMfaSetupForm(code : string, qrCode : string) : void\r\n  {\r\n    this.code     = code;\r\n    this.qrCode   = qrCode;\r\n    this.formType = Forms.MFA_SETUP;\r\n    this.showLayout(this.formLayouts.mfaSetup);\r\n  }\r\n\r\n  /** Show MFA form to get verification code. */\r\n  public showMfaForm() : void\r\n  {\r\n    this.formType = Forms.MFA;\r\n    this.showLayout(this.formLayouts.mfa);\r\n  }\r\n\r\n  /** Hide password form. */\r\n  public hidePwdForm() : void\r\n  {\r\n    this.closeLayout(this.formLayouts.password);\r\n  }\r\n\r\n  /** Hide MFA setup form. */\r\n  public hideMfaSetupForm() : void\r\n  {\r\n    this.closeLayout(this.formLayouts.mfaSetup);\r\n  }\r\n\r\n  /** Hide MFA form. */\r\n  public hideMfaForm() : void\r\n  {\r\n    this.closeLayout(this.formLayouts.mfa);\r\n  }\r\n\r\n  /** Go password step. */\r\n  public showPwdStep(userInfo : string = null, userImage : string = null) : void\r\n  {\r\n    this.userInfo    = userInfo;\r\n    this.userImage   = userImage;\r\n    this.selectedTab = 2;\r\n  }\r\n\r\n  // -------------------------------------------------------------------------------------------\r\n  // NOTE: Steps events ------------------------------------------------------------------------\r\n  // -------------------------------------------------------------------------------------------\r\n\r\n  public onClickNextStep(currentStep : number) : void\r\n  {\r\n    switch(currentStep)\r\n    {\r\n      case 0 :\r\n        this.selectedTab = 1;\r\n        break;\r\n      case 1 : // Username\r\n        let eventUsr : any = null;\r\n        eventUsr = this.getEventResponse('usr');\r\n        this.stepUsr.emit(eventUsr);\r\n        break;\r\n      case 2 : // Password\r\n        let eventPwd : any = null;\r\n        eventPwd = this.getEventResponse();\r\n        this.stepPwd.emit(eventPwd);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  public onClickPrevStep(currentStep : number) : void\r\n  {\r\n    switch(currentStep)\r\n    {\r\n      case 0 :\r\n        break;\r\n      case 1 : // Username\r\n        this.selectedTab = 0;\r\n        break;\r\n      case 2 : // Password\r\n        this.selectedTab = 1;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  // -------------------------------------------------------------------------------------------\r\n  // NOTE: Tab events --------------------------------------------------------------------------\r\n  // -------------------------------------------------------------------------------------------\r\n\r\n  /** Emit `$event` object containing password property.\r\n  *\r\n  * @example\r\n  * var newPassword : string = $event.password;\r\n  */\r\n  public tabFirstLog($event : any) : void\r\n  {\r\n    this.sendFirstPwd.emit($event);\r\n  }\r\n\r\n  /** Emit `$event` object containing password and code properties.\r\n  *\r\n  * @example\r\n  * var newPassword      : string = $event.password;\r\n  * var verificationCode : string = $event.code;\r\n  */\r\n  public tabLostPwd($event : any) : void\r\n  {\r\n    this.sendResetPwd.emit($event);\r\n  }\r\n\r\n  /** Emit `$event` object containing code property.\r\n  *\r\n  * @example\r\n  * var verificationCode : string = $event.code;\r\n  */\r\n  public tabSaveMfaKey($event : any) : void\r\n  {\r\n    this.saveMfaKey.emit($event);\r\n  }\r\n\r\n  /** Emit `$event` object containing code property.\r\n  *\r\n  * @example\r\n  * var verificationCode : string = $event.code;\r\n  */\r\n  public tabSendMfaCode($event : any) : void\r\n  {\r\n    this.sendMfaCode.emit($event);\r\n  }\r\n\r\n  // -------------------------------------------------------------------------------------------\r\n  // NOTE: Modal events ------------------------------------------------------------------------\r\n  // -------------------------------------------------------------------------------------------\r\n\r\n  /** Emit `$event` object containing password property.\r\n  *\r\n  * @example\r\n  * var newPassword : string = $event.password;\r\n  */\r\n  public modalFirstLog(dialogRef : any) : void\r\n  {\r\n    this.modalFirstSub = dialogRef.componentInstance.relayFirstLog.subscribe((event) =>\r\n    {\r\n      this.sendFirstPwd.emit(event);\r\n    });\r\n  }\r\n\r\n  /** Emit `$event` object containing password and code properties.\r\n  *\r\n  * @example\r\n  * var newPassword      : string = $event.password;\r\n  * var verificationCode : string = $event.code;\r\n  */\r\n  public modalLostPwd(dialogRef : any) : void\r\n  {\r\n    this.modalLostSub = dialogRef.componentInstance.relayLostPwd.subscribe((event) =>\r\n    {\r\n      this.sendResetPwd.emit(event);\r\n    });\r\n  }\r\n\r\n  /** Emit `$event` object containing code property.\r\n  *\r\n  * @example\r\n  * var verificationCode : string = $event.code;\r\n  */\r\n  public modalSaveMfaKey(dialogRef : any) : void\r\n  {\r\n    this.modalSaveMfaKeySub = dialogRef.componentInstance.relaySaveMfaKey.subscribe((event) =>\r\n    {\r\n      this.saveMfaKey.emit(event);\r\n    });\r\n  }\r\n\r\n  /** Emit `$event` object containing code property.\r\n  *\r\n  * @example\r\n  * var verificationCode : string = $event.code;\r\n  */\r\n  public modalSendMfaCode(dialogRef : any) : void\r\n  {\r\n    this.modalSendMfaCodeSub = dialogRef.componentInstance.relaySendMfaCode.subscribe((event) =>\r\n    {\r\n      this.sendMfaCode.emit(event);\r\n    });\r\n  }\r\n\r\n  // -------------------------------------------------------------------------------------------\r\n  // NOTE: Tab ---------------------------------------------------------------------------------\r\n  // -------------------------------------------------------------------------------------------\r\n\r\n  public onClickCloseTab($event : any) : void\r\n  {\r\n    this.closeTab();\r\n  }\r\n\r\n  // -------------------------------------------------------------------------------------------\r\n  // NOTE: Modal -------------------------------------------------------------------------------\r\n  // -------------------------------------------------------------------------------------------\r\n\r\n  private openModal() : void\r\n  {\r\n    let params : any = {\r\n      // Common\r\n      formType              : this.formType,\r\n      labels                : this.labels,\r\n      closeEvent            : this.closeModalEvent,\r\n      errors                : this.errors,\r\n      inputs                : this.inputs,\r\n      // Password form\r\n      isFirst               : this.isFirst,\r\n      pwdPolicies           : this.pwdPolicies,\r\n      // Mfa form\r\n      code                  : this.code,\r\n      qrCode                : this.qrCode\r\n    };\r\n\r\n    let dialogRef = this.dialog.open(ModalWrapperComponent, { data : params });\r\n\r\n    if(this.formType === Forms.PWD)\r\n    {\r\n      this.modalFirstLog(dialogRef);\r\n      this.modalLostPwd(dialogRef);\r\n    }\r\n\r\n    if(this.formType === Forms.MFA_SETUP)\r\n      this.modalSaveMfaKey(dialogRef);\r\n\r\n    if(this.formType === Forms.MFA)\r\n      this.modalSendMfaCode(dialogRef);\r\n\r\n    dialogRef.afterClosed().subscribe(result =>\r\n    {\r\n      this.formType = null;\r\n      if(result)\r\n        this.formGroup.controls.password.setValue(result); // Set password\r\n    });\r\n  }\r\n\r\n  // -------------------------------------------------------------------------------------------\r\n  // NOTE: Private -----------------------------------------------------------------------------\r\n  // -------------------------------------------------------------------------------------------\r\n\r\n  private showLayout(formLayout : string) : void\r\n  {\r\n    switch(formLayout)\r\n    {\r\n      case Layouts.TAB    :\r\n        this.openTab();\r\n        break;\r\n      case Layouts.MODAL  :\r\n        this.openModal();\r\n        break;\r\n      case Layouts.INLINE :\r\n        this.formGroup.controls.username.disable();\r\n        this.formGroup.controls.password.disable();\r\n        break;\r\n      default :\r\n        this.openTab();\r\n        break;\r\n    }\r\n  }\r\n\r\n  private closeLayout(formLayout : string) : void\r\n  {\r\n    this.formType = null;\r\n\r\n    switch(formLayout)\r\n    {\r\n      case Layouts.TAB    :\r\n        this.closeTab();\r\n        break;\r\n      case Layouts.MODAL  :\r\n        this.closeModal();\r\n        break;\r\n      case Layouts.INLINE :\r\n        this.formGroup.controls.username.enable();\r\n        this.formGroup.controls.password.enable();\r\n        break;\r\n      default :\r\n        this.closeTab();\r\n        break;\r\n    }\r\n  }\r\n\r\n  private closeModal() : void\r\n  {\r\n    this.closeModalEvent.emit();\r\n  }\r\n\r\n  private openTab() : void\r\n  {\r\n    if(this.googleStyle)\r\n      this.selectedTab = 3;\r\n    else\r\n      this.selectedTab = 1;\r\n  }\r\n\r\n  private closeTab() : void\r\n  {\r\n    this.selectedTab = 0;\r\n  }\r\n\r\n  private getEventResponse(onlyOne : string = null) : any\r\n  {\r\n    let event    : any    = {};\r\n    let username : string = null;\r\n    let password : string = null;\r\n\r\n    if(this.googleStyle)\r\n    {\r\n      username = this.usrFormGroup.controls.username.value;\r\n      password = this.pwdFormGroup.controls.password.value;\r\n    }\r\n    else\r\n    {\r\n      username = this.formGroup.controls.username.value;\r\n      password = this.formGroup.controls.password.value;\r\n    }\r\n\r\n    if(!onlyOne)\r\n    {\r\n      event.username = username;\r\n      event.password = password;\r\n    }\r\n    if(onlyOne && onlyOne === 'usr')\r\n      event.username = username;\r\n    if(onlyOne && onlyOne === 'pwd')\r\n      event.password = password;\r\n\r\n    return event;\r\n  }\r\n\r\n  // -------------------------------------------------------------------------------------------\r\n  // NOTE: Init --------------------------------------------------------------------------------\r\n  // -------------------------------------------------------------------------------------------\r\n\r\n  private initFormLayouts() : void\r\n  {\r\n    let defaultFormLayouts : any = null;\r\n    let formLayouts        : any = null;\r\n\r\n    // Form layouts\r\n    defaultFormLayouts = {\r\n      pwd      : Layouts.TAB,\r\n      mfaSetup : Layouts.TAB,\r\n      mfa      : Layouts.TAB,\r\n    };\r\n\r\n    formLayouts = Object.assign(defaultFormLayouts, this.customFormLayouts);\r\n\r\n    // Corrections\r\n    if(formLayouts.pwd === Layouts.INLINE)\r\n      formLayouts.pwd = Layouts.TAB;\r\n    if(formLayouts.mfaSetup === Layouts.INLINE)\r\n      formLayouts.mfaSetup = Layouts.TAB;\r\n    if(this.googleStyle && formLayouts.mfa === Layouts.INLINE)\r\n      formLayouts.mfa = Layouts.TAB;\r\n\r\n    this.formLayouts = formLayouts;\r\n  }\r\n\r\n  private initTheme() : void\r\n  {\r\n    let theme : string = null;\r\n\r\n    // Theme\r\n    switch(this.googleTheme)\r\n    {\r\n      case Themes.LIGHT :\r\n        theme = this.googleTheme;\r\n        break;\r\n      case Themes.DARK :\r\n        theme = this.googleTheme;\r\n        break;\r\n      default :\r\n        theme = Themes.LIGHT;\r\n        break;\r\n    }\r\n\r\n    this.theme = theme;\r\n  }\r\n\r\n  private initIcons() : void\r\n  {\r\n    let defaultIcons : any = null;\r\n    let icons        : any = null;\r\n\r\n    // Icons\r\n    defaultIcons = {\r\n      iconUsrOnLoginForm : true,\r\n      iconPwdOnLoginForm : true,\r\n    };\r\n\r\n    icons = Object.assign(defaultIcons, this.customIcons);\r\n    this.icons = icons;\r\n  }\r\n\r\n  private initButtons() : void\r\n  {\r\n    let defaultButons : any = null;\r\n    let buttons       : any = null;\r\n\r\n    // Buttons\r\n    defaultButons = {\r\n      forgotPassword : true,\r\n      signUp         : true,\r\n      google         : true,\r\n      facebook       : true\r\n    };\r\n\r\n    buttons = Object.assign(defaultButons, this.customButtons);\r\n    this.buttons = buttons;\r\n  }\r\n\r\n  private initInputs() : void\r\n  {\r\n    let defaultInputs : any = null;\r\n    let inputs        : any = null;\r\n\r\n    // Inputs\r\n    defaultInputs = {\r\n      clearUsrOnLoginForm : true,\r\n      showPwdOnLoginForm  : true,\r\n      showPwdOnPwdForm    : true,\r\n      clearCodeOnPwdForm  : true,\r\n      clearCodeOnMfaForm  : true\r\n    };\r\n\r\n    inputs = Object.assign(defaultInputs, this.customInputs);\r\n    this.inputs = inputs;\r\n  }\r\n\r\n  private initErrors() : void\r\n  {\r\n    let defaultErrors : any = null;\r\n    let errors        : any = null;\r\n\r\n    // Errors\r\n    defaultErrors = {\r\n      login : true,\r\n      pwd   : true,\r\n      mfa   : true\r\n    };\r\n\r\n    errors = Object.assign(defaultErrors, this.customErrors);\r\n    this.errors = errors;\r\n  }\r\n\r\n  private initPolicies() : void\r\n  {\r\n    // NOTE: Password\r\n    let defaultPwdPolicies : any    = null;\r\n    let pwdPolicies        : any    = null;\r\n    let defaultMin         : number = 8;\r\n    let defaultMax         : number = 128;\r\n\r\n    // Password policies\r\n    defaultPwdPolicies = {\r\n      range : {\r\n        min : defaultMin,\r\n        max : defaultMax,\r\n      },\r\n      char   : true,\r\n      number : true,\r\n      lower  : true,\r\n      upper  : true\r\n    };\r\n\r\n    pwdPolicies = Object.assign(defaultPwdPolicies, this.customPwdPolicies);\r\n\r\n    if(pwdPolicies.range.min > pwdPolicies.range.max)\r\n    {\r\n      pwdPolicies.range.min = defaultMin;\r\n      pwdPolicies.range.max = defaultMax;\r\n    }\r\n\r\n    this.pwdPolicies = pwdPolicies;\r\n\r\n    // NOTE: Username\r\n    if(!this.customUsrPolicy)\r\n      return;\r\n\r\n    let validators : any = [];\r\n\r\n    switch(this.customUsrPolicy)\r\n    {\r\n      case UserPolicies.EMAIL :\r\n        validators.push(UsrValidator.email);\r\n        break;\r\n      case UserPolicies.PHONE :\r\n        validators.push(UsrValidator.phone);\r\n        break;\r\n      default :\r\n        let regExp : RegExp = null;\r\n        regExp = new RegExp(this.customUsrPolicy);\r\n        validators.push(UsrValidator.custom(regExp));\r\n        break;\r\n    }\r\n\r\n    validators.push(Validators.required);\r\n    if(this.googleStyle)\r\n      this.usrFormGroup.controls.username.setValidators(validators);\r\n    else\r\n      this.formGroup.controls.username.setValidators(validators);\r\n  }\r\n\r\n  private initLabels() : void\r\n  {\r\n    let defaultLabels : any = {};\r\n    let labels        : any = {};\r\n\r\n    defaultLabels.header = {\r\n      titlePwd         : 'Lost password',\r\n      subtitlePwd      : 'Please enter the confirmation code',\r\n      titlePwdSetup    : 'Password setup',\r\n      subtitlePwdSetup : 'Please enter a new password',\r\n      titleMfa         : 'MFA',\r\n      subtitleMfa      : 'Please enter the confirmation code',\r\n      titleMfaSetup    : 'MFA setup',\r\n      subtitleMfaSetup : 'Save this secret key for future connection'\r\n    };\r\n    defaultLabels.input = {\r\n      username    : 'Username',\r\n      password    : 'Password',\r\n      verifCode   : 'Verification code',\r\n      newPassword : 'New password'\r\n    };\r\n    defaultLabels.button = {\r\n      signIn         : 'Sign in',\r\n      signUp         : 'Sign up',\r\n      next           : 'Next',\r\n      back           : 'Back',\r\n      send           : 'Send',\r\n      save           : 'Save',\r\n      forgotPassword : 'Forgot password',\r\n      googleSignIn   : 'Sign in with Google',\r\n      facebookSignIn : 'Sign in with Facebook'\r\n    };\r\n    defaultLabels.policy = {\r\n      required      : 'This field is required',\r\n      nonWhitespace : 'This value must not contain any spaces',\r\n      email         : 'This value must be an email',\r\n      phone         : 'This value must be a phone number',\r\n      sixDigits     : 'This value must contains six digits',\r\n      customRegex   : 'This value must match the custom regex provided',\r\n      pwdLength     : 'Minimum password length ({{min}} to {{max}})',\r\n      pwdUppercase  : 'Require at least one uppercase letter (A to Z)',\r\n      pwdLowercase  : 'Require at least one lowercase letter (a to z)',\r\n      pwdNumber     : 'Require at least one number (0 to 9)',\r\n      pwdSpecial    : 'Require at least one nonalphanumeric character ! @ # $ % ^ & * ( ) _ + - = [ ] { } | \\''\r\n    };\r\n\r\n    labels = Object.assign(defaultLabels, this.customLabels);\r\n\r\n    this.labels = labels;\r\n  }\r\n\r\n  private initFormGroups() : void\r\n  {\r\n    if(!this.googleStyle)\r\n    {\r\n      this.formGroup = this.builder.group({\r\n        username     : new FormControl({\r\n          value      : null,\r\n          disabled   : false\r\n        },[Validators.required]),\r\n        password     : new FormControl({\r\n          value      : null,\r\n          disabled   : false\r\n        },[Validators.required]),\r\n      });\r\n      return;\r\n    }\r\n\r\n    this.usrFormGroup = this.builder.group({\r\n      username     : new FormControl({\r\n        value      : null,\r\n        disabled   : false\r\n      },[Validators.required])\r\n    });\r\n\r\n    this.pwdFormGroup = this.builder.group({\r\n      password     : new FormControl({\r\n        value      : null,\r\n        disabled   : false\r\n      },[Validators.required])\r\n    });\r\n  }\r\n\r\n}\r\n","// Angular modules\r\nimport { Component }    from '@angular/core';\r\nimport { OnInit }       from '@angular/core';\r\nimport { OnDestroy }    from '@angular/core';\r\nimport { Input }        from '@angular/core';\r\nimport { Output }       from '@angular/core';\r\nimport { EventEmitter } from '@angular/core';\r\n\r\n// Enum\r\nimport { Forms }        from '../../enums/forms.enum';\r\n\r\n@Component({\r\n  selector    : 'cal-tab-wrapper',\r\n  template: `<div class=\"header py-2 px-4 mb-3\">\r\n  <div class=\"row align-items-center\">\r\n    <div class=\"col-2 px-0 text-left\">\r\n      <button mat-icon-button (click)=\"backToLogin()\">\r\n        <mat-icon>arrow_back</mat-icon>\r\n      </button>\r\n    </div>\r\n    <div class=\"col text-right\">\r\n      <div *ngIf=\"!isFirst && formType === forms.PWD\">\r\n        <span class=\"h5 font-weight-light {{ labels.header.subtitlePwd ? 'd-block mb-0' : '' }}\">\r\n          {{ labels.header.titlePwd }}\r\n        </span>\r\n        <span *ngIf=\"labels.header.subtitlePwd\" class=\"d-block font-weight-light small\">\r\n          {{ labels.header.subtitlePwd }}\r\n        </span>\r\n      </div>\r\n      <div *ngIf=\"isFirst && formType === forms.PWD\">\r\n        <span class=\"h5 font-weight-light {{ labels.header.subtitlePwdSetup ? 'd-block mb-0' : '' }}\">\r\n          {{ labels.header.titlePwdSetup }}\r\n        </span>\r\n        <span *ngIf=\"labels.header.subtitlePwdSetup\" class=\"d-block font-weight-light small\">\r\n          {{ labels.header.subtitlePwdSetup }}\r\n        </span>\r\n      </div>\r\n      <div *ngIf=\"formType === forms.MFA\">\r\n        <span class=\"h5 font-weight-light {{ labels.header.subtitleMfa ? 'd-block mb-0' : '' }}\">\r\n          {{ labels.header.titleMfa }}\r\n        </span>\r\n        <span *ngIf=\"labels.header.subtitleMfa\" class=\"d-block font-weight-light small\">\r\n          {{ labels.header.subtitleMfa }}\r\n        </span>\r\n      </div>\r\n      <div *ngIf=\"formType === forms.MFA_SETUP\">\r\n        <span class=\"h5 font-weight-light {{ labels.header.subtitleMfaSetup ? 'd-block mb-0' : '' }}\">\r\n          {{ labels.header.titleMfaSetup }}\r\n        </span>\r\n        <span *ngIf=\"labels.header.subtitleMfaSetup\" class=\"d-block font-weight-light small\">\r\n          {{ labels.header.subtitleMfaSetup }}\r\n        </span>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n<!-- NOTE: Pwd Form -->\r\n<cal-pwd-form *ngIf=\"formType === forms.PWD\" \r\n  [isFirst]=\"isFirst\" \r\n  [pwdPolicies]=\"pwdPolicies\" \r\n  [labels]=\"labels\" \r\n  [inputs]=\"inputs\" \r\n  [errors]=\"errors\" \r\n  (firstConnection)=\"relayFirstLogEvent($event)\" \r\n  (lostPassword)=\"relayLostPwdEvent($event)\">\r\n</cal-pwd-form>\r\n<!-- NOTE: MFA Setup Form -->\r\n<cal-mfa-setup-form *ngIf=\"formType === forms.MFA_SETUP\" \r\n  [qrCode]=\"qrCode\" \r\n  [code]  =\"code\" \r\n  [labels]=\"labels\" \r\n  [inputs]=\"inputs\" \r\n  [errors]=\"errors\" \r\n  (saveMfa)=\"relaySaveMfaKeyEvent($event)\">\r\n</cal-mfa-setup-form>\r\n<!-- NOTE: MFA Form -->\r\n<cal-mfa-form *ngIf=\"formType === forms.MFA\" \r\n  [labels]=\"labels\" \r\n  [inputs]=\"inputs\" \r\n  [errors]=\"errors\" \r\n  (sendMfa)=\"relaySendMfaCodeEvent($event)\">\r\n</cal-mfa-form>`,\r\n  styles: [`.header{color:#fff;background:#5eacff}`]\r\n})\r\nexport class TabWrapperComponent implements OnInit, OnDestroy\r\n{\r\n  // NOTE: Useful for template\r\n  public    forms = Forms;\r\n\r\n  // NOTE: Common\r\n  // Form type (password / mfa)\r\n  @Input()  formType      : string;\r\n  // Labels\r\n  @Input()  labels        : any;\r\n  // Errors\r\n  @Input()  errors        : any;\r\n  // Inputs\r\n  @Input()  inputs        : any;\r\n  // Event sent from tab\r\n  @Output() sendCloseTab  : EventEmitter<boolean> = new EventEmitter();\r\n\r\n  // NOTE: Password\r\n  // First connection or Forgot password\r\n  @Input()  isFirst       : boolean;\r\n  // Password policies\r\n  @Input()  pwdPolicies   : any;\r\n  // Event sent from password form\r\n  @Output() relayFirstLog : EventEmitter<any> = new EventEmitter();\r\n  @Output() relayLostPwd  : EventEmitter<any> = new EventEmitter();\r\n\r\n  // NOTE: MFA setup\r\n  // MFA secret key\r\n  @Input()  code            : string;\r\n  @Input()  qrCode          : string;\r\n  // Event sent from mfa setup form\r\n  @Output() relaySaveMfaKey : EventEmitter<any> = new EventEmitter();\r\n\r\n  // NOTE: MFA\r\n  // Event sent from mfa form\r\n  @Output() relaySendMfaCode : EventEmitter<any> = new EventEmitter();\r\n\r\n  constructor\r\n  (\r\n  )\r\n  {\r\n  }\r\n\r\n  public ngOnInit() : void\r\n  {\r\n  }\r\n\r\n  public ngOnDestroy() : void\r\n  {\r\n  }\r\n\r\n  public backToLogin() : void\r\n  {\r\n    this.sendCloseTab.emit();\r\n  }\r\n\r\n  public relayFirstLogEvent($event : any) : void\r\n  {\r\n    this.relayFirstLog.emit($event);\r\n  }\r\n\r\n  public relayLostPwdEvent($event : any) : void\r\n  {\r\n    this.relayLostPwd.emit($event);\r\n  }\r\n\r\n  public relaySaveMfaKeyEvent($event : any) : void\r\n  {\r\n    this.relaySaveMfaKey.emit($event);\r\n  }\r\n\r\n  public relaySendMfaCodeEvent($event : any) : void\r\n  {\r\n    this.relaySendMfaCode.emit($event);\r\n  }\r\n}\r\n","import { FormControl }     from '@angular/forms';\r\nimport { AbstractControl } from '@angular/forms';\r\nimport { ValidatorFn }     from '@angular/forms';\r\n\r\nexport interface ValidationResult\r\n{\r\n  [key : string] : boolean;\r\n}\r\n\r\nexport class PwdValidator\r\n{\r\n  public static longEnough(min : number, max : number) : ValidatorFn\r\n  {\r\n    let func = (control : AbstractControl) : { [key : string] : boolean } | null =>\r\n    {\r\n      let isLongEnough = control.value !== null && control.value.length >= min && control.value.length <= max;\r\n      if ( !isLongEnough )\r\n        return { longEnough: true };\r\n\r\n      return null;\r\n    };\r\n    return func;\r\n  }\r\n\r\n  public static number(control : FormControl) : ValidationResult\r\n  {\r\n    let hasNumber = control.value !== null && /\\d/.test(control.value);\r\n    if ( !hasNumber )\r\n      return { number: true };\r\n\r\n    return null;\r\n  }\r\n\r\n  public static upper(control : FormControl) : ValidationResult\r\n  {\r\n    let hasUpper = control.value !== null && /[A-Z]/.test(control.value);\r\n    if ( !hasUpper )\r\n      return { upper: true };\r\n\r\n    return null;\r\n  }\r\n\r\n  public static lower(control : FormControl) : ValidationResult\r\n  {\r\n    let hasLower = control.value !== null && /[a-z]/.test(control.value);\r\n    if ( !hasLower )\r\n      return { lower: true };\r\n\r\n    return null;\r\n  }\r\n\r\n  public static char(control : FormControl) : ValidationResult\r\n  {\r\n    let hasChar = control.value !== null && /[!@#$%^&\\*()_+\\-=\\[\\]{}|']/.test(control.value);\r\n    if ( !hasChar )\r\n      return { char: true };\r\n\r\n    return null;\r\n  }\r\n}\r\n","// Angular modules\r\nimport { OnInit }        from '@angular/core';\r\nimport { OnChanges }     from '@angular/core';\r\nimport { SimpleChanges } from '@angular/core';\r\nimport { Component }     from '@angular/core';\r\nimport { OnDestroy }     from '@angular/core';\r\nimport { Input }         from '@angular/core';\r\nimport { Output }        from '@angular/core';\r\nimport { EventEmitter }  from '@angular/core';\r\nimport { FormControl }   from '@angular/forms';\r\nimport { FormGroup }     from '@angular/forms';\r\nimport { FormBuilder }   from '@angular/forms';\r\nimport { Validators }    from '@angular/forms';\r\n\r\n// Internal modules\r\nimport { PwdValidator }  from '../../validators/pwd.validator';\r\n\r\n@Component({\r\n  selector    : 'cal-pwd-form',\r\n  template: `<!-- NOTE: <form autocomplete=\"off\"> will turn off autocomplete for the form in most browsers\r\n     except for username/email/password fields -->\r\n<form (ngSubmit)=\"send()\" [formGroup]=\"formGroup\" autocomplete=\"off\">\r\n\r\n  <!-- NOTE: fake fields are a workaround for chrome/opera autofill getting the wrong fields -->\r\n  <input id=\"username\" style=\"display:none\" type=\"text\" name=\"fakeusernameremembered\">\r\n  <input id=\"password\" style=\"display:none\" type=\"password\" name=\"fakepasswordremembered\">\r\n\r\n  <div class=\"row w-100 no-gutters\" *ngIf=\"!isFirst\">\r\n    <div class=\"col\">\r\n      <mat-form-field class=\"w-100\">\r\n        <!-- NOTE: <input autocomplete=\"nope\"> turns off autocomplete on many other browsers that don't respect\r\n          the form's \"off\", but not for \"password\" inputs. -->\r\n        <input matInput formControlName=\"verifCode\" \r\n          name=\"verif-code\" autocomplete=\"nope\" \r\n          placeholder=\"{{ labels.input.verifCode }}\" \r\n          pattern=\"\\\\d{6}\" \r\n          type=\"text\"/> <!-- NOTE: Pattern matches any non-whitespace character -->\r\n        <button *ngIf=\"formGroup.controls.verifCode.valid && inputs.clearCodeOnPwdForm\" \r\n          mat-button matSuffix mat-icon-button aria-label=\"Clear\" \r\n          color=\"primary\" (click)=\"formGroup.controls.verifCode.setValue('')\" \r\n          type=\"button\">\r\n          <mat-icon>close</mat-icon>\r\n        </button>\r\n        <!-- NOTE: Error messages -->\r\n        <mat-hint align=\"start\" *ngIf=\"formGroup.controls.verifCode.errors?.required && errors.pwd\">\r\n          {{ labels.policy.required }}\r\n        </mat-hint>\r\n        <mat-hint align=\"start\" *ngIf=\"formGroup.controls.verifCode.errors?.pattern && errors.pwd\">\r\n          {{ labels.policy.sixDigits }}\r\n        </mat-hint>\r\n      </mat-form-field>\r\n    </div>\r\n  </div>\r\n  <!-- NOTE: <input type=\"password\" autocomplete=\"new-password\" will turn it off for passwords everywhere -->\r\n  <div class=\"row w-100 no-gutters\">\r\n    <div class=\"col\">\r\n      <mat-form-field class=\"w-100\">\r\n        <input matInput formControlName=\"newPassword\" \r\n          name=\"new-password\" autocomplete=\"new-password\" \r\n          placeholder=\"{{ labels.input.newPassword }}\" \r\n          type=\"{{ showPassword ? 'text' : 'password' }}\"/>\r\n        <button *ngIf=\"inputs.showPwdOnPwdForm\" \r\n          mat-button matSuffix mat-icon-button aria-label=\"Clear\" \r\n          color=\"primary\" (click)=\"showPassword=!showPassword\" \r\n          type=\"button\">\r\n          <mat-icon>{{ showPassword ? 'visibility_off' : 'visibility' }}</mat-icon>\r\n        </button>\r\n        <!-- NOTE: Error message -->\r\n        <mat-hint align=\"start\" *ngIf=\"formGroup.controls.newPassword.errors?.required && errors.pwd\">\r\n          {{ labels.policy.required }}\r\n        </mat-hint>\r\n      </mat-form-field>\r\n    </div>\r\n  </div>\r\n  <div class=\"row w-100 no-gutters\">\r\n    <div class=\"col\">\r\n      <ul class=\"list-unstyled small\">\r\n        <li class=\"check-policy\">\r\n          <mat-icon class=\"red-policy\" *ngIf=\"formGroup.controls.newPassword.errors && formGroup.controls.newPassword.errors.longEnough\">close</mat-icon>\r\n          <mat-icon class=\"green-policy\" *ngIf=\"!formGroup.controls.newPassword.errors || !formGroup.controls.newPassword.errors.longEnough\">check</mat-icon>\r\n          {{ labels.policy.pwdLengthReplaced }}\r\n        </li>\r\n        <li class=\"check-policy\" *ngIf=\"pwdPolicies.upper\">\r\n          <mat-icon class=\"red-policy\" *ngIf=\"formGroup.controls.newPassword.errors && formGroup.controls.newPassword.errors.upper\">close</mat-icon>\r\n          <mat-icon class=\"green-policy\" *ngIf=\"!formGroup.controls.newPassword.errors || !formGroup.controls.newPassword.errors.upper\">check</mat-icon>\r\n          {{ labels.policy.pwdUppercase }}\r\n        </li>\r\n        <li class=\"check-policy\" *ngIf=\"pwdPolicies.lower\">\r\n          <mat-icon class=\"red-policy\" *ngIf=\"formGroup.controls.newPassword.errors && formGroup.controls.newPassword.errors.lower\">close</mat-icon>\r\n          <mat-icon class=\"green-policy\" *ngIf=\"!formGroup.controls.newPassword.errors || !formGroup.controls.newPassword.errors.lower\">check</mat-icon>\r\n          {{ labels.policy.pwdLowercase }}\r\n        </li>\r\n        <li class=\"check-policy\" *ngIf=\"pwdPolicies.number\">\r\n          <mat-icon class=\"red-policy\" *ngIf=\"formGroup.controls.newPassword.errors && formGroup.controls.newPassword.errors.number\">close</mat-icon>\r\n          <mat-icon class=\"green-policy\" *ngIf=\"!formGroup.controls.newPassword.errors || !formGroup.controls.newPassword.errors.number\">check</mat-icon>\r\n          {{ labels.policy.pwdNumber }}\r\n        </li>\r\n        <li class=\"check-policy\" *ngIf=\"pwdPolicies.char\">\r\n          <mat-icon class=\"red-policy\" *ngIf=\"formGroup.controls.newPassword.errors && formGroup.controls.newPassword.errors.char\">close</mat-icon>\r\n          <mat-icon class=\"green-policy\" *ngIf=\"!formGroup.controls.newPassword.errors || !formGroup.controls.newPassword.errors.char\">check</mat-icon>\r\n          {{ labels.policy.pwdSpecial }}\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  </div>\r\n  <!-- TODO: Enable Google Captcha -->\r\n  <!-- <div class=\"row w-100 no-gutters\">\r\n    <div class=\"col\">\r\n      <re-captcha site_key=\"6LdBtAkUAAAAAB2_l_TOz7oZmTLXaFjP1cxnu4yM\"\r\n        (captchaResponse)=\"handleCorrectCaptcha($event)\">\r\n      </re-captcha>\r\n    </div>\r\n  </div> -->\r\n  <div class=\"pt-0 pb-4 px-4\">\r\n    <div class=\"row w-100 no-gutters\">\r\n      <div class=\"col text-right\">\r\n        <button color=\"primary\" mat-raised-button class=\"small text-uppercase\" type=\"submit\" [disabled]=\"!formGroup.valid\">\r\n          {{ labels.button.send }}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</form>`,\r\n  styles: [`.green-policy{color:green}.red-policy{color:red}.check-policy{display:flex;align-items:center}.check-policy .mat-icon{margin-right:4px;font-size:22px;height:22px;width:22px}`]\r\n})\r\nexport class PwdFormComponent implements OnInit, OnChanges, OnDestroy\r\n{\r\n  public    formGroup    : FormGroup;\r\n  public    showPassword : boolean = false;\r\n  // public captchaToken : string; // TODO:\r\n\r\n  // Labels\r\n  @Input()  labels       : any;\r\n  // Errors\r\n  @Input()  errors       : any;\r\n  // Inputs\r\n  @Input()  inputs       : any;\r\n\r\n  // First connection or Forgot password\r\n  @Input()  isFirst      : boolean;\r\n  // Password policies\r\n  @Input()  pwdPolicies  : any;\r\n  // Event sent to the login form and relayed parents (modal & tab)\r\n  @Output() firstConnection : EventEmitter<any> = new EventEmitter();\r\n  @Output() lostPassword    : EventEmitter<any> = new EventEmitter();\r\n\r\n  constructor\r\n  (\r\n    private builder : FormBuilder\r\n  )\r\n  {\r\n  }\r\n\r\n  public ngOnInit() : void\r\n  {\r\n    this.initFormGroups();\r\n  }\r\n\r\n  public ngOnChanges(changes : SimpleChanges) : void\r\n  {\r\n    if(changes.pwdPolicies)\r\n      this.initFormGroups(true);\r\n  }\r\n\r\n  public ngOnDestroy() : void\r\n  {\r\n  }\r\n\r\n  public send() : void\r\n  {\r\n    let event : any = {};\r\n\r\n    let verifCode   : string = null;\r\n    let newPassword : string = null;\r\n\r\n    verifCode       = this.formGroup.controls.verifCode.value;\r\n    newPassword     = this.formGroup.controls.newPassword.value;\r\n\r\n    event.password = newPassword;\r\n\r\n    // First connection\r\n    if(this.isFirst)\r\n    {\r\n      this.firstConnection.emit(event);\r\n      return;\r\n    }\r\n\r\n    event.code = verifCode;\r\n    // Lost password\r\n    this.lostPassword.emit(event);\r\n  }\r\n\r\n  private initFormGroups(refresh : boolean = false) : void\r\n  {\r\n    let verifCode   : string = null;\r\n    let newPassword : string = null;\r\n\r\n    if(refresh && this.formGroup)\r\n    {\r\n      verifCode   = this.formGroup.controls.verifCode.value;\r\n      newPassword = this.formGroup.controls.newPassword.value;\r\n    }\r\n\r\n    let validators : any = [];\r\n\r\n    if(this.pwdPolicies.char)\r\n      validators.push(PwdValidator.char);\r\n    if(this.pwdPolicies.number)\r\n      validators.push(PwdValidator.number);\r\n    if(this.pwdPolicies.upper)\r\n      validators.push(PwdValidator.upper);\r\n    if(this.pwdPolicies.lower)\r\n      validators.push(PwdValidator.lower);\r\n\r\n    validators.push(Validators.required);\r\n    validators.push(PwdValidator.longEnough(this.pwdPolicies.range.min, this.pwdPolicies.range.max));\r\n\r\n    // Refresh min max label\r\n    let rangeLabel : string = null;\r\n    rangeLabel = this.labels.policy.pwdLength;\r\n    rangeLabel = rangeLabel.replace(/{{min}}/, this.pwdPolicies.range.min);\r\n    rangeLabel = rangeLabel.replace(/{{max}}/, this.pwdPolicies.range.max);\r\n    this.labels.policy.pwdLengthReplaced = rangeLabel;\r\n\r\n    this.formGroup = this.builder.group({\r\n      verifCode    : new FormControl({\r\n        value      : verifCode,\r\n        disabled   : false\r\n      }),\r\n      newPassword  : new FormControl({\r\n        value      : newPassword,\r\n        disabled   : false\r\n      }, validators),\r\n    });\r\n\r\n    if(!this.isFirst)\r\n      this.formGroup.controls.verifCode.setValidators([Validators.required]);\r\n  }\r\n\r\n}\r\n","// Angular modules\r\nimport { OnInit }       from '@angular/core';\r\nimport { Component }    from '@angular/core';\r\nimport { OnDestroy }    from '@angular/core';\r\nimport { Input }        from '@angular/core';\r\nimport { Output }       from '@angular/core';\r\nimport { EventEmitter } from '@angular/core';\r\nimport { FormControl }  from '@angular/forms';\r\nimport { FormGroup }    from '@angular/forms';\r\nimport { FormBuilder }  from '@angular/forms';\r\nimport { Validators }   from '@angular/forms';\r\n\r\n@Component({\r\n  selector    : 'cal-mfa-setup-form',\r\n  template: `<div class=\"code text-center\">\r\n  <qrcode [qrdata]=\"qrCode\" [size]=\"100\" [level]=\"'L'\"></qrcode>\r\n  <p class=\"my-3\">{{ code }}</p>\r\n</div>\r\n<form (ngSubmit)=\"send()\" [formGroup]=\"formGroup\" autocomplete=\"off\">\r\n  <mat-form-field class=\"w-100\">\r\n    <input matInput formControlName=\"verifCode\" \r\n      name=\"verifCode\" placeholder=\"{{ labels.input.verifCode }}\" \r\n      pattern=\"\\\\d{6}\" \r\n      type=\"text\"/> <!-- NOTE: Pattern matches 6 digits -->\r\n    <button *ngIf=\"formGroup.controls.verifCode.valid && inputs.clearCodeOnMfaForm\" \r\n      mat-button matSuffix mat-icon-button aria-label=\"Clear\" \r\n      color=\"primary\" (click)=\"formGroup.controls.verifCode.setValue('')\" \r\n      type=\"button\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n    <!-- NOTE: Error messages -->\r\n    <mat-hint align=\"start\" *ngIf=\"formGroup.controls.verifCode.errors?.required && errors.mfa\">\r\n      {{ labels.policy.required }}\r\n    </mat-hint>\r\n    <mat-hint align=\"start\" *ngIf=\"formGroup.controls.verifCode.errors?.pattern && errors.mfa\">\r\n      {{ labels.policy.sixDigits }}\r\n    </mat-hint>\r\n  </mat-form-field>\r\n  <div class=\"row w-100 no-gutters\">\r\n    <div class=\"col text-right\">\r\n      <button color=\"primary\" mat-raised-button class=\"small text-uppercase\" type=\"submit\" [disabled]=\"!formGroup.valid\">\r\n        {{ labels.button.save }}\r\n      </button>\r\n    </div>\r\n  </div>\r\n</form>`,\r\n  styles: [`.code{display:flex;flex-direction:column;align-items:center}`]\r\n})\r\nexport class MfaSetupFormComponent implements OnInit, OnDestroy\r\n{\r\n  public    formGroup      : FormGroup;\r\n\r\n  // Labels\r\n  @Input()  labels         : any;\r\n  // Errors\r\n  @Input()  errors         : any;\r\n  // Inputs\r\n  @Input()  inputs         : any;\r\n\r\n  // MFA secret key\r\n  @Input()  qrCode         : string;\r\n  @Input()  code           : string;\r\n  // Event sent to the login form and relayed parents (modal & tab)\r\n  @Output() saveMfa        : EventEmitter<any> = new EventEmitter();\r\n\r\n  constructor\r\n  (\r\n    private builder : FormBuilder\r\n  )\r\n  {\r\n  }\r\n\r\n  public ngOnInit() : void\r\n  {\r\n    this.initFormGroups();\r\n  }\r\n\r\n  public ngOnDestroy() : void\r\n  {\r\n  }\r\n\r\n  public send() : void\r\n  {\r\n    let event : any = {};\r\n\r\n    let verifCode : string = null;\r\n\r\n    verifCode = this.formGroup.controls.verifCode.value;\r\n\r\n    event.code = verifCode;\r\n\r\n    this.saveMfa.emit(event);\r\n  }\r\n\r\n  private initFormGroups() : void\r\n  {\r\n    this.formGroup = this.builder.group({\r\n      verifCode : new FormControl({\r\n        value      : null,\r\n        disabled   : false\r\n      }, [ Validators.required ]),\r\n    });\r\n  }\r\n\r\n}\r\n","// Angular modules\r\nimport { OnInit }       from '@angular/core';\r\nimport { Component }    from '@angular/core';\r\nimport { OnDestroy }    from '@angular/core';\r\nimport { Input }        from '@angular/core';\r\nimport { Output }       from '@angular/core';\r\nimport { EventEmitter } from '@angular/core';\r\nimport { FormControl }  from '@angular/forms';\r\nimport { FormGroup }    from '@angular/forms';\r\nimport { FormBuilder }  from '@angular/forms';\r\nimport { Validators }   from '@angular/forms';\r\n\r\n@Component({\r\n  selector    : 'cal-mfa-form',\r\n  template: `<form (ngSubmit)=\"send()\" [formGroup]=\"formGroup\" autocomplete=\"off\">\r\n  <mat-form-field class=\"w-100\">\r\n    <input matInput formControlName=\"verifCode\" \r\n      name=\"verifCode\" placeholder=\"{{ labels.input.verifCode }}\" \r\n      pattern=\"\\\\d{6}\" \r\n      type=\"text\"/> <!-- NOTE: Pattern matches 6 digits -->\r\n    <button *ngIf=\"formGroup.controls.verifCode.valid && inputs.clearCodeOnMfaForm\" \r\n      mat-button matSuffix mat-icon-button aria-label=\"Clear\" \r\n      color=\"primary\" (click)=\"formGroup.controls.verifCode.setValue('')\" \r\n      type=\"button\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n    <!-- NOTE: Error messages -->\r\n    <mat-hint align=\"start\" *ngIf=\"formGroup.controls.verifCode.errors?.required && errors.mfa\">\r\n      {{ labels.policy.required }}\r\n    </mat-hint>\r\n    <mat-hint align=\"start\" *ngIf=\"formGroup.controls.verifCode.errors?.pattern && errors.mfa\">\r\n      {{ labels.policy.sixDigits }}\r\n    </mat-hint>\r\n  </mat-form-field>\r\n  <div class=\"row w-100 no-gutters\">\r\n    <div class=\"col text-right\">\r\n      <button color=\"primary\" mat-raised-button class=\"small text-uppercase\" type=\"submit\" [disabled]=\"!formGroup.valid\">\r\n        {{ labels.button.send }}\r\n      </button>\r\n    </div>\r\n  </div>\r\n</form>`,\r\n  styles: [``]\r\n})\r\nexport class MfaFormComponent implements OnInit, OnDestroy\r\n{\r\n  public    formGroup    : FormGroup;\r\n\r\n  // Labels\r\n  @Input()  labels       : any;\r\n  // Errors\r\n  @Input()  errors       : any;\r\n  // Inputs\r\n  @Input()  inputs       : any;\r\n\r\n  // Event sent to the login form and relayed parents (modal & tab)\r\n  @Output() sendMfa      : EventEmitter<any> = new EventEmitter();\r\n\r\n  constructor\r\n  (\r\n    private builder : FormBuilder\r\n  )\r\n  {\r\n  }\r\n\r\n  public ngOnInit() : void\r\n  {\r\n    this.initFormGroups();\r\n  }\r\n\r\n  public ngOnDestroy() : void\r\n  {\r\n  }\r\n\r\n  public send() : void\r\n  {\r\n    let event     : any    = {};\r\n    let verifCode : string = null;\r\n\r\n    verifCode  = this.formGroup.controls.verifCode.value;\r\n    event.code = verifCode;\r\n    this.sendMfa.emit(event);\r\n  }\r\n\r\n  private initFormGroups() : void\r\n  {\r\n    this.formGroup = this.builder.group({\r\n      verifCode : new FormControl({\r\n        value      : null,\r\n        disabled   : false\r\n      }, [ Validators.required ]),\r\n    });\r\n  }\r\n\r\n}\r\n","import { Pipe }          from '@angular/core';\r\nimport { PipeTransform } from '@angular/core';\r\n\r\n@Pipe({ name: 'existsLayout' })\r\nexport class ExistsLayoutPipe implements PipeTransform\r\n{\r\n  transform(value : any, layout : string)\r\n  {\r\n    let exist : boolean = false;\r\n    for ( let key of Object.keys(value) )\r\n      if ( value[key] === layout )\r\n        exist = true;\r\n\r\n    return exist;\r\n  }\r\n}\r\n","// Angular modules\r\nimport { NgModule }                 from '@angular/core';\r\nimport { CommonModule }             from '@angular/common';\r\nimport { FormsModule }              from '@angular/forms';\r\nimport { ReactiveFormsModule }      from '@angular/forms';\r\n\r\n// Material modules\r\n// import { MatProgressSpinnerModule } from '@angular/material';\r\n// import { MatTableModule }           from '@angular/material';\r\n// import { MatSortModule }            from '@angular/material';\r\nimport { MatButtonModule }          from '@angular/material';\r\n// import { MatChipsModule }           from '@angular/material';\r\n// import { MatCheckboxModule }        from '@angular/material';\r\n// import { MatRadioModule }           from '@angular/material';\r\n// import { MatSelectModule }          from '@angular/material';\r\n// import { MatSlideToggleModule }     from '@angular/material';\r\n// import { MatMenuModule }            from '@angular/material';\r\n// import { MatSidenavModule }         from '@angular/material';\r\n// import { MatToolbarModule }         from '@angular/material';\r\n// import { MatGridListModule }        from '@angular/material';\r\n// import { MatTooltipModule }         from '@angular/material';\r\n// import { MatCardModule }            from '@angular/material';\r\nimport { MatIconModule }            from '@angular/material';\r\n// import { MatProgressBarModule }     from '@angular/material';\r\n// import { MatListModule }            from '@angular/material';\r\nimport { MatInputModule }           from '@angular/material';\r\n// import { MatDatepickerModule }      from '@angular/material';\r\n// import { MatNativeDateModule }      from '@angular/material';\r\nimport { MatTabsModule }            from '@angular/material';\r\n// import { MatAutocompleteModule }    from '@angular/material';\r\n// import { MatStepperModule }         from '@angular/material';\r\n// import { MatPaginatorModule }       from '@angular/material';\r\nimport { MatDialogModule }          from '@angular/material';\r\n// import { MatSnackBarModule }        from '@angular/material';\r\n// import { MatExpansionModule }       from '@angular/material';\r\n\r\n// Internal modules\r\nimport { LoginFormComponent }       from './login-form.component';\r\nimport { ModalWrapperComponent }    from './layouts/modal-wrapper/modal-wrapper.component';\r\nimport { TabWrapperComponent }      from './layouts/tab-wrapper/tab-wrapper.component';\r\nimport { PwdFormComponent }         from './forms/pwd-form/pwd-form.component';\r\nimport { MfaSetupFormComponent }    from './forms/mfa-setup-form/mfa-setup-form.component';\r\nimport { MfaFormComponent }         from './forms/mfa-form/mfa-form.component';\r\nimport { ExistsLayoutPipe }         from './pipes/exists-layout.pipe';\r\n\r\n// External modules\r\nimport { QRCodeModule }             from 'angularx-qrcode';\r\n\r\n// NgModule that includes all Material modules that are required to serve the app.\r\n@NgModule({\r\n  exports: [\r\n    // Material modules\r\n    // MatTableModule,\r\n    MatButtonModule,\r\n    // MatChipsModule,\r\n    // MatCheckboxModule,\r\n    MatInputModule,\r\n    // MatRadioModule,\r\n    // MatSelectModule,\r\n    // MatSlideToggleModule,\r\n    // MatMenuModule,\r\n    // MatSidenavModule,\r\n    // MatToolbarModule,\r\n    // MatListModule,\r\n    // MatGridListModule,\r\n    // MatCardModule,\r\n    MatIconModule,\r\n    // MatProgressBarModule,\r\n    MatDialogModule,\r\n    // MatSnackBarModule,\r\n    // MatDatepickerModule,\r\n    // MatNativeDateModule,\r\n    // MatProgressSpinnerModule,\r\n    // MatDatepickerModule,\r\n    MatTabsModule,\r\n    // MatAutocompleteModule,\r\n    // MatExpansionModule,\r\n    // MatTooltipModule,\r\n  ]\r\n})\r\nexport class MaterialModule {}\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MaterialModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    QRCodeModule\r\n  ],\r\n  declarations: [\r\n    LoginFormComponent,\r\n    PwdFormComponent,\r\n    ModalWrapperComponent,\r\n    TabWrapperComponent,\r\n    MfaSetupFormComponent,\r\n    MfaFormComponent,\r\n    ExistsLayoutPipe\r\n  ],\r\n  providers: [\r\n  ],\r\n  entryComponents: [ ModalWrapperComponent ],\r\n  exports: [\r\n    LoginFormComponent,\r\n    PwdFormComponent,\r\n    ModalWrapperComponent,\r\n    TabWrapperComponent,\r\n    MfaSetupFormComponent,\r\n    MfaFormComponent,\r\n    ExistsLayoutPipe\r\n  ]\r\n})\r\nexport class LoginFormModule { }\r\n"],"names":["tslib_1.__values"],"mappings":"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"}
