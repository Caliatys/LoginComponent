{"version":3,"file":"caliatys-login-form.umd.js.map","sources":["ng://@caliatys/login-form/lib/validators/usr.validator.ts","ng://@caliatys/login-form/lib/enums/layouts.enum.ts","ng://@caliatys/login-form/lib/enums/themes.enum.ts","ng://@caliatys/login-form/lib/enums/forms.enum.ts","ng://@caliatys/login-form/lib/enums/user-policies.enum.ts","ng://@caliatys/login-form/lib/layouts/modal-wrapper/modal-wrapper.component.ts","ng://@caliatys/login-form/lib/login-form.component.ts","ng://@caliatys/login-form/lib/layouts/tab-wrapper/tab-wrapper.component.ts","ng://@caliatys/login-form/lib/validators/pwd.validator.ts","ng://@caliatys/login-form/lib/forms/pwd-form/pwd-form.component.ts","ng://@caliatys/login-form/lib/forms/mfa-setup-form/mfa-setup-form.component.ts","ng://@caliatys/login-form/lib/forms/mfa-form/mfa-form.component.ts",null,"ng://@caliatys/login-form/lib/pipes/exists-layout.pipe.ts","ng://@caliatys/login-form/lib/login-form.module.ts"],"sourcesContent":["import { FormControl }     from '@angular/forms';\r\nimport { AbstractControl } from '@angular/forms';\r\nimport { ValidatorFn }     from '@angular/forms';\r\n\r\nexport interface ValidationResult\r\n{\r\n  [key : string] : boolean;\r\n}\r\n\r\nexport class UsrValidator\r\n{\r\n  public static custom(regexp : RegExp) : ValidatorFn\r\n  {\r\n    let func = (control : AbstractControl) : { [key : string] : boolean } | null =>\r\n    {\r\n      let isRespectful = control.value !== null && regexp.test(control.value);\r\n      if ( !isRespectful )\r\n        return { custom : true };\r\n\r\n      return null;\r\n    };\r\n    return func;\r\n  }\r\n\r\n  public static email(control : FormControl) : ValidationResult\r\n  {\r\n    let isEmail = control.value !== null && /[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}/.test(control.value);\r\n    if ( !isEmail )\r\n      return { email: true };\r\n\r\n    return null;\r\n  }\r\n\r\n  public static phone(control : FormControl) : ValidationResult\r\n  {\r\n    let isPhone = control.value !== null && /^\\+?\\d*$/.test(control.value);\r\n    if ( !isPhone )\r\n      return { phone: true };\r\n\r\n    return null;\r\n  }\r\n\r\n}\r\n","export enum Layouts\r\n{\r\n  MODAL  = 'modal',\r\n  TAB    = 'tab',\r\n  INLINE = 'inline'\r\n}\r\n","export enum Themes\r\n{\r\n  LIGHT = 'light',\r\n  DARK  = 'dark'\r\n}\r\n","export enum Forms\r\n{\r\n  PWD       = 'pwd',\r\n  MFA_SETUP = 'mfaSetup',\r\n  MFA       = 'mfa'\r\n}\r\n","export enum UserPolicies\r\n{\r\n  EMAIL  = 'email',\r\n  PHONE  = 'phone'\r\n}\r\n","// Angular modules\r\nimport { Component }       from '@angular/core';\r\nimport { OnInit }          from '@angular/core';\r\nimport { OnDestroy }       from '@angular/core';\r\nimport { Inject }          from '@angular/core';\r\nimport { EventEmitter }    from '@angular/core';\r\nimport { MatDialogRef }    from '@angular/material';\r\nimport { MAT_DIALOG_DATA } from '@angular/material';\r\n\r\n// External modules\r\nimport { Subscription }    from 'rxjs/Subscription';\r\n\r\n// Enum\r\nimport { Forms }           from '../../enums/forms.enum';\r\n\r\n@Component({\r\n  selector    : 'cal-modal-wrapper',\r\n  template: `<div class=\"header py-2 px-4\">\r\n  <div class=\"row align-items-center\">\r\n    <div class=\"col\">\r\n      <div *ngIf=\"!isFirst && formType === forms.PWD\">\r\n        <span class=\"h5 font-weight-light {{ labels.header.subtitlePwd ? 'd-block mb-0' : '' }}\">\r\n          {{ labels.header.titlePwd }}\r\n        </span>\r\n        <span *ngIf=\"labels.header.subtitlePwd\" class=\"d-block font-weight-light small\">\r\n          {{ labels.header.subtitlePwd }}\r\n        </span>\r\n      </div>\r\n      <div *ngIf=\"isFirst && formType === forms.PWD\">\r\n        <span class=\"h5 font-weight-light {{ labels.header.subtitlePwdSetup ? 'd-block mb-0' : '' }}\">\r\n          {{ labels.header.titlePwdSetup }}\r\n        </span>\r\n        <span *ngIf=\"labels.header.subtitlePwdSetup\" class=\"d-block font-weight-light small\">\r\n          {{ labels.header.subtitlePwdSetup }}\r\n        </span>\r\n      </div>\r\n      <div *ngIf=\"formType === forms.MFA\">\r\n        <span class=\"h5 font-weight-light {{ labels.header.subtitleMfa ? 'd-block mb-0' : '' }}\">\r\n          {{ labels.header.titleMfa }}\r\n        </span>\r\n        <span *ngIf=\"labels.header.subtitleMfa\" class=\"d-block font-weight-light small\">\r\n          {{ labels.header.subtitleMfa }}\r\n        </span>\r\n      </div>\r\n      <div *ngIf=\"formType === forms.MFA_SETUP\">\r\n        <span class=\"h5 font-weight-light {{ labels.header.subtitleMfaSetup ? 'd-block mb-0' : '' }}\">\r\n          {{ labels.header.titleMfaSetup }}\r\n        </span>\r\n        <span *ngIf=\"labels.header.subtitleMfaSetup\" class=\"d-block font-weight-light small\">\r\n          {{ labels.header.subtitleMfaSetup }}\r\n        </span>\r\n      </div>\r\n    </div>\r\n    <div class=\"col-2 px-0 text-right\">\r\n      <button mat-icon-button mat-dialog-close>\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n  </div>\r\n</div>\r\n<mat-dialog-content class=\"py-4\">\r\n  <!-- NOTE: Pwd Form -->\r\n  <cal-pwd-form *ngIf=\"formType === forms.PWD\" \r\n    [isFirst]=\"isFirst\" \r\n    [pwdPolicies]=\"pwdPolicies\" \r\n    [labels]=\"labels\" \r\n    [inputs]=\"inputs\" \r\n    [errors]=\"errors\" \r\n    (firstConnection)=\"relayFirstLogEvent($event)\" \r\n    (lostPassword)=\"relayLostPwdEvent($event)\">\r\n  </cal-pwd-form>\r\n  <!-- NOTE: MFA Setup Form -->\r\n  <cal-mfa-setup-form *ngIf=\"formType === forms.MFA_SETUP\" \r\n    [qrCode]=\"qrCode\" \r\n    [code]  =\"code\" \r\n    [labels]=\"labels\" \r\n    [inputs]=\"inputs\" \r\n    [errors]=\"errors\" \r\n    (saveMfa)=\"relaySaveMfaKeyEvent($event)\">\r\n  </cal-mfa-setup-form>\r\n  <!-- NOTE: MFA Form -->\r\n  <cal-mfa-form *ngIf=\"formType === forms.MFA\" \r\n    [labels]=\"labels\" \r\n    [inputs]=\"inputs\" \r\n    [errors]=\"errors\" \r\n    (sendMfa)=\"relaySendMfaCodeEvent($event)\">\r\n  </cal-mfa-form>\r\n</mat-dialog-content>`,\r\n  styles: [`.header{color:#fff;background:#5eacff}`]\r\n})\r\nexport class ModalWrapperComponent implements OnInit, OnDestroy\r\n{\r\n  // NOTE: Useful for template\r\n  public forms = Forms;\r\n\r\n  // NOTE: Common\r\n  // Form type (password / mfa)\r\n  public formType        : string;\r\n  // Labels\r\n  public labels    : any;\r\n  // Errors\r\n  public errors    : any;\r\n  // Inputs\r\n  public inputs    : any;\r\n  // Event sent from modal\r\n  public closeSub        : Subscription;\r\n\r\n  // NOTE: Password\r\n  // First connection or Forgot password\r\n  public isFirst       : boolean;\r\n  // Password policies\r\n  public pwdPolicies   : any;\r\n  // Event sent from password form\r\n  public relayFirstLog : EventEmitter<any> = new EventEmitter();\r\n  public relayLostPwd  : EventEmitter<any> = new EventEmitter();\r\n\r\n  // NOTE: MFA setup\r\n  // MFA secret key\r\n  public code            : string;\r\n  public qrCode          : string;\r\n  // Event sent from mfa setup form\r\n  public relaySaveMfaKey : EventEmitter<any> = new EventEmitter();\r\n\r\n  // NOTE: MFA\r\n  // Event sent from mfa form\r\n  public relaySendMfaCode : EventEmitter<any> = new EventEmitter();\r\n\r\n  constructor\r\n  (\r\n    public  dialogRef : MatDialogRef<ModalWrapperComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: any\r\n  )\r\n  {\r\n    this.loadParams();\r\n  }\r\n\r\n  public ngOnInit() : void\r\n  {\r\n  }\r\n\r\n  public ngOnDestroy() : void\r\n  {\r\n    if(this.closeSub)\r\n      this.closeSub.unsubscribe();\r\n  }\r\n\r\n  public relayFirstLogEvent($event : any) : void\r\n  {\r\n    this.relayFirstLog.emit($event);\r\n  }\r\n\r\n  public relayLostPwdEvent($event : any) : void\r\n  {\r\n    this.relayLostPwd.emit($event);\r\n  }\r\n\r\n  public relaySaveMfaKeyEvent($event : any) : void\r\n  {\r\n    this.relaySaveMfaKey.emit($event);\r\n  }\r\n\r\n  public relaySendMfaCodeEvent($event : any) : void\r\n  {\r\n    this.relaySendMfaCode.emit($event);\r\n  }\r\n\r\n  private loadParams() : void\r\n  {\r\n    var data : any;\r\n    data = this.data;\r\n\r\n    if(data !== null)\r\n    {\r\n      this.formType       = data.formType;\r\n\r\n      // NOTE: Common\r\n      // Labels\r\n      this.labels         = data.labels;\r\n      // Labels\r\n      this.errors         = data.errors;\r\n      // Labels\r\n      this.inputs         = data.inputs;\r\n\r\n      // NOTE: Password\r\n      // First connection or Forgot password\r\n      this.isFirst        = data.isFirst;\r\n      // Password policies\r\n      this.pwdPolicies    = data.pwdPolicies;\r\n\r\n      // NOTE: MFA\r\n      // Mfa setupd codes\r\n      this.code           = data.code;\r\n      this.qrCode         = data.qrCode;\r\n\r\n      // Close dialog event\r\n      this.closeSub = data.closeEvent.subscribe((res) =>\r\n      {\r\n        this.dialogRef.close();\r\n      });\r\n    }\r\n  }\r\n\r\n}\r\n","// Angular modules\r\nimport { OnInit }          from '@angular/core';\r\nimport { AfterViewInit }   from '@angular/core';\r\nimport { OnChanges }       from '@angular/core';\r\nimport { SimpleChanges }   from '@angular/core';\r\nimport { OnDestroy }       from '@angular/core';\r\nimport { Input }           from '@angular/core';\r\nimport { Output }          from '@angular/core';\r\nimport { Component }       from '@angular/core';\r\nimport { EventEmitter }    from '@angular/core';\r\nimport { MatDialog }       from '@angular/material';\r\nimport { MatIconRegistry } from '@angular/material';\r\nimport { DomSanitizer }    from '@angular/platform-browser';\r\nimport { FormControl }     from '@angular/forms';\r\nimport { FormGroup }       from '@angular/forms';\r\nimport { FormBuilder }     from '@angular/forms';\r\nimport { Validators }      from '@angular/forms';\r\n\r\n// External modules\r\nimport { Subscription }    from 'rxjs/Subscription';\r\n\r\n// Internal modules\r\nimport { UsrValidator }    from './validators/usr.validator';\r\n\r\n// Enums\r\nimport { Layouts }         from './enums/layouts.enum';\r\nimport { Themes }          from './enums/themes.enum';\r\nimport { Forms }           from './enums/forms.enum';\r\nimport { UserPolicies }    from './enums/user-policies.enum';\r\n\r\n// Components\r\nimport { ModalWrapperComponent } from './layouts/modal-wrapper/modal-wrapper.component';\r\n\r\n@Component({\r\n  selector    : 'cal-login-form',\r\n  template: `<div class=\"{{ fixedWidth ? 'login-wrapper' : '' }}\" id=\"debug-login-form\">\r\n  <mat-tab-group id=\"caliatys-login-form\" [selectedIndex]=\"selectedTab\">\r\n    <mat-tab label=\"login-form\">\r\n      <!-- NOTE: Login form -->\r\n      <form (ngSubmit)=\"onClickLogin()\" [formGroup]=\"formGroup\" *ngIf=\"!googleStyle\">\r\n        <div class=\"row no-gutters\">\r\n          <div class=\"col\">\r\n            <div class=\"row no-gutters\">\r\n              <div class=\"col\">\r\n                <!-- NOTE: Username -->\r\n                <mat-form-field class=\"w-100\">\r\n                  <div matPrefix class=\"mr-2\" *ngIf=\"icons.iconUsrOnLoginForm\">\r\n                    <mat-icon class=\"align-bottom\">person</mat-icon>\r\n                  </div>\r\n                  <input matInput formControlName=\"username\" \r\n                    name=\"username\" autocomplete=\"username\" \r\n                    placeholder=\"{{ labels.input.username }}\" \r\n                    type=\"text\"/>\r\n                  <button *ngIf=\"formGroup.controls.username.value?.length > 0 && inputs.clearUsrOnLoginForm\" \r\n                    mat-button matSuffix mat-icon-button aria-label=\"Clear\" \r\n                    color=\"primary\" (click)=\"formGroup.controls.username.setValue('')\" \r\n                    [disabled]=\"formType === forms.MFA && formLayouts.mfa === layouts.INLINE ? true : false\" \r\n                    type=\"button\">\r\n                    <mat-icon>close</mat-icon>\r\n                  </button>\r\n                  <!-- NOTE: Error message(s) -->\r\n                  <mat-hint align=\"start\" *ngIf=\"formGroup.controls.username.errors?.required && errors.login\">\r\n                    {{ labels.policy.required }}\r\n                  </mat-hint>\r\n                  <mat-hint align=\"start\" *ngIf=\"formGroup.controls.username.errors?.pattern && errors.login && usrPolicy === userPolicies.EMAIL\">\r\n                    {{ labels.policy.email }}\r\n                  </mat-hint>\r\n                  <mat-hint align=\"start\" *ngIf=\"formGroup.controls.username.errors?.pattern && errors.login && usrPolicy === userPolicies.PHONE\">\r\n                    {{ labels.policy.phone }}\r\n                  </mat-hint>\r\n                  <mat-hint align=\"start\" *ngIf=\"formGroup.controls.username.errors?.pattern && errors.login && usrPolicy && usrPolicy !== userPolicies.EMAIL && usrPolicy !== userPolicies.PHONE\">\r\n                    {{ labels.policy.customRegex }}\r\n                  </mat-hint>\r\n                </mat-form-field>\r\n              </div>\r\n            </div>\r\n            <div class=\"row no-gutters\">\r\n              <div class=\"col\">\r\n                <!-- NOTE: Password -->\r\n                <mat-form-field class=\"w-100\">\r\n                  <div matPrefix class=\"mr-2\" *ngIf=\"icons.iconPwdOnLoginForm\">\r\n                    <mat-icon class=\"align-bottom\">lock</mat-icon>\r\n                  </div>\r\n                  <input matInput formControlName=\"password\" \r\n                    name=\"password\" autocomplete=\"password\" \r\n                    placeholder=\"{{ labels.input.password }}\" \r\n                    type=\"{{ showPassword ? 'text' : 'password' }}\"/>\r\n                  <button *ngIf=\"inputs.showPwdOnLoginForm\" \r\n                    mat-button matSuffix mat-icon-button aria-label=\"Clear\" \r\n                    color=\"primary\" (click)=\"showPassword=!showPassword\" \r\n                    [disabled]=\"formType === forms.MFA && formLayouts.mfa === layouts.INLINE ? true : false\" \r\n                    type=\"button\">\r\n                    <mat-icon>{{ showPassword ? 'visibility_off' : 'visibility' }}</mat-icon>\r\n                  </button>\r\n                  <!-- NOTE: Error message -->\r\n                  <mat-hint align=\"start\" *ngIf=\"formGroup.controls.password.errors?.required && errors.login\">\r\n                    {{ labels.policy.required }}\r\n                  </mat-hint>\r\n                </mat-form-field>\r\n              </div> \r\n            </div>\r\n            <!-- NOTE: Buttons -->\r\n            <ng-container *ngIf=\"!( formType === forms.MFA && formLayouts.mfa === layouts.INLINE )\">\r\n              <div class=\"row no-gutters pb-3\">\r\n                <div class=\"col text-left\">\r\n                  <!-- TODO: Remember me -->\r\n                </div>\r\n                <!-- NOTE: Forgot password -->\r\n                <div class=\"col text-right\" *ngIf=\"buttons.forgotPassword\">\r\n                  <a (click)=\"onClickForgotPassword()\" href=\"#\" class=\"small\">\r\n                    {{ labels.button.forgotPassword }}\r\n                  </a>\r\n                </div>\r\n              </div>\r\n              <div class=\"row no-gutters pb-3\">\r\n                <div class=\"col text-right\">\r\n                  <!-- NOTE: Sign up -->\r\n                  <button mat-button (click)=\"onClickSignUp()\" type=\"button\" color=\"primary\" class=\"small text-uppercase mr-3\" *ngIf=\"buttons.signUp\">\r\n                    {{ labels.button.signUp }}\r\n                  </button>\r\n                  <!-- NOTE: Sign in -->\r\n                  <button mat-raised-button type=\"submit\" color=\"primary\" [disabled]=\"!formGroup.valid\" class=\"small text-uppercase\">\r\n                    {{ labels.button.signIn }}\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </ng-container>\r\n          </div>\r\n        </div>\r\n      </form>\r\n      <!-- NOTE: Login by steps buttons -->\r\n      <div class=\"row no-gutters mb-3\" *ngIf=\"googleStyle\">\r\n        <div class=\"col text-right\" *ngIf=\"buttons.signUp\">\r\n          <!-- NOTE: Sign up -->\r\n          <button mat-button (click)=\"onClickSignUp()\" type=\"button\" color=\"primary\" class=\"small text-uppercase mr-2\">\r\n            {{ labels.button.signUp }}\r\n          </button>\r\n        </div>\r\n        <div class=\"col {{ buttons.signUp ? 'text-left' : 'text-center'}}\">\r\n          <!-- NOTE: Sign in -->\r\n          <button mat-raised-button (click)=\"onClickNextStep(0)\" type=\"button\" color=\"primary\" class=\"small text-uppercase ml-2\">\r\n            {{ labels.button.signIn }}\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <!-- NOTE: Social buttons -->\r\n      <ng-container *ngIf=\"!( formType === forms.MFA && formLayouts.mfa === layouts.INLINE )\">\r\n        <div class=\"row no-gutters\">\r\n          <div class=\"col text-center\">\r\n            <!-- NOTE: Google -->\r\n            <div class=\"d-block mb-3\" *ngIf=\"buttons.google\">\r\n              <button mat-raised-button type=\"button\" class=\"mat-raised-button cal-btn google {{ theme }}\" (click)=\"onClickLoginSocial('google')\">\r\n                <span class=\"cal-bg-icon\">\r\n                  <mat-icon class=\"align-middle cal-icon\" svgIcon=\"google\"></mat-icon>\r\n                </span>\r\n                <span class=\"cal-label\">{{ labels.button.googleSignIn }}</span>\r\n              </button>\r\n            </div>\r\n            <!-- NOTE: Facebook -->\r\n            <div class=\"d-block mb-3\" *ngIf=\"buttons.facebook\">\r\n              <button mat-raised-button type=\"button\" class=\"cal-btn facebook\" (click)=\"onClickLoginSocial('facebook')\">\r\n                <span class=\"cal-bg-icon\">\r\n                  <mat-icon class=\"align-middle cal-icon\" svgIcon=\"facebook\"></mat-icon>\r\n                </span>\r\n                <span class=\"cal-label\">{{ labels.button.facebookSignIn }}</span>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </ng-container>\r\n      <!-- NOTE: Inline MFA -->\r\n      <ng-container *ngIf=\"formType === forms.MFA && formLayouts.mfa === layouts.INLINE\">\r\n        <div class=\"row no-gutters\">\r\n          <div class=\"col\">\r\n            <cal-mfa-form \r\n              [inputs]=\"inputs\" \r\n              [labels]=\"labels\" \r\n              [errors]=\"errors\" \r\n              (sendMfa)=\"tabSendMfaCode($event)\">\r\n            </cal-mfa-form>\r\n          </div>\r\n        </div>\r\n      </ng-container>\r\n    </mat-tab>\r\n    <mat-tab label=\"usr-step\" *ngIf=\"googleStyle\">\r\n      <!-- NOTE: Back button -->\r\n      <div class=\"row no-gutters mb-3\">\r\n        <div class=\"col\">\r\n          <a href=\"#\" (click)=\"onClickPrevStep(1)\" title=\"{{ labels.button.back }}\">\r\n            <mat-icon class=\"align-bottom mr-2\">keyboard_arrow_left</mat-icon>{{ labels.button.back }}\r\n          </a>\r\n        </div>\r\n      </div>\r\n      <form (ngSubmit)=\"onClickNextStep(1)\" [formGroup]=\"usrFormGroup\">\r\n        <!-- NOTE: Username -->\r\n        <mat-form-field class=\"w-100\">\r\n          <div matPrefix class=\"mr-2\" *ngIf=\"icons.iconUsrOnLoginForm\">\r\n            <mat-icon class=\"align-bottom\">person</mat-icon>\r\n          </div>\r\n          <input matInput formControlName=\"username\" \r\n            name=\"username\" autocomplete=\"username\" \r\n            placeholder=\"{{ labels.input.username }}\" \r\n            type=\"text\"/>\r\n          <button *ngIf=\"usrFormGroup.controls.username.value?.length > 0 && inputs.clearUsrOnLoginForm\" \r\n            mat-button matSuffix mat-icon-button aria-label=\"Clear\" \r\n            color=\"primary\" (click)=\"usrFormGroup.controls.username.setValue('')\" \r\n            [disabled]=\"formType === forms.MFA && formLayouts.mfa === layouts.INLINE ? true : false\" \r\n            type=\"button\">\r\n            <mat-icon>close</mat-icon>\r\n          </button>\r\n          <!-- NOTE: Error message(s) -->\r\n          <mat-hint align=\"start\" *ngIf=\"usrFormGroup.controls.username.errors?.required && errors.login\">\r\n            {{ labels.policy.required }}\r\n          </mat-hint>\r\n          <mat-hint align=\"start\" *ngIf=\"usrFormGroup.controls.username.errors?.pattern && errors.login && usrPolicy === userPolicies.EMAIL\">\r\n            {{ labels.policy.email }}\r\n          </mat-hint>\r\n          <mat-hint align=\"start\" *ngIf=\"usrFormGroup.controls.username.errors?.pattern && errors.login && usrPolicy === userPolicies.PHONE\">\r\n            {{ labels.policy.phone }}\r\n          </mat-hint>\r\n          <mat-hint align=\"start\" *ngIf=\"usrFormGroup.controls.username.errors?.pattern && errors.login && usrPolicy && usrPolicy !== userPolicies.EMAIL && usrPolicy !== userPolicies.PHONE\">\r\n            {{ labels.policy.customRegex }}\r\n          </mat-hint>\r\n        </mat-form-field>\r\n        <div class=\"row no-gutters mb-3\">\r\n          <!-- NOTE: Forgot password -->\r\n          <div class=\"col text-left\" *ngIf=\"buttons.forgotPassword\">\r\n            <a (click)=\"onClickForgotPassword()\" href=\"#\" class=\"small\">\r\n              {{ labels.button.forgotPassword }}\r\n            </a>\r\n          </div>\r\n          <!-- NOTE: Next button -->\r\n          <div class=\"col text-right\">\r\n            <button mat-raised-button type=\"submit\" color=\"primary\" [disabled]=\"!usrFormGroup.valid\" class=\"small text-uppercase\">\r\n              {{ labels.button.next }}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </mat-tab>\r\n    <mat-tab label=\"pwd-step\" *ngIf=\"googleStyle\">\r\n      <!-- NOTE: Back button -->\r\n      <div class=\"row no-gutters mb-3\">\r\n        <div class=\"col\">\r\n          <a href=\"#\" (click)=\"onClickPrevStep(2)\" title=\"{{ labels.button.back }}\">\r\n            <mat-icon class=\"align-bottom mr-2\">keyboard_arrow_left</mat-icon>{{ labels.button.back }}\r\n          </a>\r\n        </div>\r\n      </div>\r\n      <!-- TODO: User info -->\r\n      <p>{{ userInfo }}</p>\r\n      <form (ngSubmit)=\"onClickNextStep(2)\" [formGroup]=\"pwdFormGroup\">\r\n        <!-- NOTE: Password -->\r\n        <mat-form-field class=\"w-100\">\r\n          <div matPrefix class=\"mr-2\" *ngIf=\"icons.iconPwdOnLoginForm\">\r\n            <mat-icon class=\"align-bottom\">lock</mat-icon>\r\n          </div>\r\n          <input matInput formControlName=\"password\" \r\n            name=\"password\" autocomplete=\"password\" \r\n            placeholder=\"{{ labels.input.password }}\" \r\n            type=\"{{ showPassword ? 'text' : 'password' }}\"/>\r\n          <button *ngIf=\"inputs.showPwdOnLoginForm\" \r\n            mat-button matSuffix mat-icon-button aria-label=\"Clear\" \r\n            color=\"primary\" (click)=\"showPassword=!showPassword\" \r\n            [disabled]=\"formType === forms.MFA && formLayouts.mfa === layouts.INLINE ? true : false\" \r\n            type=\"button\">\r\n            <mat-icon>{{ showPassword ? 'visibility_off' : 'visibility' }}</mat-icon>\r\n          </button>\r\n          <!-- NOTE: Error message -->\r\n          <mat-hint align=\"start\" *ngIf=\"pwdFormGroup.controls.password.errors?.required && errors.login\">\r\n            {{ labels.policy.required }}\r\n          </mat-hint>\r\n        </mat-form-field>\r\n        <!-- NOTE: Next button -->\r\n        <div class=\"row no-gutters mb-3\">\r\n          <div class=\"col text-right\">\r\n            <button mat-raised-button type=\"submit\" color=\"primary\" [disabled]=\"!pwdFormGroup.valid\" class=\"small text-uppercase\">\r\n              {{ labels.button.next }}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </mat-tab>\r\n    <mat-tab label=\"tab-wrapper\" *ngIf=\"(formLayouts | existsLayout: layouts.TAB)\">\r\n      <!-- NOTE: Tab form -->\r\n      <cal-tab-wrapper \r\n        [formType]=\"formType\" \r\n        [isFirst]=\"isFirst\" \r\n        [code]   =\"code\" \r\n        [qrCode] =\"qrCode\" \r\n        [pwdPolicies]=\"pwdPolicies\" \r\n        [errors]=\"errors\" \r\n        [labels]=\"labels\" \r\n        [inputs]=\"inputs\" \r\n        (sendCloseTab)=\"onClickCloseTab($event)\" \r\n        (relayFirstLog)=\"tabFirstLog($event)\" \r\n        (relayLostPwd)=\"tabLostPwd($event)\" \r\n        (relaySaveMfaKey)=\"tabSaveMfaKey($event)\" \r\n        (relaySendMfaCode)=\"tabSendMfaCode($event)\">\r\n      </cal-tab-wrapper>\r\n    </mat-tab>\r\n  </mat-tab-group>\r\n</div>`,\r\n  styles: [`/deep/ #caliatys-login-form mat-tab-header{display:none!important}mat-form-field mat-icon{color:grey}.login-wrapper{width:100%;max-width:330px;padding:15px;margin:0 auto}.cal-btn{line-height:35px;border:0!important;padding:1px!important}.cal-btn .cal-bg-icon{padding:8px;width:34px;height:34px;display:inline-block;vertical-align:top!important}.cal-btn .cal-bg-icon .cal-icon{display:inline-block;height:18px;width:18px;margin-top:-4px;vertical-align:top!important}.cal-btn .cal-label{padding-right:8px;padding-left:16px;size:14px;font-family:Roboto,sans-serif}.adn{background-color:#d87a68!important;color:#fff!important}.adn i{color:#fff!important}.adn:hover{background-color:#e29e91!important}.bitbucket{background-color:#205081!important;color:#fff!important}.bitbucket i{color:#fff!important}.bitbucket:hover{background-color:#2a69aa!important}.dropbox{background-color:#1087dd!important;color:#fff!important}.dropbox i{color:#fff!important}.dropbox:hover{background-color:#309ff0!important}.facebook{background-color:#3b5998!important;color:#fff!important}.facebook i{color:#fff!important}.facebook:hover{background-color:#4c70ba!important}.flickr{background-color:#ff0084!important;color:#fff!important}.flickr i{color:#fff!important}.flickr:hover{background-color:#ff339d!important}.foursquare{background-color:#f94877!important;color:#fff!important}.foursquare i{color:#fff!important}.foursquare:hover{background-color:#fb799c!important}.github{background-color:#444!important;color:#fff!important}.github i{color:#fff!important}.github:hover{background-color:#5e5e5e!important}.instagram{background-color:#405de6!important;color:#fff!important}.instagram i{color:#fff!important}.instagram:hover{background-color:#6d83ec!important}.linkedin{background-color:#007bb6!important;color:#fff!important}.linkedin i{color:#fff!important}.linkedin:hover{background-color:#009de9!important}.microsoft{background-color:#2672ec!important;color:#fff!important}.microsoft i{color:#fff!important}.microsoft:hover{background-color:#5590f0!important}.windows{background-color:#2672ec!important;color:#fff!important}.windows i{color:#fff!important}.windows:hover{background-color:#5590f0!important}.odnoklassniki{background-color:#f4731c!important;color:#fff!important}.odnoklassniki i{color:#fff!important}.odnoklassniki:hover{background-color:#f6914d!important}.openid{background-color:#f7931e!important;color:#fff!important}.openid i{color:#fff!important}.openid:hover{background-color:#f9ab4f!important}.pinterest{background-color:#cb2027!important;color:#fff!important}.pinterest i{color:#fff!important}.pinterest:hover{background-color:#e03e44!important}.reddit{background-color:#eff7ff!important;color:#000!important}.reddit i{color:#000!important}.reddit:hover{background-color:#fff!important}.soundcloud{background-color:#f50!important;color:#fff!important}.soundcloud i{color:#fff!important}.soundcloud:hover{background-color:#f73!important}.tumblr{background-color:#2c4762!important;color:#fff!important}.tumblr i{color:#fff!important}.tumblr:hover{background-color:#3c6185!important}.twitter{background-color:#55acee!important;color:#fff!important}.twitter i{color:#fff!important}.twitter:hover{background-color:#83c3f3!important}.vimeo{background-color:#1ab7ea!important;color:#fff!important}.vimeo i{color:#fff!important}.vimeo:hover{background-color:#49c6ee!important}.vk{background-color:#587ea3!important;color:#fff!important}.vk i{color:#fff!important}.vk:hover{background-color:#7897b6!important}.yahoo{background-color:#720e9e!important;color:#fff!important}.yahoo i{color:#fff!important}.yahoo:hover{background-color:#9412cd!important}.google.light{background-color:#fff!important;color:#5f6368!important}.google.light i{color:#5f6368!important}.google.light:hover{background-color:#fff!important}.google.dark{background-color:#4285f4!important;color:#fff!important}.google.dark i{color:#fff!important}.google.dark:hover{background-color:#72a4f7!important}.google.dark .cal-bg-icon{background:#fff}`]\r\n})\r\nexport class LoginFormComponent implements OnInit, OnChanges, AfterViewInit, OnDestroy\r\n{\r\n  public    formLayouts    : any;\r\n  public    theme          : string;\r\n\r\n  public    usrPolicy      : string;\r\n  public    pwdPolicies    : any;\r\n\r\n  public    icons          : any;\r\n  public    buttons        : any;\r\n  public    inputs         : any;\r\n  public    errors         : any;\r\n  public    labels         : any;\r\n\r\n  // Display login form inside a container\r\n  @Input()  fixedWidth        : boolean = false;\r\n  // Display login form like Google & Microsoft (step by step)\r\n  @Input()  googleStyle       : boolean = false;\r\n  // Display Google button with the supplied theme : light / dark\r\n  @Input()  googleTheme       : string  = null;\r\n  // Display forms inside a layout : tab (by default) / modal / inline\r\n  // The inline layout is only available for the MFA form\r\n  @Input()  customFormLayouts : any;\r\n\r\n  // Optional policy applied on the username input : email / phone / regex\r\n  // Be careful, you must double all the backslashes used in the supplied regex\r\n  @Input()  customUsrPolicy   : string = null;\r\n  // Policies applied on the password input\r\n  @Input()  customPwdPolicies : any;\r\n\r\n  // Dislay icon inside inputs on the login form\r\n  @Input()  customIcons   : any;\r\n\r\n  // Display buttons with events\r\n  @Input()  customButtons : any;\r\n\r\n  // Display clear & show/hide buttons inside inputs\r\n  @Input()  customInputs  : any;\r\n\r\n  // Display error messages\r\n  @Input()  customErrors  : any;\r\n\r\n  // Labels\r\n  @Input()  customLabels  : any;\r\n\r\n  // Event triggered after creating the login form (AfterViewInit)\r\n  @Output() initialized   : EventEmitter<any> = new EventEmitter();\r\n  // Event triggered after clicking on the sign up button.\r\n  @Output() signUp        : EventEmitter<any> = new EventEmitter();\r\n  // Event object containing username and password properties\r\n  @Output() login         : EventEmitter<any> = new EventEmitter();\r\n  // Event object containing username, password and social properties\r\n  @Output() loginSocial   : EventEmitter<any> = new EventEmitter();\r\n  // Event object containing username property\r\n  @Output() forgotPwd     : EventEmitter<any> = new EventEmitter();\r\n  // Event object containing password and code properties\r\n  @Output() sendResetPwd  : EventEmitter<any> = new EventEmitter();\r\n  // Event object containing password property\r\n  @Output() sendFirstPwd  : EventEmitter<any> = new EventEmitter();\r\n  // Event object containing code property\r\n  @Output() saveMfaKey    : EventEmitter<any> = new EventEmitter();\r\n  // Event object containing code property\r\n  @Output() sendMfaCode   : EventEmitter<any> = new EventEmitter();\r\n  // Event object containing username property\r\n  @Output() stepUsr       : EventEmitter<any> = new EventEmitter();\r\n  // Event object containing username and password property\r\n  @Output() stepPwd       : EventEmitter<any> = new EventEmitter();\r\n\r\n  // NOTE: Form\r\n  public    formGroup     : FormGroup;\r\n  public    showPassword  : boolean = false;\r\n  public    formType      : string;\r\n  public    userPolicies = UserPolicies;\r\n  public    forms = Forms;\r\n\r\n  // NOTE: Password\r\n  public    isFirst       : boolean = false;\r\n\r\n  // NOTE: MFA\r\n  public    code          : string  = null;\r\n  public    qrCode        : string  = null;\r\n\r\n  // NOTE: Steps\r\n  public    usrFormGroup  : FormGroup;\r\n  public    pwdFormGroup  : FormGroup;\r\n  public    userInfo      : string  = null;\r\n  public    userImage     : string  = null;\r\n\r\n  // NOTE: Wrapper\r\n  public    layouts = Layouts;\r\n  public    selectedTab     : number = 0;\r\n  public    closeModalEvent : EventEmitter<boolean> = new EventEmitter();\r\n\r\n  private   modalFirstSub       : Subscription;\r\n  private   modalLostSub        : Subscription;\r\n  private   modalSaveMfaKeySub  : Subscription;\r\n  private   modalSendMfaCodeSub : Subscription;\r\n\r\n  // TODO: Captcha\r\n  // @Input()  rememberMe    : boolean = true; // TODO: check box\r\n\r\n  constructor\r\n  (\r\n    public  dialog       : MatDialog,\r\n    public  sanitizer    : DomSanitizer,\r\n    public  iconRegistry : MatIconRegistry,\r\n    private builder      : FormBuilder\r\n  )\r\n  {\r\n    // Social icons\r\n    // TODO: Fix Angular 6 Library assets : https://github.com/angular/angular-cli/issues/11071\r\n    iconRegistry.addSvgIcon('google',   sanitizer.bypassSecurityTrustResourceUrl('../assets/img/google.svg'));\r\n    iconRegistry.addSvgIcon('facebook', sanitizer.bypassSecurityTrustResourceUrl('../assets/img/facebook.svg'));\r\n  }\r\n\r\n  public ngOnInit() : void\r\n  {\r\n    // Login form\r\n    this.initFormGroups();\r\n    // Style (container, step, theme & layout)\r\n    this.initFormLayouts();\r\n    this.initTheme();\r\n\r\n    this.initPolicies();\r\n    this.initIcons();\r\n    this.initButtons();\r\n    this.initInputs();\r\n    this.initErrors();\r\n    this.initLabels();\r\n  }\r\n\r\n  public ngAfterViewInit() : void\r\n  {\r\n    this.initialized.emit();\r\n  }\r\n\r\n  public ngOnChanges(changes : SimpleChanges) : void\r\n  {\r\n    if(changes.googleStyle)\r\n      this.initFormGroups();\r\n    if(changes.customFormLayouts)\r\n      this.initFormLayouts();\r\n    if(changes.googleTheme)\r\n      this.initTheme();\r\n\r\n    if(changes.customPwdPolicies || changes.customUsrPolicy)\r\n      this.initPolicies();\r\n    if(changes.customIcons)\r\n      this.initIcons();\r\n    if(changes.customButtons)\r\n      this.initButtons();\r\n    if(changes.customInputs)\r\n      this.initInputs();\r\n    if(changes.customErrors)\r\n      this.initErrors();\r\n    if(changes.customLabels)\r\n      this.initLabels();\r\n  }\r\n\r\n  public ngOnDestroy() : void\r\n  {\r\n    if(this.modalFirstSub)\r\n      this.modalFirstSub.unsubscribe();\r\n    if(this.modalLostSub)\r\n      this.modalLostSub.unsubscribe();\r\n    if(this.modalSaveMfaKeySub)\r\n      this.modalSaveMfaKeySub.unsubscribe();\r\n    if(this.modalSendMfaCodeSub)\r\n      this.modalSendMfaCodeSub.unsubscribe();\r\n  }\r\n\r\n  // -------------------------------------------------------------------------------------------\r\n  // NOTE: Event -------------------------------------------------------------------------------\r\n  // -------------------------------------------------------------------------------------------\r\n\r\n  // NOTE: From component to user --------------------------------------------------------------\r\n\r\n  /** Emit `$event` object containing username and password properties.\r\n  *\r\n  * @example\r\n  * var username : string = $event.username;\r\n  * var password : string = $event.password;\r\n  */\r\n  public onClickLogin() : void\r\n  {\r\n    let event : any = {};\r\n    event = this.getEventResponse();\r\n    this.login.emit(event);\r\n  }\r\n\r\n  /** Emit `$event` object containing username, password and social properties.\r\n  *\r\n  * @param social Name of the social provider\r\n  * @example\r\n  * var username : string = $event.username;\r\n  * var password : string = $event.password;\r\n  * var social   : string = $event.social;\r\n  */\r\n  public onClickLoginSocial(social : string) : void\r\n  {\r\n    let event : any = {};\r\n    event = this.getEventResponse();\r\n    event.social = social;\r\n    this.loginSocial.emit(event);\r\n  }\r\n\r\n  /** Emit a click event on the sign up button. */\r\n  public onClickSignUp() : void\r\n  {\r\n    this.signUp.emit();\r\n  }\r\n\r\n  /** Emit `$event` object containing username property.\r\n  *\r\n  * @example\r\n  * var username : string = $event.username;\r\n  */\r\n  public onClickForgotPassword() : void\r\n  {\r\n    let event : any = {};\r\n    event = this.getEventResponse('usr');\r\n    this.forgotPwd.emit(event);\r\n  }\r\n\r\n  // NOTE: From user to component --------------------------------------------------------------\r\n\r\n  /** Show password form either to initialize first password or to reset forgot password.\r\n  *\r\n  * @param isFirst Initialize first password or reset forgot password\r\n  */\r\n  public showPwdForm(isFirst : boolean) : void\r\n  {\r\n    this.isFirst  = isFirst;\r\n    this.formType = Forms.PWD;\r\n    this.showLayout(this.formLayouts.pwd);\r\n  }\r\n\r\n  /** Show MFA setup form to initialize first TOTP (Time-based One-time Password).\r\n  *\r\n  * @param code   \r\n  * @param qrCode \r\n  */\r\n  public showMfaSetupForm(code : string, qrCode : string) : void\r\n  {\r\n    this.code     = code;\r\n    this.qrCode   = qrCode;\r\n    this.formType = Forms.MFA_SETUP;\r\n    this.showLayout(this.formLayouts.mfaSetup);\r\n  }\r\n\r\n  /** Show MFA form to get verification code. */\r\n  public showMfaForm() : void\r\n  {\r\n    this.formType = Forms.MFA;\r\n    this.showLayout(this.formLayouts.mfa);\r\n  }\r\n\r\n  /** Hide password form. */\r\n  public hidePwdForm() : void\r\n  {\r\n    this.closeLayout(this.formLayouts.password);\r\n  }\r\n\r\n  /** Hide MFA setup form. */\r\n  public hideMfaSetupForm() : void\r\n  {\r\n    this.closeLayout(this.formLayouts.mfaSetup);\r\n  }\r\n\r\n  /** Hide MFA form. */\r\n  public hideMfaForm() : void\r\n  {\r\n    this.closeLayout(this.formLayouts.mfa);\r\n  }\r\n\r\n  /** Go password step. */\r\n  public showPwdStep(userInfo : string = null, userImage : string = null) : void\r\n  {\r\n    this.userInfo    = userInfo;\r\n    this.userImage   = userImage;\r\n    this.selectedTab = 2;\r\n  }\r\n\r\n  // -------------------------------------------------------------------------------------------\r\n  // NOTE: Steps events ------------------------------------------------------------------------\r\n  // -------------------------------------------------------------------------------------------\r\n\r\n  public onClickNextStep(currentStep : number) : void\r\n  {\r\n    switch(currentStep)\r\n    {\r\n      case 0 :\r\n        this.selectedTab = 1;\r\n        break;\r\n      case 1 : // Username\r\n        let eventUsr : any = null;\r\n        eventUsr = this.getEventResponse('usr');\r\n        this.stepUsr.emit(eventUsr);\r\n        break;\r\n      case 2 : // Password\r\n        let eventPwd : any = null;\r\n        eventPwd = this.getEventResponse();\r\n        this.stepPwd.emit(eventPwd);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  public onClickPrevStep(currentStep : number) : void\r\n  {\r\n    switch(currentStep)\r\n    {\r\n      case 0 :\r\n        break;\r\n      case 1 : // Username\r\n        this.selectedTab = 0;\r\n        break;\r\n      case 2 : // Password\r\n        this.selectedTab = 1;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  // -------------------------------------------------------------------------------------------\r\n  // NOTE: Tab events --------------------------------------------------------------------------\r\n  // -------------------------------------------------------------------------------------------\r\n\r\n  /** Emit `$event` object containing password property.\r\n  *\r\n  * @example\r\n  * var newPassword : string = $event.password;\r\n  */\r\n  public tabFirstLog($event : any) : void\r\n  {\r\n    this.sendFirstPwd.emit($event);\r\n  }\r\n\r\n  /** Emit `$event` object containing password and code properties.\r\n  *\r\n  * @example\r\n  * var newPassword      : string = $event.password;\r\n  * var verificationCode : string = $event.code;\r\n  */\r\n  public tabLostPwd($event : any) : void\r\n  {\r\n    this.sendResetPwd.emit($event);\r\n  }\r\n\r\n  /** Emit `$event` object containing code property.\r\n  *\r\n  * @example\r\n  * var verificationCode : string = $event.code;\r\n  */\r\n  public tabSaveMfaKey($event : any) : void\r\n  {\r\n    this.saveMfaKey.emit($event);\r\n  }\r\n\r\n  /** Emit `$event` object containing code property.\r\n  *\r\n  * @example\r\n  * var verificationCode : string = $event.code;\r\n  */\r\n  public tabSendMfaCode($event : any) : void\r\n  {\r\n    this.sendMfaCode.emit($event);\r\n  }\r\n\r\n  // -------------------------------------------------------------------------------------------\r\n  // NOTE: Modal events ------------------------------------------------------------------------\r\n  // -------------------------------------------------------------------------------------------\r\n\r\n  /** Emit `$event` object containing password property.\r\n  *\r\n  * @example\r\n  * var newPassword : string = $event.password;\r\n  */\r\n  public modalFirstLog(dialogRef : any) : void\r\n  {\r\n    this.modalFirstSub = dialogRef.componentInstance.relayFirstLog.subscribe((event) =>\r\n    {\r\n      this.sendFirstPwd.emit(event);\r\n    });\r\n  }\r\n\r\n  /** Emit `$event` object containing password and code properties.\r\n  *\r\n  * @example\r\n  * var newPassword      : string = $event.password;\r\n  * var verificationCode : string = $event.code;\r\n  */\r\n  public modalLostPwd(dialogRef : any) : void\r\n  {\r\n    this.modalLostSub = dialogRef.componentInstance.relayLostPwd.subscribe((event) =>\r\n    {\r\n      this.sendResetPwd.emit(event);\r\n    });\r\n  }\r\n\r\n  /** Emit `$event` object containing code property.\r\n  *\r\n  * @example\r\n  * var verificationCode : string = $event.code;\r\n  */\r\n  public modalSaveMfaKey(dialogRef : any) : void\r\n  {\r\n    this.modalSaveMfaKeySub = dialogRef.componentInstance.relaySaveMfaKey.subscribe((event) =>\r\n    {\r\n      this.saveMfaKey.emit(event);\r\n    });\r\n  }\r\n\r\n  /** Emit `$event` object containing code property.\r\n  *\r\n  * @example\r\n  * var verificationCode : string = $event.code;\r\n  */\r\n  public modalSendMfaCode(dialogRef : any) : void\r\n  {\r\n    this.modalSendMfaCodeSub = dialogRef.componentInstance.relaySendMfaCode.subscribe((event) =>\r\n    {\r\n      this.sendMfaCode.emit(event);\r\n    });\r\n  }\r\n\r\n  // -------------------------------------------------------------------------------------------\r\n  // NOTE: Tab ---------------------------------------------------------------------------------\r\n  // -------------------------------------------------------------------------------------------\r\n\r\n  public onClickCloseTab($event : any) : void\r\n  {\r\n    this.closeTab();\r\n  }\r\n\r\n  // -------------------------------------------------------------------------------------------\r\n  // NOTE: Modal -------------------------------------------------------------------------------\r\n  // -------------------------------------------------------------------------------------------\r\n\r\n  private openModal() : void\r\n  {\r\n    let params : any = {\r\n      // Common\r\n      formType              : this.formType,\r\n      labels                : this.labels,\r\n      closeEvent            : this.closeModalEvent,\r\n      errors                : this.errors,\r\n      inputs                : this.inputs,\r\n      // Password form\r\n      isFirst               : this.isFirst,\r\n      pwdPolicies           : this.pwdPolicies,\r\n      // Mfa form\r\n      code                  : this.code,\r\n      qrCode                : this.qrCode\r\n    };\r\n\r\n    let dialogRef = this.dialog.open(ModalWrapperComponent, { data : params });\r\n\r\n    if(this.formType === Forms.PWD)\r\n    {\r\n      this.modalFirstLog(dialogRef);\r\n      this.modalLostPwd(dialogRef);\r\n    }\r\n\r\n    if(this.formType === Forms.MFA_SETUP)\r\n      this.modalSaveMfaKey(dialogRef);\r\n\r\n    if(this.formType === Forms.MFA)\r\n      this.modalSendMfaCode(dialogRef);\r\n\r\n    dialogRef.afterClosed().subscribe(result =>\r\n    {\r\n      this.formType = null;\r\n      if(result)\r\n        this.formGroup.controls.password.setValue(result); // Set password\r\n    });\r\n  }\r\n\r\n  // -------------------------------------------------------------------------------------------\r\n  // NOTE: Private -----------------------------------------------------------------------------\r\n  // -------------------------------------------------------------------------------------------\r\n\r\n  private showLayout(formLayout : string) : void\r\n  {\r\n    switch(formLayout)\r\n    {\r\n      case Layouts.TAB    :\r\n        this.openTab();\r\n        break;\r\n      case Layouts.MODAL  :\r\n        this.openModal();\r\n        break;\r\n      case Layouts.INLINE :\r\n        this.formGroup.controls.username.disable();\r\n        this.formGroup.controls.password.disable();\r\n        break;\r\n      default :\r\n        this.openTab();\r\n        break;\r\n    }\r\n  }\r\n\r\n  private closeLayout(formLayout : string) : void\r\n  {\r\n    this.formType = null;\r\n\r\n    switch(formLayout)\r\n    {\r\n      case Layouts.TAB    :\r\n        this.closeTab();\r\n        break;\r\n      case Layouts.MODAL  :\r\n        this.closeModal();\r\n        break;\r\n      case Layouts.INLINE :\r\n        this.formGroup.controls.username.enable();\r\n        this.formGroup.controls.password.enable();\r\n        break;\r\n      default :\r\n        this.closeTab();\r\n        break;\r\n    }\r\n  }\r\n\r\n  private closeModal() : void\r\n  {\r\n    this.closeModalEvent.emit();\r\n  }\r\n\r\n  private openTab() : void\r\n  {\r\n    if(this.googleStyle)\r\n      this.selectedTab = 3;\r\n    else\r\n      this.selectedTab = 1;\r\n  }\r\n\r\n  private closeTab() : void\r\n  {\r\n    this.selectedTab = 0;\r\n  }\r\n\r\n  private getEventResponse(onlyOne : string = null) : any\r\n  {\r\n    let event    : any    = {};\r\n    let username : string = null;\r\n    let password : string = null;\r\n\r\n    if(this.googleStyle)\r\n    {\r\n      username = this.usrFormGroup.controls.username.value;\r\n      password = this.pwdFormGroup.controls.password.value;\r\n    }\r\n    else\r\n    {\r\n      username = this.formGroup.controls.username.value;\r\n      password = this.formGroup.controls.password.value;\r\n    }\r\n\r\n    if(!onlyOne)\r\n    {\r\n      event.username = username;\r\n      event.password = password;\r\n    }\r\n    if(onlyOne && onlyOne === 'usr')\r\n      event.username = username;\r\n    if(onlyOne && onlyOne === 'pwd')\r\n      event.password = password;\r\n\r\n    return event;\r\n  }\r\n\r\n  // -------------------------------------------------------------------------------------------\r\n  // NOTE: Init --------------------------------------------------------------------------------\r\n  // -------------------------------------------------------------------------------------------\r\n\r\n  private initFormLayouts() : void\r\n  {\r\n    let defaultFormLayouts : any = null;\r\n    let formLayouts        : any = null;\r\n\r\n    // Form layouts\r\n    defaultFormLayouts = {\r\n      pwd      : Layouts.TAB,\r\n      mfaSetup : Layouts.TAB,\r\n      mfa      : Layouts.TAB,\r\n    };\r\n\r\n    formLayouts = Object.assign(defaultFormLayouts, this.customFormLayouts);\r\n\r\n    // Corrections\r\n    if(formLayouts.pwd === Layouts.INLINE)\r\n      formLayouts.pwd = Layouts.TAB;\r\n    if(formLayouts.mfaSetup === Layouts.INLINE)\r\n      formLayouts.mfaSetup = Layouts.TAB;\r\n    if(this.googleStyle && formLayouts.mfa === Layouts.INLINE)\r\n      formLayouts.mfa = Layouts.TAB;\r\n\r\n    this.formLayouts = formLayouts;\r\n  }\r\n\r\n  private initTheme() : void\r\n  {\r\n    let theme : string = null;\r\n\r\n    // Theme\r\n    switch(this.googleTheme)\r\n    {\r\n      case Themes.LIGHT :\r\n        theme = this.googleTheme;\r\n        break;\r\n      case Themes.DARK :\r\n        theme = this.googleTheme;\r\n        break;\r\n      default :\r\n        theme = Themes.LIGHT;\r\n        break;\r\n    }\r\n\r\n    this.theme = theme;\r\n  }\r\n\r\n  private initIcons() : void\r\n  {\r\n    let defaultIcons : any = null;\r\n    let icons        : any = null;\r\n\r\n    // Icons\r\n    defaultIcons = {\r\n      iconUsrOnLoginForm : true,\r\n      iconPwdOnLoginForm : true,\r\n    };\r\n\r\n    icons = Object.assign(defaultIcons, this.customIcons);\r\n    this.icons = icons;\r\n  }\r\n\r\n  private initButtons() : void\r\n  {\r\n    let defaultButons : any = null;\r\n    let buttons       : any = null;\r\n\r\n    // Buttons\r\n    defaultButons = {\r\n      forgotPassword : true,\r\n      signUp         : true,\r\n      google         : true,\r\n      facebook       : true\r\n    };\r\n\r\n    buttons = Object.assign(defaultButons, this.customButtons);\r\n    this.buttons = buttons;\r\n  }\r\n\r\n  private initInputs() : void\r\n  {\r\n    let defaultInputs : any = null;\r\n    let inputs        : any = null;\r\n\r\n    // Inputs\r\n    defaultInputs = {\r\n      clearUsrOnLoginForm : true,\r\n      showPwdOnLoginForm  : true,\r\n      showPwdOnPwdForm    : true,\r\n      clearCodeOnPwdForm  : true,\r\n      clearCodeOnMfaForm  : true\r\n    };\r\n\r\n    inputs = Object.assign(defaultInputs, this.customInputs);\r\n    this.inputs = inputs;\r\n  }\r\n\r\n  private initErrors() : void\r\n  {\r\n    let defaultErrors : any = null;\r\n    let errors        : any = null;\r\n\r\n    // Errors\r\n    defaultErrors = {\r\n      login : true,\r\n      pwd   : true,\r\n      mfa   : true\r\n    };\r\n\r\n    errors = Object.assign(defaultErrors, this.customErrors);\r\n    this.errors = errors;\r\n  }\r\n\r\n  private initPolicies() : void\r\n  {\r\n    // NOTE: Password\r\n    let defaultPwdPolicies : any    = null;\r\n    let pwdPolicies        : any    = null;\r\n    let defaultMin         : number = 8;\r\n    let defaultMax         : number = 128;\r\n\r\n    // Password policies\r\n    defaultPwdPolicies = {\r\n      range : {\r\n        min : defaultMin,\r\n        max : defaultMax,\r\n      },\r\n      char   : true,\r\n      number : true,\r\n      lower  : true,\r\n      upper  : true\r\n    };\r\n\r\n    pwdPolicies = Object.assign(defaultPwdPolicies, this.customPwdPolicies);\r\n\r\n    if(pwdPolicies.range.min > pwdPolicies.range.max)\r\n    {\r\n      pwdPolicies.range.min = defaultMin;\r\n      pwdPolicies.range.max = defaultMax;\r\n    }\r\n\r\n    this.pwdPolicies = pwdPolicies;\r\n\r\n    // NOTE: Username\r\n    if(!this.customUsrPolicy)\r\n      return;\r\n\r\n    let validators : any = [];\r\n\r\n    switch(this.customUsrPolicy)\r\n    {\r\n      case UserPolicies.EMAIL :\r\n        validators.push(UsrValidator.email);\r\n        break;\r\n      case UserPolicies.PHONE :\r\n        validators.push(UsrValidator.phone);\r\n        break;\r\n      default :\r\n        let regExp : RegExp = null;\r\n        regExp = new RegExp(this.customUsrPolicy);\r\n        validators.push(UsrValidator.custom(regExp));\r\n        break;\r\n    }\r\n\r\n    validators.push(Validators.required);\r\n    if(this.googleStyle)\r\n      this.usrFormGroup.controls.username.setValidators(validators);\r\n    else\r\n      this.formGroup.controls.username.setValidators(validators);\r\n  }\r\n\r\n  private initLabels() : void\r\n  {\r\n    let defaultLabels : any = {};\r\n    let labels        : any = {};\r\n\r\n    defaultLabels.header = {\r\n      titlePwd         : 'Lost password',\r\n      subtitlePwd      : 'Please enter the confirmation code',\r\n      titlePwdSetup    : 'Password setup',\r\n      subtitlePwdSetup : 'Please enter a new password',\r\n      titleMfa         : 'MFA',\r\n      subtitleMfa      : 'Please enter the confirmation code',\r\n      titleMfaSetup    : 'MFA setup',\r\n      subtitleMfaSetup : 'Save this secret key for future connection'\r\n    };\r\n    defaultLabels.input = {\r\n      username    : 'Username',\r\n      password    : 'Password',\r\n      verifCode   : 'Verification code',\r\n      newPassword : 'New password'\r\n    };\r\n    defaultLabels.button = {\r\n      signIn         : 'Sign in',\r\n      signUp         : 'Sign up',\r\n      next           : 'Next',\r\n      back           : 'Back',\r\n      send           : 'Send',\r\n      save           : 'Save',\r\n      forgotPassword : 'Forgot password',\r\n      googleSignIn   : 'Sign in with Google',\r\n      facebookSignIn : 'Sign in with Facebook'\r\n    };\r\n    defaultLabels.policy = {\r\n      required      : 'This field is required',\r\n      nonWhitespace : 'This value must not contain any spaces',\r\n      email         : 'This value must be an email',\r\n      phone         : 'This value must be a phone number',\r\n      sixDigits     : 'This value must contains six digits',\r\n      customRegex   : 'This value must match the custom regex provided',\r\n      pwdLength     : 'Minimum password length ({{min}} to {{max}})',\r\n      pwdUppercase  : 'Require at least one uppercase letter (A to Z)',\r\n      pwdLowercase  : 'Require at least one lowercase letter (a to z)',\r\n      pwdNumber     : 'Require at least one number (0 to 9)',\r\n      pwdSpecial    : 'Require at least one nonalphanumeric character ! @ # $ % ^ & * ( ) _ + - = [ ] { } | \\''\r\n    };\r\n\r\n    labels = Object.assign(defaultLabels, this.customLabels);\r\n\r\n    this.labels = labels;\r\n  }\r\n\r\n  private initFormGroups() : void\r\n  {\r\n    if(!this.googleStyle)\r\n    {\r\n      this.formGroup = this.builder.group({\r\n        username     : new FormControl({\r\n          value      : null,\r\n          disabled   : false\r\n        },[Validators.required]),\r\n        password     : new FormControl({\r\n          value      : null,\r\n          disabled   : false\r\n        },[Validators.required]),\r\n      });\r\n      return;\r\n    }\r\n\r\n    this.usrFormGroup = this.builder.group({\r\n      username     : new FormControl({\r\n        value      : null,\r\n        disabled   : false\r\n      },[Validators.required])\r\n    });\r\n\r\n    this.pwdFormGroup = this.builder.group({\r\n      password     : new FormControl({\r\n        value      : null,\r\n        disabled   : false\r\n      },[Validators.required])\r\n    });\r\n  }\r\n\r\n}\r\n","// Angular modules\r\nimport { Component }    from '@angular/core';\r\nimport { OnInit }       from '@angular/core';\r\nimport { OnDestroy }    from '@angular/core';\r\nimport { Input }        from '@angular/core';\r\nimport { Output }       from '@angular/core';\r\nimport { EventEmitter } from '@angular/core';\r\n\r\n// Enum\r\nimport { Forms }        from '../../enums/forms.enum';\r\n\r\n@Component({\r\n  selector    : 'cal-tab-wrapper',\r\n  template: `<div class=\"header py-2 px-4 mb-3\">\r\n  <div class=\"row align-items-center\">\r\n    <div class=\"col-2 px-0 text-left\">\r\n      <button mat-icon-button (click)=\"backToLogin()\">\r\n        <mat-icon>arrow_back</mat-icon>\r\n      </button>\r\n    </div>\r\n    <div class=\"col text-right\">\r\n      <div *ngIf=\"!isFirst && formType === forms.PWD\">\r\n        <span class=\"h5 font-weight-light {{ labels.header.subtitlePwd ? 'd-block mb-0' : '' }}\">\r\n          {{ labels.header.titlePwd }}\r\n        </span>\r\n        <span *ngIf=\"labels.header.subtitlePwd\" class=\"d-block font-weight-light small\">\r\n          {{ labels.header.subtitlePwd }}\r\n        </span>\r\n      </div>\r\n      <div *ngIf=\"isFirst && formType === forms.PWD\">\r\n        <span class=\"h5 font-weight-light {{ labels.header.subtitlePwdSetup ? 'd-block mb-0' : '' }}\">\r\n          {{ labels.header.titlePwdSetup }}\r\n        </span>\r\n        <span *ngIf=\"labels.header.subtitlePwdSetup\" class=\"d-block font-weight-light small\">\r\n          {{ labels.header.subtitlePwdSetup }}\r\n        </span>\r\n      </div>\r\n      <div *ngIf=\"formType === forms.MFA\">\r\n        <span class=\"h5 font-weight-light {{ labels.header.subtitleMfa ? 'd-block mb-0' : '' }}\">\r\n          {{ labels.header.titleMfa }}\r\n        </span>\r\n        <span *ngIf=\"labels.header.subtitleMfa\" class=\"d-block font-weight-light small\">\r\n          {{ labels.header.subtitleMfa }}\r\n        </span>\r\n      </div>\r\n      <div *ngIf=\"formType === forms.MFA_SETUP\">\r\n        <span class=\"h5 font-weight-light {{ labels.header.subtitleMfaSetup ? 'd-block mb-0' : '' }}\">\r\n          {{ labels.header.titleMfaSetup }}\r\n        </span>\r\n        <span *ngIf=\"labels.header.subtitleMfaSetup\" class=\"d-block font-weight-light small\">\r\n          {{ labels.header.subtitleMfaSetup }}\r\n        </span>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n<!-- NOTE: Pwd Form -->\r\n<cal-pwd-form *ngIf=\"formType === forms.PWD\" \r\n  [isFirst]=\"isFirst\" \r\n  [pwdPolicies]=\"pwdPolicies\" \r\n  [labels]=\"labels\" \r\n  [inputs]=\"inputs\" \r\n  [errors]=\"errors\" \r\n  (firstConnection)=\"relayFirstLogEvent($event)\" \r\n  (lostPassword)=\"relayLostPwdEvent($event)\">\r\n</cal-pwd-form>\r\n<!-- NOTE: MFA Setup Form -->\r\n<cal-mfa-setup-form *ngIf=\"formType === forms.MFA_SETUP\" \r\n  [qrCode]=\"qrCode\" \r\n  [code]  =\"code\" \r\n  [labels]=\"labels\" \r\n  [inputs]=\"inputs\" \r\n  [errors]=\"errors\" \r\n  (saveMfa)=\"relaySaveMfaKeyEvent($event)\">\r\n</cal-mfa-setup-form>\r\n<!-- NOTE: MFA Form -->\r\n<cal-mfa-form *ngIf=\"formType === forms.MFA\" \r\n  [labels]=\"labels\" \r\n  [inputs]=\"inputs\" \r\n  [errors]=\"errors\" \r\n  (sendMfa)=\"relaySendMfaCodeEvent($event)\">\r\n</cal-mfa-form>`,\r\n  styles: [`.header{color:#fff;background:#5eacff}`]\r\n})\r\nexport class TabWrapperComponent implements OnInit, OnDestroy\r\n{\r\n  // NOTE: Useful for template\r\n  public    forms = Forms;\r\n\r\n  // NOTE: Common\r\n  // Form type (password / mfa)\r\n  @Input()  formType      : string;\r\n  // Labels\r\n  @Input()  labels        : any;\r\n  // Errors\r\n  @Input()  errors        : any;\r\n  // Inputs\r\n  @Input()  inputs        : any;\r\n  // Event sent from tab\r\n  @Output() sendCloseTab  : EventEmitter<boolean> = new EventEmitter();\r\n\r\n  // NOTE: Password\r\n  // First connection or Forgot password\r\n  @Input()  isFirst       : boolean;\r\n  // Password policies\r\n  @Input()  pwdPolicies   : any;\r\n  // Event sent from password form\r\n  @Output() relayFirstLog : EventEmitter<any> = new EventEmitter();\r\n  @Output() relayLostPwd  : EventEmitter<any> = new EventEmitter();\r\n\r\n  // NOTE: MFA setup\r\n  // MFA secret key\r\n  @Input()  code            : string;\r\n  @Input()  qrCode          : string;\r\n  // Event sent from mfa setup form\r\n  @Output() relaySaveMfaKey : EventEmitter<any> = new EventEmitter();\r\n\r\n  // NOTE: MFA\r\n  // Event sent from mfa form\r\n  @Output() relaySendMfaCode : EventEmitter<any> = new EventEmitter();\r\n\r\n  constructor\r\n  (\r\n  )\r\n  {\r\n  }\r\n\r\n  public ngOnInit() : void\r\n  {\r\n  }\r\n\r\n  public ngOnDestroy() : void\r\n  {\r\n  }\r\n\r\n  public backToLogin() : void\r\n  {\r\n    this.sendCloseTab.emit();\r\n  }\r\n\r\n  public relayFirstLogEvent($event : any) : void\r\n  {\r\n    this.relayFirstLog.emit($event);\r\n  }\r\n\r\n  public relayLostPwdEvent($event : any) : void\r\n  {\r\n    this.relayLostPwd.emit($event);\r\n  }\r\n\r\n  public relaySaveMfaKeyEvent($event : any) : void\r\n  {\r\n    this.relaySaveMfaKey.emit($event);\r\n  }\r\n\r\n  public relaySendMfaCodeEvent($event : any) : void\r\n  {\r\n    this.relaySendMfaCode.emit($event);\r\n  }\r\n}\r\n","import { FormControl }     from '@angular/forms';\r\nimport { AbstractControl } from '@angular/forms';\r\nimport { ValidatorFn }     from '@angular/forms';\r\n\r\nexport interface ValidationResult\r\n{\r\n  [key : string] : boolean;\r\n}\r\n\r\nexport class PwdValidator\r\n{\r\n  public static longEnough(min : number, max : number) : ValidatorFn\r\n  {\r\n    let func = (control : AbstractControl) : { [key : string] : boolean } | null =>\r\n    {\r\n      let isLongEnough = control.value !== null && control.value.length >= min && control.value.length <= max;\r\n      if ( !isLongEnough )\r\n        return { longEnough: true };\r\n\r\n      return null;\r\n    };\r\n    return func;\r\n  }\r\n\r\n  public static number(control : FormControl) : ValidationResult\r\n  {\r\n    let hasNumber = control.value !== null && /\\d/.test(control.value);\r\n    if ( !hasNumber )\r\n      return { number: true };\r\n\r\n    return null;\r\n  }\r\n\r\n  public static upper(control : FormControl) : ValidationResult\r\n  {\r\n    let hasUpper = control.value !== null && /[A-Z]/.test(control.value);\r\n    if ( !hasUpper )\r\n      return { upper: true };\r\n\r\n    return null;\r\n  }\r\n\r\n  public static lower(control : FormControl) : ValidationResult\r\n  {\r\n    let hasLower = control.value !== null && /[a-z]/.test(control.value);\r\n    if ( !hasLower )\r\n      return { lower: true };\r\n\r\n    return null;\r\n  }\r\n\r\n  public static char(control : FormControl) : ValidationResult\r\n  {\r\n    let hasChar = control.value !== null && /[!@#$%^&\\*()_+\\-=\\[\\]{}|']/.test(control.value);\r\n    if ( !hasChar )\r\n      return { char: true };\r\n\r\n    return null;\r\n  }\r\n}\r\n","// Angular modules\r\nimport { OnInit }        from '@angular/core';\r\nimport { OnChanges }     from '@angular/core';\r\nimport { SimpleChanges } from '@angular/core';\r\nimport { Component }     from '@angular/core';\r\nimport { OnDestroy }     from '@angular/core';\r\nimport { Input }         from '@angular/core';\r\nimport { Output }        from '@angular/core';\r\nimport { EventEmitter }  from '@angular/core';\r\nimport { FormControl }   from '@angular/forms';\r\nimport { FormGroup }     from '@angular/forms';\r\nimport { FormBuilder }   from '@angular/forms';\r\nimport { Validators }    from '@angular/forms';\r\n\r\n// Internal modules\r\nimport { PwdValidator }  from '../../validators/pwd.validator';\r\n\r\n@Component({\r\n  selector    : 'cal-pwd-form',\r\n  template: `<!-- NOTE: <form autocomplete=\"off\"> will turn off autocomplete for the form in most browsers\r\n     except for username/email/password fields -->\r\n<form (ngSubmit)=\"send()\" [formGroup]=\"formGroup\" autocomplete=\"off\">\r\n\r\n  <!-- NOTE: fake fields are a workaround for chrome/opera autofill getting the wrong fields -->\r\n  <input id=\"username\" style=\"display:none\" type=\"text\" name=\"fakeusernameremembered\">\r\n  <input id=\"password\" style=\"display:none\" type=\"password\" name=\"fakepasswordremembered\">\r\n\r\n  <div class=\"row w-100 no-gutters\" *ngIf=\"!isFirst\">\r\n    <div class=\"col\">\r\n      <mat-form-field class=\"w-100\">\r\n        <!-- NOTE: <input autocomplete=\"nope\"> turns off autocomplete on many other browsers that don't respect\r\n          the form's \"off\", but not for \"password\" inputs. -->\r\n        <input matInput formControlName=\"verifCode\" \r\n          name=\"verif-code\" autocomplete=\"nope\" \r\n          placeholder=\"{{ labels.input.verifCode }}\" \r\n          pattern=\"\\\\d{6}\" \r\n          type=\"text\"/> <!-- NOTE: Pattern matches any non-whitespace character -->\r\n        <button *ngIf=\"formGroup.controls.verifCode.valid && inputs.clearCodeOnPwdForm\" \r\n          mat-button matSuffix mat-icon-button aria-label=\"Clear\" \r\n          color=\"primary\" (click)=\"formGroup.controls.verifCode.setValue('')\" \r\n          type=\"button\">\r\n          <mat-icon>close</mat-icon>\r\n        </button>\r\n        <!-- NOTE: Error messages -->\r\n        <mat-hint align=\"start\" *ngIf=\"formGroup.controls.verifCode.errors?.required && errors.pwd\">\r\n          {{ labels.policy.required }}\r\n        </mat-hint>\r\n        <mat-hint align=\"start\" *ngIf=\"formGroup.controls.verifCode.errors?.pattern && errors.pwd\">\r\n          {{ labels.policy.sixDigits }}\r\n        </mat-hint>\r\n      </mat-form-field>\r\n    </div>\r\n  </div>\r\n  <!-- NOTE: <input type=\"password\" autocomplete=\"new-password\" will turn it off for passwords everywhere -->\r\n  <div class=\"row w-100 no-gutters\">\r\n    <div class=\"col\">\r\n      <mat-form-field class=\"w-100\">\r\n        <input matInput formControlName=\"newPassword\" \r\n          name=\"new-password\" autocomplete=\"new-password\" \r\n          placeholder=\"{{ labels.input.newPassword }}\" \r\n          type=\"{{ showPassword ? 'text' : 'password' }}\"/>\r\n        <button *ngIf=\"inputs.showPwdOnPwdForm\" \r\n          mat-button matSuffix mat-icon-button aria-label=\"Clear\" \r\n          color=\"primary\" (click)=\"showPassword=!showPassword\" \r\n          type=\"button\">\r\n          <mat-icon>{{ showPassword ? 'visibility_off' : 'visibility' }}</mat-icon>\r\n        </button>\r\n        <!-- NOTE: Error message -->\r\n        <mat-hint align=\"start\" *ngIf=\"formGroup.controls.newPassword.errors?.required && errors.pwd\">\r\n          {{ labels.policy.required }}\r\n        </mat-hint>\r\n      </mat-form-field>\r\n    </div>\r\n  </div>\r\n  <div class=\"row w-100 no-gutters\">\r\n    <div class=\"col\">\r\n      <ul class=\"list-unstyled small\">\r\n        <li class=\"check-policy\">\r\n          <mat-icon class=\"red-policy\" *ngIf=\"formGroup.controls.newPassword.errors && formGroup.controls.newPassword.errors.longEnough\">close</mat-icon>\r\n          <mat-icon class=\"green-policy\" *ngIf=\"!formGroup.controls.newPassword.errors || !formGroup.controls.newPassword.errors.longEnough\">check</mat-icon>\r\n          {{ labels.policy.pwdLengthReplaced }}\r\n        </li>\r\n        <li class=\"check-policy\" *ngIf=\"pwdPolicies.upper\">\r\n          <mat-icon class=\"red-policy\" *ngIf=\"formGroup.controls.newPassword.errors && formGroup.controls.newPassword.errors.upper\">close</mat-icon>\r\n          <mat-icon class=\"green-policy\" *ngIf=\"!formGroup.controls.newPassword.errors || !formGroup.controls.newPassword.errors.upper\">check</mat-icon>\r\n          {{ labels.policy.pwdUppercase }}\r\n        </li>\r\n        <li class=\"check-policy\" *ngIf=\"pwdPolicies.lower\">\r\n          <mat-icon class=\"red-policy\" *ngIf=\"formGroup.controls.newPassword.errors && formGroup.controls.newPassword.errors.lower\">close</mat-icon>\r\n          <mat-icon class=\"green-policy\" *ngIf=\"!formGroup.controls.newPassword.errors || !formGroup.controls.newPassword.errors.lower\">check</mat-icon>\r\n          {{ labels.policy.pwdLowercase }}\r\n        </li>\r\n        <li class=\"check-policy\" *ngIf=\"pwdPolicies.number\">\r\n          <mat-icon class=\"red-policy\" *ngIf=\"formGroup.controls.newPassword.errors && formGroup.controls.newPassword.errors.number\">close</mat-icon>\r\n          <mat-icon class=\"green-policy\" *ngIf=\"!formGroup.controls.newPassword.errors || !formGroup.controls.newPassword.errors.number\">check</mat-icon>\r\n          {{ labels.policy.pwdNumber }}\r\n        </li>\r\n        <li class=\"check-policy\" *ngIf=\"pwdPolicies.char\">\r\n          <mat-icon class=\"red-policy\" *ngIf=\"formGroup.controls.newPassword.errors && formGroup.controls.newPassword.errors.char\">close</mat-icon>\r\n          <mat-icon class=\"green-policy\" *ngIf=\"!formGroup.controls.newPassword.errors || !formGroup.controls.newPassword.errors.char\">check</mat-icon>\r\n          {{ labels.policy.pwdSpecial }}\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  </div>\r\n  <!-- TODO: Enable Google Captcha -->\r\n  <!-- <div class=\"row w-100 no-gutters\">\r\n    <div class=\"col\">\r\n      <re-captcha site_key=\"6LdBtAkUAAAAAB2_l_TOz7oZmTLXaFjP1cxnu4yM\"\r\n        (captchaResponse)=\"handleCorrectCaptcha($event)\">\r\n      </re-captcha>\r\n    </div>\r\n  </div> -->\r\n  <div class=\"pt-0 pb-4 px-4\">\r\n    <div class=\"row w-100 no-gutters\">\r\n      <div class=\"col text-right\">\r\n        <button color=\"primary\" mat-raised-button class=\"small text-uppercase\" type=\"submit\" [disabled]=\"!formGroup.valid\">\r\n          {{ labels.button.send }}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</form>`,\r\n  styles: [`.green-policy{color:green}.red-policy{color:red}.check-policy{display:flex;align-items:center}.check-policy .mat-icon{margin-right:4px;font-size:22px;height:22px;width:22px}`]\r\n})\r\nexport class PwdFormComponent implements OnInit, OnChanges, OnDestroy\r\n{\r\n  public    formGroup    : FormGroup;\r\n  public    showPassword : boolean = false;\r\n  // public captchaToken : string; // TODO:\r\n\r\n  // Labels\r\n  @Input()  labels       : any;\r\n  // Errors\r\n  @Input()  errors       : any;\r\n  // Inputs\r\n  @Input()  inputs       : any;\r\n\r\n  // First connection or Forgot password\r\n  @Input()  isFirst      : boolean;\r\n  // Password policies\r\n  @Input()  pwdPolicies  : any;\r\n  // Event sent to the login form and relayed parents (modal & tab)\r\n  @Output() firstConnection : EventEmitter<any> = new EventEmitter();\r\n  @Output() lostPassword    : EventEmitter<any> = new EventEmitter();\r\n\r\n  constructor\r\n  (\r\n    private builder : FormBuilder\r\n  )\r\n  {\r\n  }\r\n\r\n  public ngOnInit() : void\r\n  {\r\n    this.initFormGroups();\r\n  }\r\n\r\n  public ngOnChanges(changes : SimpleChanges) : void\r\n  {\r\n    if(changes.pwdPolicies)\r\n      this.initFormGroups(true);\r\n  }\r\n\r\n  public ngOnDestroy() : void\r\n  {\r\n  }\r\n\r\n  public send() : void\r\n  {\r\n    let event : any = {};\r\n\r\n    let verifCode   : string = null;\r\n    let newPassword : string = null;\r\n\r\n    verifCode       = this.formGroup.controls.verifCode.value;\r\n    newPassword     = this.formGroup.controls.newPassword.value;\r\n\r\n    event.password = newPassword;\r\n\r\n    // First connection\r\n    if(this.isFirst)\r\n    {\r\n      this.firstConnection.emit(event);\r\n      return;\r\n    }\r\n\r\n    event.code = verifCode;\r\n    // Lost password\r\n    this.lostPassword.emit(event);\r\n  }\r\n\r\n  private initFormGroups(refresh : boolean = false) : void\r\n  {\r\n    let verifCode   : string = null;\r\n    let newPassword : string = null;\r\n\r\n    if(refresh && this.formGroup)\r\n    {\r\n      verifCode   = this.formGroup.controls.verifCode.value;\r\n      newPassword = this.formGroup.controls.newPassword.value;\r\n    }\r\n\r\n    let validators : any = [];\r\n\r\n    if(this.pwdPolicies.char)\r\n      validators.push(PwdValidator.char);\r\n    if(this.pwdPolicies.number)\r\n      validators.push(PwdValidator.number);\r\n    if(this.pwdPolicies.upper)\r\n      validators.push(PwdValidator.upper);\r\n    if(this.pwdPolicies.lower)\r\n      validators.push(PwdValidator.lower);\r\n\r\n    validators.push(Validators.required);\r\n    validators.push(PwdValidator.longEnough(this.pwdPolicies.range.min, this.pwdPolicies.range.max));\r\n\r\n    // Refresh min max label\r\n    let rangeLabel : string = null;\r\n    rangeLabel = this.labels.policy.pwdLength;\r\n    rangeLabel = rangeLabel.replace(/{{min}}/, this.pwdPolicies.range.min);\r\n    rangeLabel = rangeLabel.replace(/{{max}}/, this.pwdPolicies.range.max);\r\n    this.labels.policy.pwdLengthReplaced = rangeLabel;\r\n\r\n    this.formGroup = this.builder.group({\r\n      verifCode    : new FormControl({\r\n        value      : verifCode,\r\n        disabled   : false\r\n      }),\r\n      newPassword  : new FormControl({\r\n        value      : newPassword,\r\n        disabled   : false\r\n      }, validators),\r\n    });\r\n\r\n    if(!this.isFirst)\r\n      this.formGroup.controls.verifCode.setValidators([Validators.required]);\r\n  }\r\n\r\n}\r\n","// Angular modules\r\nimport { OnInit }       from '@angular/core';\r\nimport { Component }    from '@angular/core';\r\nimport { OnDestroy }    from '@angular/core';\r\nimport { Input }        from '@angular/core';\r\nimport { Output }       from '@angular/core';\r\nimport { EventEmitter } from '@angular/core';\r\nimport { FormControl }  from '@angular/forms';\r\nimport { FormGroup }    from '@angular/forms';\r\nimport { FormBuilder }  from '@angular/forms';\r\nimport { Validators }   from '@angular/forms';\r\n\r\n@Component({\r\n  selector    : 'cal-mfa-setup-form',\r\n  template: `<div class=\"code text-center\">\r\n  <qrcode [qrdata]=\"qrCode\" [size]=\"100\" [level]=\"'L'\"></qrcode>\r\n  <p class=\"my-3\">{{ code }}</p>\r\n</div>\r\n<form (ngSubmit)=\"send()\" [formGroup]=\"formGroup\" autocomplete=\"off\">\r\n  <mat-form-field class=\"w-100\">\r\n    <input matInput formControlName=\"verifCode\" \r\n      name=\"verifCode\" placeholder=\"{{ labels.input.verifCode }}\" \r\n      pattern=\"\\\\d{6}\" \r\n      type=\"text\"/> <!-- NOTE: Pattern matches 6 digits -->\r\n    <button *ngIf=\"formGroup.controls.verifCode.valid && inputs.clearCodeOnMfaForm\" \r\n      mat-button matSuffix mat-icon-button aria-label=\"Clear\" \r\n      color=\"primary\" (click)=\"formGroup.controls.verifCode.setValue('')\" \r\n      type=\"button\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n    <!-- NOTE: Error messages -->\r\n    <mat-hint align=\"start\" *ngIf=\"formGroup.controls.verifCode.errors?.required && errors.mfa\">\r\n      {{ labels.policy.required }}\r\n    </mat-hint>\r\n    <mat-hint align=\"start\" *ngIf=\"formGroup.controls.verifCode.errors?.pattern && errors.mfa\">\r\n      {{ labels.policy.sixDigits }}\r\n    </mat-hint>\r\n  </mat-form-field>\r\n  <div class=\"row w-100 no-gutters\">\r\n    <div class=\"col text-right\">\r\n      <button color=\"primary\" mat-raised-button class=\"small text-uppercase\" type=\"submit\" [disabled]=\"!formGroup.valid\">\r\n        {{ labels.button.save }}\r\n      </button>\r\n    </div>\r\n  </div>\r\n</form>`,\r\n  styles: [`.code{display:flex;flex-direction:column;align-items:center}`]\r\n})\r\nexport class MfaSetupFormComponent implements OnInit, OnDestroy\r\n{\r\n  public    formGroup      : FormGroup;\r\n\r\n  // Labels\r\n  @Input()  labels         : any;\r\n  // Errors\r\n  @Input()  errors         : any;\r\n  // Inputs\r\n  @Input()  inputs         : any;\r\n\r\n  // MFA secret key\r\n  @Input()  qrCode         : string;\r\n  @Input()  code           : string;\r\n  // Event sent to the login form and relayed parents (modal & tab)\r\n  @Output() saveMfa        : EventEmitter<any> = new EventEmitter();\r\n\r\n  constructor\r\n  (\r\n    private builder : FormBuilder\r\n  )\r\n  {\r\n  }\r\n\r\n  public ngOnInit() : void\r\n  {\r\n    this.initFormGroups();\r\n  }\r\n\r\n  public ngOnDestroy() : void\r\n  {\r\n  }\r\n\r\n  public send() : void\r\n  {\r\n    let event : any = {};\r\n\r\n    let verifCode : string = null;\r\n\r\n    verifCode = this.formGroup.controls.verifCode.value;\r\n\r\n    event.code = verifCode;\r\n\r\n    this.saveMfa.emit(event);\r\n  }\r\n\r\n  private initFormGroups() : void\r\n  {\r\n    this.formGroup = this.builder.group({\r\n      verifCode : new FormControl({\r\n        value      : null,\r\n        disabled   : false\r\n      }, [ Validators.required ]),\r\n    });\r\n  }\r\n\r\n}\r\n","// Angular modules\r\nimport { OnInit }       from '@angular/core';\r\nimport { Component }    from '@angular/core';\r\nimport { OnDestroy }    from '@angular/core';\r\nimport { Input }        from '@angular/core';\r\nimport { Output }       from '@angular/core';\r\nimport { EventEmitter } from '@angular/core';\r\nimport { FormControl }  from '@angular/forms';\r\nimport { FormGroup }    from '@angular/forms';\r\nimport { FormBuilder }  from '@angular/forms';\r\nimport { Validators }   from '@angular/forms';\r\n\r\n@Component({\r\n  selector    : 'cal-mfa-form',\r\n  template: `<form (ngSubmit)=\"send()\" [formGroup]=\"formGroup\" autocomplete=\"off\">\r\n  <mat-form-field class=\"w-100\">\r\n    <input matInput formControlName=\"verifCode\" \r\n      name=\"verifCode\" placeholder=\"{{ labels.input.verifCode }}\" \r\n      pattern=\"\\\\d{6}\" \r\n      type=\"text\"/> <!-- NOTE: Pattern matches 6 digits -->\r\n    <button *ngIf=\"formGroup.controls.verifCode.valid && inputs.clearCodeOnMfaForm\" \r\n      mat-button matSuffix mat-icon-button aria-label=\"Clear\" \r\n      color=\"primary\" (click)=\"formGroup.controls.verifCode.setValue('')\" \r\n      type=\"button\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n    <!-- NOTE: Error messages -->\r\n    <mat-hint align=\"start\" *ngIf=\"formGroup.controls.verifCode.errors?.required && errors.mfa\">\r\n      {{ labels.policy.required }}\r\n    </mat-hint>\r\n    <mat-hint align=\"start\" *ngIf=\"formGroup.controls.verifCode.errors?.pattern && errors.mfa\">\r\n      {{ labels.policy.sixDigits }}\r\n    </mat-hint>\r\n  </mat-form-field>\r\n  <div class=\"row w-100 no-gutters\">\r\n    <div class=\"col text-right\">\r\n      <button color=\"primary\" mat-raised-button class=\"small text-uppercase\" type=\"submit\" [disabled]=\"!formGroup.valid\">\r\n        {{ labels.button.send }}\r\n      </button>\r\n    </div>\r\n  </div>\r\n</form>`,\r\n  styles: [``]\r\n})\r\nexport class MfaFormComponent implements OnInit, OnDestroy\r\n{\r\n  public    formGroup    : FormGroup;\r\n\r\n  // Labels\r\n  @Input()  labels       : any;\r\n  // Errors\r\n  @Input()  errors       : any;\r\n  // Inputs\r\n  @Input()  inputs       : any;\r\n\r\n  // Event sent to the login form and relayed parents (modal & tab)\r\n  @Output() sendMfa      : EventEmitter<any> = new EventEmitter();\r\n\r\n  constructor\r\n  (\r\n    private builder : FormBuilder\r\n  )\r\n  {\r\n  }\r\n\r\n  public ngOnInit() : void\r\n  {\r\n    this.initFormGroups();\r\n  }\r\n\r\n  public ngOnDestroy() : void\r\n  {\r\n  }\r\n\r\n  public send() : void\r\n  {\r\n    let event     : any    = {};\r\n    let verifCode : string = null;\r\n\r\n    verifCode  = this.formGroup.controls.verifCode.value;\r\n    event.code = verifCode;\r\n    this.sendMfa.emit(event);\r\n  }\r\n\r\n  private initFormGroups() : void\r\n  {\r\n    this.formGroup = this.builder.group({\r\n      verifCode : new FormControl({\r\n        value      : null,\r\n        disabled   : false\r\n      }, [ Validators.required ]),\r\n    });\r\n  }\r\n\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Pipe }          from '@angular/core';\r\nimport { PipeTransform } from '@angular/core';\r\n\r\n@Pipe({ name: 'existsLayout' })\r\nexport class ExistsLayoutPipe implements PipeTransform\r\n{\r\n  transform(value : any, layout : string)\r\n  {\r\n    let exist : boolean = false;\r\n    for ( let key of Object.keys(value) )\r\n      if ( value[key] === layout )\r\n        exist = true;\r\n\r\n    return exist;\r\n  }\r\n}\r\n","// Angular modules\r\nimport { NgModule }                 from '@angular/core';\r\nimport { CommonModule }             from '@angular/common';\r\nimport { FormsModule }              from '@angular/forms';\r\nimport { ReactiveFormsModule }      from '@angular/forms';\r\n\r\n// Material modules\r\n// import { MatProgressSpinnerModule } from '@angular/material';\r\n// import { MatTableModule }           from '@angular/material';\r\n// import { MatSortModule }            from '@angular/material';\r\nimport { MatButtonModule }          from '@angular/material';\r\n// import { MatChipsModule }           from '@angular/material';\r\n// import { MatCheckboxModule }        from '@angular/material';\r\n// import { MatRadioModule }           from '@angular/material';\r\n// import { MatSelectModule }          from '@angular/material';\r\n// import { MatSlideToggleModule }     from '@angular/material';\r\n// import { MatMenuModule }            from '@angular/material';\r\n// import { MatSidenavModule }         from '@angular/material';\r\n// import { MatToolbarModule }         from '@angular/material';\r\n// import { MatGridListModule }        from '@angular/material';\r\n// import { MatTooltipModule }         from '@angular/material';\r\n// import { MatCardModule }            from '@angular/material';\r\nimport { MatIconModule }            from '@angular/material';\r\n// import { MatProgressBarModule }     from '@angular/material';\r\n// import { MatListModule }            from '@angular/material';\r\nimport { MatInputModule }           from '@angular/material';\r\n// import { MatDatepickerModule }      from '@angular/material';\r\n// import { MatNativeDateModule }      from '@angular/material';\r\nimport { MatTabsModule }            from '@angular/material';\r\n// import { MatAutocompleteModule }    from '@angular/material';\r\n// import { MatStepperModule }         from '@angular/material';\r\n// import { MatPaginatorModule }       from '@angular/material';\r\nimport { MatDialogModule }          from '@angular/material';\r\n// import { MatSnackBarModule }        from '@angular/material';\r\n// import { MatExpansionModule }       from '@angular/material';\r\n\r\n// Internal modules\r\nimport { LoginFormComponent }       from './login-form.component';\r\nimport { ModalWrapperComponent }    from './layouts/modal-wrapper/modal-wrapper.component';\r\nimport { TabWrapperComponent }      from './layouts/tab-wrapper/tab-wrapper.component';\r\nimport { PwdFormComponent }         from './forms/pwd-form/pwd-form.component';\r\nimport { MfaSetupFormComponent }    from './forms/mfa-setup-form/mfa-setup-form.component';\r\nimport { MfaFormComponent }         from './forms/mfa-form/mfa-form.component';\r\nimport { ExistsLayoutPipe }         from './pipes/exists-layout.pipe';\r\n\r\n// External modules\r\nimport { QRCodeModule }             from 'angularx-qrcode';\r\n\r\n// NgModule that includes all Material modules that are required to serve the app.\r\n@NgModule({\r\n  exports: [\r\n    // Material modules\r\n    // MatTableModule,\r\n    MatButtonModule,\r\n    // MatChipsModule,\r\n    // MatCheckboxModule,\r\n    MatInputModule,\r\n    // MatRadioModule,\r\n    // MatSelectModule,\r\n    // MatSlideToggleModule,\r\n    // MatMenuModule,\r\n    // MatSidenavModule,\r\n    // MatToolbarModule,\r\n    // MatListModule,\r\n    // MatGridListModule,\r\n    // MatCardModule,\r\n    MatIconModule,\r\n    // MatProgressBarModule,\r\n    MatDialogModule,\r\n    // MatSnackBarModule,\r\n    // MatDatepickerModule,\r\n    // MatNativeDateModule,\r\n    // MatProgressSpinnerModule,\r\n    // MatDatepickerModule,\r\n    MatTabsModule,\r\n    // MatAutocompleteModule,\r\n    // MatExpansionModule,\r\n    // MatTooltipModule,\r\n  ]\r\n})\r\nexport class MaterialModule {}\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MaterialModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    QRCodeModule\r\n  ],\r\n  declarations: [\r\n    LoginFormComponent,\r\n    PwdFormComponent,\r\n    ModalWrapperComponent,\r\n    TabWrapperComponent,\r\n    MfaSetupFormComponent,\r\n    MfaFormComponent,\r\n    ExistsLayoutPipe\r\n  ],\r\n  providers: [\r\n  ],\r\n  entryComponents: [ ModalWrapperComponent ],\r\n  exports: [\r\n    LoginFormComponent,\r\n    PwdFormComponent,\r\n    ModalWrapperComponent,\r\n    TabWrapperComponent,\r\n    MfaSetupFormComponent,\r\n    MfaFormComponent,\r\n    ExistsLayoutPipe\r\n  ]\r\n})\r\nexport class LoginFormModule { }\r\n"],"names":["EventEmitter","Component","MatDialogRef","Inject","MAT_DIALOG_DATA","Validators","FormControl","MatDialog","DomSanitizer","MatIconRegistry","FormBuilder","Input","Output","tslib_1.__values","Pipe","NgModule","MatButtonModule","MatInputModule","MatIconModule","MatDialogModule","MatTabsModule","CommonModule","FormsModule","ReactiveFormsModule","QRCodeModule"],"mappings":"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"}
