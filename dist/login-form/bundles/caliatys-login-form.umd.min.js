!function(o,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/core"),require("@angular/material"),require("@angular/platform-browser"),require("@angular/forms"),require("@angular/common"),require("angularx-qrcode")):"function"==typeof define&&define.amd?define("@caliatys/login-form",["exports","@angular/core","@angular/material","@angular/platform-browser","@angular/forms","@angular/common","angularx-qrcode"],t):t((o.caliatys=o.caliatys||{},o.caliatys["login-form"]={}),o.ng.core,o.ng.material,o.ng.platformBrowser,o.ng.forms,o.ng.common,null)}(this,function(o,r,t,e,s,n,i){"use strict";var a=function(){function o(){}return o.custom=function(t){return function(o){return null!==o.value&&t.test(o.value)?null:{custom:!0}}},o.email=function(o){return null!==o.value&&/[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,4}/.test(o.value)?null:{email:!0}},o.phone=function(o){return null!==o.value&&/^\+?\d*$/.test(o.value)?null:{phone:!0}},o}(),l={MODAL:"modal",TAB:"tab",INLINE:"inline"},c="light",u="dark",p={PWD:"pwd",MFA_SETUP:"mfaSetup",MFA:"mfa"},m={EMAIL:"email",PHONE:"phone"},d=function(){function o(o,t){this.dialogRef=o,this.data=t,this.forms=p,this.relayFirstLog=new r.EventEmitter,this.relayLostPwd=new r.EventEmitter,this.relaySaveMfaKey=new r.EventEmitter,this.relaySendMfaCode=new r.EventEmitter,this.loadParams()}return o.prototype.ngOnInit=function(){},o.prototype.ngOnDestroy=function(){this.closeSub&&this.closeSub.unsubscribe()},o.prototype.relayFirstLogEvent=function(o){this.relayFirstLog.emit(o)},o.prototype.relayLostPwdEvent=function(o){this.relayLostPwd.emit(o)},o.prototype.relaySaveMfaKeyEvent=function(o){this.relaySaveMfaKey.emit(o)},o.prototype.relaySendMfaCodeEvent=function(o){this.relaySendMfaCode.emit(o)},o.prototype.loadParams=function(){var o,t=this;null!==(o=this.data)&&(this.formType=o.formType,this.labels=o.labels,this.errors=o.errors,this.inputs=o.inputs,this.isFirst=o.isFirst,this.pwdPolicies=o.pwdPolicies,this.code=o.code,this.qrCode=o.qrCode,this.closeSub=o.closeEvent.subscribe(function(o){t.dialogRef.close()}))},o.decorators=[{type:r.Component,args:[{selector:"cal-modal-wrapper",template:'<div class="header py-2 px-4">\n  <div class="row align-items-center">\n    <div class="col">\n      <div *ngIf="!isFirst && formType === forms.PWD">\n        <span class="h5 font-weight-light {{ labels.header.subtitlePwd ? \'d-block mb-0\' : \'\' }}">\n          {{ labels.header.titlePwd }}\n        </span>\n        <span *ngIf="labels.header.subtitlePwd" class="d-block font-weight-light small">\n          {{ labels.header.subtitlePwd }}\n        </span>\n      </div>\n      <div *ngIf="isFirst && formType === forms.PWD">\n        <span class="h5 font-weight-light {{ labels.header.subtitlePwdSetup ? \'d-block mb-0\' : \'\' }}">\n          {{ labels.header.titlePwdSetup }}\n        </span>\n        <span *ngIf="labels.header.subtitlePwdSetup" class="d-block font-weight-light small">\n          {{ labels.header.subtitlePwdSetup }}\n        </span>\n      </div>\n      <div *ngIf="formType === forms.MFA">\n        <span class="h5 font-weight-light {{ labels.header.subtitleMfa ? \'d-block mb-0\' : \'\' }}">\n          {{ labels.header.titleMfa }}\n        </span>\n        <span *ngIf="labels.header.subtitleMfa" class="d-block font-weight-light small">\n          {{ labels.header.subtitleMfa }}\n        </span>\n      </div>\n      <div *ngIf="formType === forms.MFA_SETUP">\n        <span class="h5 font-weight-light {{ labels.header.subtitleMfaSetup ? \'d-block mb-0\' : \'\' }}">\n          {{ labels.header.titleMfaSetup }}\n        </span>\n        <span *ngIf="labels.header.subtitleMfaSetup" class="d-block font-weight-light small">\n          {{ labels.header.subtitleMfaSetup }}\n        </span>\n      </div>\n    </div>\n    <div class="col-2 px-0 text-right">\n      <button mat-icon-button mat-dialog-close>\n        <mat-icon>close</mat-icon>\n      </button>\n    </div>\n  </div>\n</div>\n<mat-dialog-content class="py-4">\n  \x3c!-- NOTE: Pwd Form --\x3e\n  <cal-pwd-form *ngIf="formType === forms.PWD" \n    [isFirst]="isFirst" \n    [pwdPolicies]="pwdPolicies" \n    [labels]="labels" \n    [inputs]="inputs" \n    [errors]="errors" \n    (firstConnection)="relayFirstLogEvent($event)" \n    (lostPassword)="relayLostPwdEvent($event)">\n  </cal-pwd-form>\n  \x3c!-- NOTE: MFA Setup Form --\x3e\n  <cal-mfa-setup-form *ngIf="formType === forms.MFA_SETUP" \n    [qrCode]="qrCode" \n    [code]  ="code" \n    [labels]="labels" \n    [inputs]="inputs" \n    [errors]="errors" \n    (saveMfa)="relaySaveMfaKeyEvent($event)">\n  </cal-mfa-setup-form>\n  \x3c!-- NOTE: MFA Form --\x3e\n  <cal-mfa-form *ngIf="formType === forms.MFA" \n    [labels]="labels" \n    [inputs]="inputs" \n    [errors]="errors" \n    (sendMfa)="relaySendMfaCodeEvent($event)">\n  </cal-mfa-form>\n</mat-dialog-content>',styles:[".header{color:#fff;background:#5eacff}"]}]}],o.ctorParameters=function(){return[{type:t.MatDialogRef},{type:undefined,decorators:[{type:r.Inject,args:[t.MAT_DIALOG_DATA]}]}]},o}(),f=function(){function o(o,t,e,n){this.dialog=o,this.sanitizer=t,this.iconRegistry=e,this.builder=n,this.fixedWidth=!1,this.googleStyle=!1,this.googleTheme=null,this.customUsrPolicy=null,this.initialized=new r.EventEmitter,this.signUp=new r.EventEmitter,this.login=new r.EventEmitter,this.loginSocial=new r.EventEmitter,this.forgotPwd=new r.EventEmitter,this.sendResetPwd=new r.EventEmitter,this.sendFirstPwd=new r.EventEmitter,this.saveMfaKey=new r.EventEmitter,this.sendMfaCode=new r.EventEmitter,this.stepUsr=new r.EventEmitter,this.stepPwd=new r.EventEmitter,this.showPassword=!1,this.userPolicies=m,this.forms=p,this.isFirst=!1,this.code=null,this.qrCode=null,this.userInfo=null,this.userImage=null,this.layouts=l,this.selectedTab=0,this.closeModalEvent=new r.EventEmitter,e.addSvgIcon("google",t.bypassSecurityTrustResourceUrl("../assets/img/google.svg")),e.addSvgIcon("facebook",t.bypassSecurityTrustResourceUrl("../assets/img/facebook.svg"))}return o.prototype.ngOnInit=function(){this.initFormGroups(),this.initFormLayouts(),this.initTheme(),this.initPolicies(),this.initIcons(),this.initButtons(),this.initInputs(),this.initErrors(),this.initLabels()},o.prototype.ngAfterViewInit=function(){this.initialized.emit()},o.prototype.ngOnChanges=function(o){o.googleStyle&&this.initFormGroups(),o.customFormLayouts&&this.initFormLayouts(),o.googleTheme&&this.initTheme(),(o.customPwdPolicies||o.customUsrPolicy)&&this.initPolicies(),o.customIcons&&this.initIcons(),o.customButtons&&this.initButtons(),o.customInputs&&this.initInputs(),o.customErrors&&this.initErrors(),o.customLabels&&this.initLabels()},o.prototype.ngOnDestroy=function(){this.modalFirstSub&&this.modalFirstSub.unsubscribe(),this.modalLostSub&&this.modalLostSub.unsubscribe(),this.modalSaveMfaKeySub&&this.modalSaveMfaKeySub.unsubscribe(),this.modalSendMfaCodeSub&&this.modalSendMfaCodeSub.unsubscribe()},o.prototype.onClickLogin=function(){var o;o=this.getEventResponse(),this.login.emit(o)},o.prototype.onClickLoginSocial=function(o){var t={};(t=this.getEventResponse()).social=o,this.loginSocial.emit(t)},o.prototype.onClickSignUp=function(){this.signUp.emit()},o.prototype.onClickForgotPassword=function(){var o;o=this.getEventResponse("usr"),this.forgotPwd.emit(o)},o.prototype.showPwdForm=function(o){this.isFirst=o,this.formType=p.PWD,this.showLayout(this.formLayouts.pwd)},o.prototype.showMfaSetupForm=function(o,t){this.code=o,this.qrCode=t,this.formType=p.MFA_SETUP,this.showLayout(this.formLayouts.mfaSetup)},o.prototype.showMfaForm=function(){this.formType=p.MFA,this.showLayout(this.formLayouts.mfa)},o.prototype.hidePwdForm=function(){this.closeLayout(this.formLayouts.password)},o.prototype.hideMfaSetupForm=function(){this.closeLayout(this.formLayouts.mfaSetup)},o.prototype.hideMfaForm=function(){this.closeLayout(this.formLayouts.mfa)},o.prototype.showPwdStep=function(o,t){void 0===o&&(o=null),void 0===t&&(t=null),this.userInfo=o,this.userImage=t,this.selectedTab=2},o.prototype.onClickNextStep=function(o){switch(o){case 0:this.selectedTab=1;break;case 1:var t;t=this.getEventResponse("usr"),this.stepUsr.emit(t);break;case 2:var e;e=this.getEventResponse(),this.stepPwd.emit(e)}},o.prototype.onClickPrevStep=function(o){switch(o){case 0:break;case 1:this.selectedTab=0;break;case 2:this.selectedTab=1}},o.prototype.tabFirstLog=function(o){this.sendFirstPwd.emit(o)},o.prototype.tabLostPwd=function(o){this.sendResetPwd.emit(o)},o.prototype.tabSaveMfaKey=function(o){this.saveMfaKey.emit(o)},o.prototype.tabSendMfaCode=function(o){this.sendMfaCode.emit(o)},o.prototype.modalFirstLog=function(o){var t=this;this.modalFirstSub=o.componentInstance.relayFirstLog.subscribe(function(o){t.sendFirstPwd.emit(o)})},o.prototype.modalLostPwd=function(o){var t=this;this.modalLostSub=o.componentInstance.relayLostPwd.subscribe(function(o){t.sendResetPwd.emit(o)})},o.prototype.modalSaveMfaKey=function(o){var t=this;this.modalSaveMfaKeySub=o.componentInstance.relaySaveMfaKey.subscribe(function(o){t.saveMfaKey.emit(o)})},o.prototype.modalSendMfaCode=function(o){var t=this;this.modalSendMfaCodeSub=o.componentInstance.relaySendMfaCode.subscribe(function(o){t.sendMfaCode.emit(o)})},o.prototype.onClickCloseTab=function(o){this.closeTab()},o.prototype.openModal=function(){var t=this,o={formType:this.formType,labels:this.labels,closeEvent:this.closeModalEvent,errors:this.errors,inputs:this.inputs,isFirst:this.isFirst,pwdPolicies:this.pwdPolicies,code:this.code,qrCode:this.qrCode},e=this.dialog.open(d,{data:o});this.formType===p.PWD&&(this.modalFirstLog(e),this.modalLostPwd(e)),this.formType===p.MFA_SETUP&&this.modalSaveMfaKey(e),this.formType===p.MFA&&this.modalSendMfaCode(e),e.afterClosed().subscribe(function(o){t.formType=null,o&&t.formGroup.controls.password.setValue(o)})},o.prototype.showLayout=function(o){switch(o){case l.TAB:this.openTab();break;case l.MODAL:this.openModal();break;case l.INLINE:this.formGroup.controls.username.disable(),this.formGroup.controls.password.disable();break;default:this.openTab()}},o.prototype.closeLayout=function(o){switch(this.formType=null,o){case l.TAB:this.closeTab();break;case l.MODAL:this.closeModal();break;case l.INLINE:this.formGroup.controls.username.enable(),this.formGroup.controls.password.enable();break;default:this.closeTab()}},o.prototype.closeModal=function(){this.closeModalEvent.emit()},o.prototype.openTab=function(){this.googleStyle?this.selectedTab=3:this.selectedTab=1},o.prototype.closeTab=function(){this.selectedTab=0},o.prototype.getEventResponse=function(o){void 0===o&&(o=null);var t={},e=null,n=null;return this.googleStyle?(e=this.usrFormGroup.controls.username.value,n=this.pwdFormGroup.controls.password.value):(e=this.formGroup.controls.username.value,n=this.formGroup.controls.password.value),o||(t.username=e,t.password=n),o&&"usr"===o&&(t.username=e),o&&"pwd"===o&&(t.password=n),t},o.prototype.initFormLayouts=function(){var o,t=null;o={pwd:l.TAB,mfaSetup:l.TAB,mfa:l.TAB},(t=Object.assign(o,this.customFormLayouts)).pwd===l.INLINE&&(t.pwd=l.TAB),t.mfaSetup===l.INLINE&&(t.mfaSetup=l.TAB),this.googleStyle&&t.mfa===l.INLINE&&(t.mfa=l.TAB),this.formLayouts=t},o.prototype.initTheme=function(){var o=null;switch(this.googleTheme){case c:case u:o=this.googleTheme;break;default:o=c}this.theme=o},o.prototype.initIcons=function(){var o,t;o={iconUsrOnLoginForm:!0,iconPwdOnLoginForm:!0},t=Object.assign(o,this.customIcons),this.icons=t},o.prototype.initButtons=function(){var o,t;o={forgotPassword:!0,signUp:!0,google:!0,facebook:!0},t=Object.assign(o,this.customButtons),this.buttons=t},o.prototype.initInputs=function(){var o,t;o={clearUsrOnLoginForm:!0,showPwdOnLoginForm:!0,showPwdOnPwdForm:!0,clearCodeOnPwdForm:!0,clearCodeOnMfaForm:!0},t=Object.assign(o,this.customInputs),this.inputs=t},o.prototype.initErrors=function(){var o,t;o={login:!0,pwd:!0,mfa:!0},t=Object.assign(o,this.customErrors),this.errors=t},o.prototype.initPolicies=function(){var o,t=null;if(o={range:{min:8,max:128},"char":!0,number:!0,lower:!0,upper:!0},(t=Object.assign(o,this.customPwdPolicies)).range.min>t.range.max&&(t.range.min=8,t.range.max=128),this.pwdPolicies=t,this.customUsrPolicy){var e=[];switch(this.customUsrPolicy){case m.EMAIL:e.push(a.email);break;case m.PHONE:e.push(a.phone);break;default:var n;n=new RegExp(this.customUsrPolicy),e.push(a.custom(n))}e.push(s.Validators.required),this.googleStyle?this.usrFormGroup.controls.username.setValidators(e):this.formGroup.controls.username.setValidators(e)}},o.prototype.initLabels=function(){var o,t={};t.header={titlePwd:"Lost password",subtitlePwd:"Please enter the confirmation code",titlePwdSetup:"Password setup",subtitlePwdSetup:"Please enter a new password",titleMfa:"MFA",subtitleMfa:"Please enter the confirmation code",titleMfaSetup:"MFA setup",subtitleMfaSetup:"Save this secret key for future connection"},t.input={username:"Username",password:"Password",verifCode:"Verification code",newPassword:"New password"},t.button={signIn:"Sign in",signUp:"Sign up",next:"Next",back:"Back",send:"Send",save:"Save",forgotPassword:"Forgot password",googleSignIn:"Sign in with Google",facebookSignIn:"Sign in with Facebook"},t.policy={required:"This field is required",nonWhitespace:"This value must not contain any spaces",email:"This value must be an email",phone:"This value must be a phone number",sixDigits:"This value must contains six digits",customRegex:"This value must match the custom regex provided",pwdLength:"Minimum password length ({{min}} to {{max}})",pwdUppercase:"Require at least one uppercase letter (A to Z)",pwdLowercase:"Require at least one lowercase letter (a to z)",pwdNumber:"Require at least one number (0 to 9)",pwdSpecial:"Require at least one nonalphanumeric character ! @ # $ % ^ & * ( ) _ + - = [ ] { } | '"},o=Object.assign(t,this.customLabels),this.labels=o},o.prototype.initFormGroups=function(){this.googleStyle?(this.usrFormGroup=this.builder.group({username:new s.FormControl({value:null,disabled:!1},[s.Validators.required])}),this.pwdFormGroup=this.builder.group({password:new s.FormControl({value:null,disabled:!1},[s.Validators.required])})):this.formGroup=this.builder.group({username:new s.FormControl({value:null,disabled:!1},[s.Validators.required]),password:new s.FormControl({value:null,disabled:!1},[s.Validators.required])})},o.decorators=[{type:r.Component,args:[{selector:"cal-login-form",template:'<div class="{{ fixedWidth ? \'login-wrapper\' : \'\' }}" id="debug-login-form">\n  <mat-tab-group id="caliatys-login-form" [selectedIndex]="selectedTab">\n    <mat-tab label="login-form">\n      \x3c!-- NOTE: Login form --\x3e\n      <form (ngSubmit)="onClickLogin()" [formGroup]="formGroup" *ngIf="!googleStyle">\n        <div class="row no-gutters">\n          <div class="col">\n            <div class="row no-gutters">\n              <div class="col">\n                \x3c!-- NOTE: Username --\x3e\n                <mat-form-field class="w-100">\n                  <div matPrefix class="mr-2" *ngIf="icons.iconUsrOnLoginForm">\n                    <mat-icon class="align-bottom">person</mat-icon>\n                  </div>\n                  <input matInput formControlName="username" \n                    name="username" autocomplete="username" \n                    placeholder="{{ labels.input.username }}" \n                    type="text"/>\n                  <button *ngIf="formGroup.controls.username.value?.length > 0 && inputs.clearUsrOnLoginForm" \n                    mat-button matSuffix mat-icon-button aria-label="Clear" \n                    color="primary" (click)="formGroup.controls.username.setValue(\'\')" \n                    [disabled]="formType === forms.MFA && formLayouts.mfa === layouts.INLINE ? true : false" \n                    type="button">\n                    <mat-icon>close</mat-icon>\n                  </button>\n                  \x3c!-- NOTE: Error message(s) --\x3e\n                  <mat-hint align="start" *ngIf="formGroup.controls.username.errors?.required && errors.login">\n                    {{ labels.policy.required }}\n                  </mat-hint>\n                  <mat-hint align="start" *ngIf="formGroup.controls.username.errors?.pattern && errors.login && usrPolicy === userPolicies.EMAIL">\n                    {{ labels.policy.email }}\n                  </mat-hint>\n                  <mat-hint align="start" *ngIf="formGroup.controls.username.errors?.pattern && errors.login && usrPolicy === userPolicies.PHONE">\n                    {{ labels.policy.phone }}\n                  </mat-hint>\n                  <mat-hint align="start" *ngIf="formGroup.controls.username.errors?.pattern && errors.login && usrPolicy && usrPolicy !== userPolicies.EMAIL && usrPolicy !== userPolicies.PHONE">\n                    {{ labels.policy.customRegex }}\n                  </mat-hint>\n                </mat-form-field>\n              </div>\n            </div>\n            <div class="row no-gutters">\n              <div class="col">\n                \x3c!-- NOTE: Password --\x3e\n                <mat-form-field class="w-100">\n                  <div matPrefix class="mr-2" *ngIf="icons.iconPwdOnLoginForm">\n                    <mat-icon class="align-bottom">lock</mat-icon>\n                  </div>\n                  <input matInput formControlName="password" \n                    name="password" autocomplete="password" \n                    placeholder="{{ labels.input.password }}" \n                    type="{{ showPassword ? \'text\' : \'password\' }}"/>\n                  <button *ngIf="inputs.showPwdOnLoginForm" \n                    mat-button matSuffix mat-icon-button aria-label="Clear" \n                    color="primary" (click)="showPassword=!showPassword" \n                    [disabled]="formType === forms.MFA && formLayouts.mfa === layouts.INLINE ? true : false" \n                    type="button">\n                    <mat-icon>{{ showPassword ? \'visibility_off\' : \'visibility\' }}</mat-icon>\n                  </button>\n                  \x3c!-- NOTE: Error message --\x3e\n                  <mat-hint align="start" *ngIf="formGroup.controls.password.errors?.required && errors.login">\n                    {{ labels.policy.required }}\n                  </mat-hint>\n                </mat-form-field>\n              </div> \n            </div>\n            \x3c!-- NOTE: Buttons --\x3e\n            <ng-container *ngIf="!( formType === forms.MFA && formLayouts.mfa === layouts.INLINE )">\n              <div class="row no-gutters pb-3">\n                <div class="col text-left">\n                  \x3c!-- TODO: Remember me --\x3e\n                </div>\n                \x3c!-- NOTE: Forgot password --\x3e\n                <div class="col text-right" *ngIf="buttons.forgotPassword">\n                  <a (click)="onClickForgotPassword()" href="#" class="small">\n                    {{ labels.button.forgotPassword }}\n                  </a>\n                </div>\n              </div>\n              <div class="row no-gutters pb-3">\n                <div class="col text-right">\n                  \x3c!-- NOTE: Sign up --\x3e\n                  <button mat-button (click)="onClickSignUp()" type="button" color="primary" class="small text-uppercase mr-3" *ngIf="buttons.signUp">\n                    {{ labels.button.signUp }}\n                  </button>\n                  \x3c!-- NOTE: Sign in --\x3e\n                  <button mat-raised-button type="submit" color="primary" [disabled]="!formGroup.valid" class="small text-uppercase">\n                    {{ labels.button.signIn }}\n                  </button>\n                </div>\n              </div>\n            </ng-container>\n          </div>\n        </div>\n      </form>\n      \x3c!-- NOTE: Login by steps buttons --\x3e\n      <div class="row no-gutters mb-3" *ngIf="googleStyle">\n        <div class="col text-right" *ngIf="buttons.signUp">\n          \x3c!-- NOTE: Sign up --\x3e\n          <button mat-button (click)="onClickSignUp()" type="button" color="primary" class="small text-uppercase mr-2">\n            {{ labels.button.signUp }}\n          </button>\n        </div>\n        <div class="col {{ buttons.signUp ? \'text-left\' : \'text-center\'}}">\n          \x3c!-- NOTE: Sign in --\x3e\n          <button mat-raised-button (click)="onClickNextStep(0)" type="button" color="primary" class="small text-uppercase ml-2">\n            {{ labels.button.signIn }}\n          </button>\n        </div>\n      </div>\n      \x3c!-- NOTE: Social buttons --\x3e\n      <ng-container *ngIf="!( formType === forms.MFA && formLayouts.mfa === layouts.INLINE )">\n        <div class="row no-gutters">\n          <div class="col text-center">\n            \x3c!-- NOTE: Google --\x3e\n            <div class="d-block mb-3" *ngIf="buttons.google">\n              <button mat-raised-button type="button" class="mat-raised-button cal-btn google {{ theme }}" (click)="onClickLoginSocial(\'google\')">\n                <span class="cal-bg-icon">\n                  <mat-icon class="align-middle cal-icon" svgIcon="google"></mat-icon>\n                </span>\n                <span class="cal-label">{{ labels.button.googleSignIn }}</span>\n              </button>\n            </div>\n            \x3c!-- NOTE: Facebook --\x3e\n            <div class="d-block mb-3" *ngIf="buttons.facebook">\n              <button mat-raised-button type="button" class="cal-btn facebook" (click)="onClickLoginSocial(\'facebook\')">\n                <span class="cal-bg-icon">\n                  <mat-icon class="align-middle cal-icon" svgIcon="facebook"></mat-icon>\n                </span>\n                <span class="cal-label">{{ labels.button.facebookSignIn }}</span>\n              </button>\n            </div>\n          </div>\n        </div>\n      </ng-container>\n      \x3c!-- NOTE: Inline MFA --\x3e\n      <ng-container *ngIf="formType === forms.MFA && formLayouts.mfa === layouts.INLINE">\n        <div class="row no-gutters">\n          <div class="col">\n            <cal-mfa-form \n              [inputs]="inputs" \n              [labels]="labels" \n              [errors]="errors" \n              (sendMfa)="tabSendMfaCode($event)">\n            </cal-mfa-form>\n          </div>\n        </div>\n      </ng-container>\n    </mat-tab>\n    <mat-tab label="usr-step" *ngIf="googleStyle">\n      \x3c!-- NOTE: Back button --\x3e\n      <div class="row no-gutters mb-3">\n        <div class="col">\n          <a href="#" (click)="onClickPrevStep(1)" title="{{ labels.button.back }}">\n            <mat-icon class="align-bottom mr-2">keyboard_arrow_left</mat-icon>{{ labels.button.back }}\n          </a>\n        </div>\n      </div>\n      <form (ngSubmit)="onClickNextStep(1)" [formGroup]="usrFormGroup">\n        \x3c!-- NOTE: Username --\x3e\n        <mat-form-field class="w-100">\n          <div matPrefix class="mr-2" *ngIf="icons.iconUsrOnLoginForm">\n            <mat-icon class="align-bottom">person</mat-icon>\n          </div>\n          <input matInput formControlName="username" \n            name="username" autocomplete="username" \n            placeholder="{{ labels.input.username }}" \n            type="text"/>\n          <button *ngIf="usrFormGroup.controls.username.value?.length > 0 && inputs.clearUsrOnLoginForm" \n            mat-button matSuffix mat-icon-button aria-label="Clear" \n            color="primary" (click)="usrFormGroup.controls.username.setValue(\'\')" \n            [disabled]="formType === forms.MFA && formLayouts.mfa === layouts.INLINE ? true : false" \n            type="button">\n            <mat-icon>close</mat-icon>\n          </button>\n          \x3c!-- NOTE: Error message(s) --\x3e\n          <mat-hint align="start" *ngIf="usrFormGroup.controls.username.errors?.required && errors.login">\n            {{ labels.policy.required }}\n          </mat-hint>\n          <mat-hint align="start" *ngIf="usrFormGroup.controls.username.errors?.pattern && errors.login && usrPolicy === userPolicies.EMAIL">\n            {{ labels.policy.email }}\n          </mat-hint>\n          <mat-hint align="start" *ngIf="usrFormGroup.controls.username.errors?.pattern && errors.login && usrPolicy === userPolicies.PHONE">\n            {{ labels.policy.phone }}\n          </mat-hint>\n          <mat-hint align="start" *ngIf="usrFormGroup.controls.username.errors?.pattern && errors.login && usrPolicy && usrPolicy !== userPolicies.EMAIL && usrPolicy !== userPolicies.PHONE">\n            {{ labels.policy.customRegex }}\n          </mat-hint>\n        </mat-form-field>\n        <div class="row no-gutters mb-3">\n          \x3c!-- NOTE: Forgot password --\x3e\n          <div class="col text-left" *ngIf="buttons.forgotPassword">\n            <a (click)="onClickForgotPassword()" href="#" class="small">\n              {{ labels.button.forgotPassword }}\n            </a>\n          </div>\n          \x3c!-- NOTE: Next button --\x3e\n          <div class="col text-right">\n            <button mat-raised-button type="submit" color="primary" [disabled]="!usrFormGroup.valid" class="small text-uppercase">\n              {{ labels.button.next }}\n            </button>\n          </div>\n        </div>\n      </form>\n    </mat-tab>\n    <mat-tab label="pwd-step" *ngIf="googleStyle">\n      \x3c!-- NOTE: Back button --\x3e\n      <div class="row no-gutters mb-3">\n        <div class="col">\n          <a href="#" (click)="onClickPrevStep(2)" title="{{ labels.button.back }}">\n            <mat-icon class="align-bottom mr-2">keyboard_arrow_left</mat-icon>{{ labels.button.back }}\n          </a>\n        </div>\n      </div>\n      \x3c!-- TODO: User info --\x3e\n      <p>{{ userInfo }}</p>\n      <form (ngSubmit)="onClickNextStep(2)" [formGroup]="pwdFormGroup">\n        \x3c!-- NOTE: Password --\x3e\n        <mat-form-field class="w-100">\n          <div matPrefix class="mr-2" *ngIf="icons.iconPwdOnLoginForm">\n            <mat-icon class="align-bottom">lock</mat-icon>\n          </div>\n          <input matInput formControlName="password" \n            name="password" autocomplete="password" \n            placeholder="{{ labels.input.password }}" \n            type="{{ showPassword ? \'text\' : \'password\' }}"/>\n          <button *ngIf="inputs.showPwdOnLoginForm" \n            mat-button matSuffix mat-icon-button aria-label="Clear" \n            color="primary" (click)="showPassword=!showPassword" \n            [disabled]="formType === forms.MFA && formLayouts.mfa === layouts.INLINE ? true : false" \n            type="button">\n            <mat-icon>{{ showPassword ? \'visibility_off\' : \'visibility\' }}</mat-icon>\n          </button>\n          \x3c!-- NOTE: Error message --\x3e\n          <mat-hint align="start" *ngIf="pwdFormGroup.controls.password.errors?.required && errors.login">\n            {{ labels.policy.required }}\n          </mat-hint>\n        </mat-form-field>\n        \x3c!-- NOTE: Next button --\x3e\n        <div class="row no-gutters mb-3">\n          <div class="col text-right">\n            <button mat-raised-button type="submit" color="primary" [disabled]="!pwdFormGroup.valid" class="small text-uppercase">\n              {{ labels.button.next }}\n            </button>\n          </div>\n        </div>\n      </form>\n    </mat-tab>\n    <mat-tab label="tab-wrapper" *ngIf="(formLayouts | existsLayout: layouts.TAB)">\n      \x3c!-- NOTE: Tab form --\x3e\n      <cal-tab-wrapper \n        [formType]="formType" \n        [isFirst]="isFirst" \n        [code]   ="code" \n        [qrCode] ="qrCode" \n        [pwdPolicies]="pwdPolicies" \n        [errors]="errors" \n        [labels]="labels" \n        [inputs]="inputs" \n        (sendCloseTab)="onClickCloseTab($event)" \n        (relayFirstLog)="tabFirstLog($event)" \n        (relayLostPwd)="tabLostPwd($event)" \n        (relaySaveMfaKey)="tabSaveMfaKey($event)" \n        (relaySendMfaCode)="tabSendMfaCode($event)">\n      </cal-tab-wrapper>\n    </mat-tab>\n  </mat-tab-group>\n</div>',styles:["/deep/ #caliatys-login-form mat-tab-header{display:none!important}mat-form-field mat-icon{color:grey}.login-wrapper{width:100%;max-width:330px;padding:15px;margin:0 auto}.cal-btn{line-height:35px;border:0!important;padding:1px!important}.cal-btn .cal-bg-icon{padding:8px;width:34px;height:34px;display:inline-block;vertical-align:top!important}.cal-btn .cal-bg-icon .cal-icon{display:inline-block;height:18px;width:18px;margin-top:-4px;vertical-align:top!important}.cal-btn .cal-label{padding-right:8px;padding-left:16px;size:14px;font-family:Roboto,sans-serif}.adn{background-color:#d87a68!important;color:#fff!important}.adn i{color:#fff!important}.adn:hover{background-color:#e29e91!important}.bitbucket{background-color:#205081!important;color:#fff!important}.bitbucket i{color:#fff!important}.bitbucket:hover{background-color:#2a69aa!important}.dropbox{background-color:#1087dd!important;color:#fff!important}.dropbox i{color:#fff!important}.dropbox:hover{background-color:#309ff0!important}.facebook{background-color:#3b5998!important;color:#fff!important}.facebook i{color:#fff!important}.facebook:hover{background-color:#4c70ba!important}.flickr{background-color:#ff0084!important;color:#fff!important}.flickr i{color:#fff!important}.flickr:hover{background-color:#ff339d!important}.foursquare{background-color:#f94877!important;color:#fff!important}.foursquare i{color:#fff!important}.foursquare:hover{background-color:#fb799c!important}.github{background-color:#444!important;color:#fff!important}.github i{color:#fff!important}.github:hover{background-color:#5e5e5e!important}.instagram{background-color:#405de6!important;color:#fff!important}.instagram i{color:#fff!important}.instagram:hover{background-color:#6d83ec!important}.linkedin{background-color:#007bb6!important;color:#fff!important}.linkedin i{color:#fff!important}.linkedin:hover{background-color:#009de9!important}.microsoft{background-color:#2672ec!important;color:#fff!important}.microsoft i{color:#fff!important}.microsoft:hover{background-color:#5590f0!important}.windows{background-color:#2672ec!important;color:#fff!important}.windows i{color:#fff!important}.windows:hover{background-color:#5590f0!important}.odnoklassniki{background-color:#f4731c!important;color:#fff!important}.odnoklassniki i{color:#fff!important}.odnoklassniki:hover{background-color:#f6914d!important}.openid{background-color:#f7931e!important;color:#fff!important}.openid i{color:#fff!important}.openid:hover{background-color:#f9ab4f!important}.pinterest{background-color:#cb2027!important;color:#fff!important}.pinterest i{color:#fff!important}.pinterest:hover{background-color:#e03e44!important}.reddit{background-color:#eff7ff!important;color:#000!important}.reddit i{color:#000!important}.reddit:hover{background-color:#fff!important}.soundcloud{background-color:#f50!important;color:#fff!important}.soundcloud i{color:#fff!important}.soundcloud:hover{background-color:#f73!important}.tumblr{background-color:#2c4762!important;color:#fff!important}.tumblr i{color:#fff!important}.tumblr:hover{background-color:#3c6185!important}.twitter{background-color:#55acee!important;color:#fff!important}.twitter i{color:#fff!important}.twitter:hover{background-color:#83c3f3!important}.vimeo{background-color:#1ab7ea!important;color:#fff!important}.vimeo i{color:#fff!important}.vimeo:hover{background-color:#49c6ee!important}.vk{background-color:#587ea3!important;color:#fff!important}.vk i{color:#fff!important}.vk:hover{background-color:#7897b6!important}.yahoo{background-color:#720e9e!important;color:#fff!important}.yahoo i{color:#fff!important}.yahoo:hover{background-color:#9412cd!important}.google.light{background-color:#fff!important;color:#5f6368!important}.google.light i{color:#5f6368!important}.google.light:hover{background-color:#fff!important}.google.dark{background-color:#4285f4!important;color:#fff!important}.google.dark i{color:#fff!important}.google.dark:hover{background-color:#72a4f7!important}.google.dark .cal-bg-icon{background:#fff}"]}]}],o.ctorParameters=function(){return[{type:t.MatDialog},{type:e.DomSanitizer},{type:t.MatIconRegistry},{type:s.FormBuilder}]},o.propDecorators={fixedWidth:[{type:r.Input}],googleStyle:[{type:r.Input}],googleTheme:[{type:r.Input}],customFormLayouts:[{type:r.Input}],customUsrPolicy:[{type:r.Input}],customPwdPolicies:[{type:r.Input}],customIcons:[{type:r.Input}],customButtons:[{type:r.Input}],customInputs:[{type:r.Input}],customErrors:[{type:r.Input}],customLabels:[{type:r.Input}],initialized:[{type:r.Output}],signUp:[{type:r.Output}],login:[{type:r.Output}],loginSocial:[{type:r.Output}],forgotPwd:[{type:r.Output}],sendResetPwd:[{type:r.Output}],sendFirstPwd:[{type:r.Output}],saveMfaKey:[{type:r.Output}],sendMfaCode:[{type:r.Output}],stepUsr:[{type:r.Output}],stepPwd:[{type:r.Output}]},o}(),b=function(){function o(){this.forms=p,this.sendCloseTab=new r.EventEmitter,this.relayFirstLog=new r.EventEmitter,this.relayLostPwd=new r.EventEmitter,this.relaySaveMfaKey=new r.EventEmitter,this.relaySendMfaCode=new r.EventEmitter}return o.prototype.ngOnInit=function(){},o.prototype.ngOnDestroy=function(){},o.prototype.backToLogin=function(){this.sendCloseTab.emit()},o.prototype.relayFirstLogEvent=function(o){this.relayFirstLog.emit(o)},o.prototype.relayLostPwdEvent=function(o){this.relayLostPwd.emit(o)},o.prototype.relaySaveMfaKeyEvent=function(o){this.relaySaveMfaKey.emit(o)},o.prototype.relaySendMfaCodeEvent=function(o){this.relaySendMfaCode.emit(o)},o.decorators=[{type:r.Component,args:[{selector:"cal-tab-wrapper",template:'<div class="header py-2 px-4 mb-3">\n  <div class="row align-items-center">\n    <div class="col-2 px-0 text-left">\n      <button mat-icon-button (click)="backToLogin()">\n        <mat-icon>arrow_back</mat-icon>\n      </button>\n    </div>\n    <div class="col text-right">\n      <div *ngIf="!isFirst && formType === forms.PWD">\n        <span class="h5 font-weight-light {{ labels.header.subtitlePwd ? \'d-block mb-0\' : \'\' }}">\n          {{ labels.header.titlePwd }}\n        </span>\n        <span *ngIf="labels.header.subtitlePwd" class="d-block font-weight-light small">\n          {{ labels.header.subtitlePwd }}\n        </span>\n      </div>\n      <div *ngIf="isFirst && formType === forms.PWD">\n        <span class="h5 font-weight-light {{ labels.header.subtitlePwdSetup ? \'d-block mb-0\' : \'\' }}">\n          {{ labels.header.titlePwdSetup }}\n        </span>\n        <span *ngIf="labels.header.subtitlePwdSetup" class="d-block font-weight-light small">\n          {{ labels.header.subtitlePwdSetup }}\n        </span>\n      </div>\n      <div *ngIf="formType === forms.MFA">\n        <span class="h5 font-weight-light {{ labels.header.subtitleMfa ? \'d-block mb-0\' : \'\' }}">\n          {{ labels.header.titleMfa }}\n        </span>\n        <span *ngIf="labels.header.subtitleMfa" class="d-block font-weight-light small">\n          {{ labels.header.subtitleMfa }}\n        </span>\n      </div>\n      <div *ngIf="formType === forms.MFA_SETUP">\n        <span class="h5 font-weight-light {{ labels.header.subtitleMfaSetup ? \'d-block mb-0\' : \'\' }}">\n          {{ labels.header.titleMfaSetup }}\n        </span>\n        <span *ngIf="labels.header.subtitleMfaSetup" class="d-block font-weight-light small">\n          {{ labels.header.subtitleMfaSetup }}\n        </span>\n      </div>\n    </div>\n  </div>\n</div>\n\x3c!-- NOTE: Pwd Form --\x3e\n<cal-pwd-form *ngIf="formType === forms.PWD" \n  [isFirst]="isFirst" \n  [pwdPolicies]="pwdPolicies" \n  [labels]="labels" \n  [inputs]="inputs" \n  [errors]="errors" \n  (firstConnection)="relayFirstLogEvent($event)" \n  (lostPassword)="relayLostPwdEvent($event)">\n</cal-pwd-form>\n\x3c!-- NOTE: MFA Setup Form --\x3e\n<cal-mfa-setup-form *ngIf="formType === forms.MFA_SETUP" \n  [qrCode]="qrCode" \n  [code]  ="code" \n  [labels]="labels" \n  [inputs]="inputs" \n  [errors]="errors" \n  (saveMfa)="relaySaveMfaKeyEvent($event)">\n</cal-mfa-setup-form>\n\x3c!-- NOTE: MFA Form --\x3e\n<cal-mfa-form *ngIf="formType === forms.MFA" \n  [labels]="labels" \n  [inputs]="inputs" \n  [errors]="errors" \n  (sendMfa)="relaySendMfaCodeEvent($event)">\n</cal-mfa-form>',styles:[".header{color:#fff;background:#5eacff}"]}]}],o.ctorParameters=function(){return[]},o.propDecorators={formType:[{type:r.Input}],labels:[{type:r.Input}],errors:[{type:r.Input}],inputs:[{type:r.Input}],sendCloseTab:[{type:r.Output}],isFirst:[{type:r.Input}],pwdPolicies:[{type:r.Input}],relayFirstLog:[{type:r.Output}],relayLostPwd:[{type:r.Output}],code:[{type:r.Input}],qrCode:[{type:r.Input}],relaySaveMfaKey:[{type:r.Output}],relaySendMfaCode:[{type:r.Output}]},o}(),g=function(){function o(){}return o.longEnough=function(t,e){return function(o){return null!==o.value&&o.value.length>=t&&o.value.length<=e?null:{longEnough:!0}}},o.number=function(o){return null!==o.value&&/\d/.test(o.value)?null:{number:!0}},o.upper=function(o){return null!==o.value&&/[A-Z]/.test(o.value)?null:{upper:!0}},o.lower=function(o){return null!==o.value&&/[a-z]/.test(o.value)?null:{lower:!0}},o["char"]=function(o){return null!==o.value&&/[!@#$%^&\*()_+\-=\[\]{}|']/.test(o.value)?null:{"char":!0}},o}(),h=function(){function o(o){this.builder=o,this.showPassword=!1,this.firstConnection=new r.EventEmitter,this.lostPassword=new r.EventEmitter}return o.prototype.ngOnInit=function(){this.initFormGroups()},o.prototype.ngOnChanges=function(o){o.pwdPolicies&&this.initFormGroups(!0)},o.prototype.ngOnDestroy=function(){},o.prototype.send=function(){var o,t,e={};o=this.formGroup.controls.verifCode.value,t=this.formGroup.controls.newPassword.value,e.password=t,this.isFirst?this.firstConnection.emit(e):(e.code=o,this.lostPassword.emit(e))},o.prototype.initFormGroups=function(o){void 0===o&&(o=!1);var t=null,e=null;o&&this.formGroup&&(t=this.formGroup.controls.verifCode.value,e=this.formGroup.controls.newPassword.value);var n=[];this.pwdPolicies["char"]&&n.push(g["char"]),this.pwdPolicies.number&&n.push(g.number),this.pwdPolicies.upper&&n.push(g.upper),this.pwdPolicies.lower&&n.push(g.lower),n.push(s.Validators.required),n.push(g.longEnough(this.pwdPolicies.range.min,this.pwdPolicies.range.max));var r=null;r=(r=(r=this.labels.policy.pwdLength).replace(/{{min}}/,this.pwdPolicies.range.min)).replace(/{{max}}/,this.pwdPolicies.range.max),this.labels.policy.pwdLengthReplaced=r,this.formGroup=this.builder.group({verifCode:new s.FormControl({value:t,disabled:!1}),newPassword:new s.FormControl({value:e,disabled:!1},n)}),this.isFirst||this.formGroup.controls.verifCode.setValidators([s.Validators.required])},o.decorators=[{type:r.Component,args:[{selector:"cal-pwd-form",template:'\x3c!-- NOTE: <form autocomplete="off"> will turn off autocomplete for the form in most browsers\n     except for username/email/password fields --\x3e\n<form (ngSubmit)="send()" [formGroup]="formGroup" autocomplete="off">\n\n  \x3c!-- NOTE: fake fields are a workaround for chrome/opera autofill getting the wrong fields --\x3e\n  <input id="username" style="display:none" type="text" name="fakeusernameremembered">\n  <input id="password" style="display:none" type="password" name="fakepasswordremembered">\n\n  <div class="row w-100 no-gutters" *ngIf="!isFirst">\n    <div class="col">\n      <mat-form-field class="w-100">\n        \x3c!-- NOTE: <input autocomplete="nope"> turns off autocomplete on many other browsers that don\'t respect\n          the form\'s "off", but not for "password" inputs. --\x3e\n        <input matInput formControlName="verifCode" \n          name="verif-code" autocomplete="nope" \n          placeholder="{{ labels.input.verifCode }}" \n          pattern="\\d{6}" \n          type="text"/> \x3c!-- NOTE: Pattern matches any non-whitespace character --\x3e\n        <button *ngIf="formGroup.controls.verifCode.valid && inputs.clearCodeOnPwdForm" \n          mat-button matSuffix mat-icon-button aria-label="Clear" \n          color="primary" (click)="formGroup.controls.verifCode.setValue(\'\')" \n          type="button">\n          <mat-icon>close</mat-icon>\n        </button>\n        \x3c!-- NOTE: Error messages --\x3e\n        <mat-hint align="start" *ngIf="formGroup.controls.verifCode.errors?.required && errors.pwd">\n          {{ labels.policy.required }}\n        </mat-hint>\n        <mat-hint align="start" *ngIf="formGroup.controls.verifCode.errors?.pattern && errors.pwd">\n          {{ labels.policy.sixDigits }}\n        </mat-hint>\n      </mat-form-field>\n    </div>\n  </div>\n  \x3c!-- NOTE: <input type="password" autocomplete="new-password" will turn it off for passwords everywhere --\x3e\n  <div class="row w-100 no-gutters">\n    <div class="col">\n      <mat-form-field class="w-100">\n        <input matInput formControlName="newPassword" \n          name="new-password" autocomplete="new-password" \n          placeholder="{{ labels.input.newPassword }}" \n          type="{{ showPassword ? \'text\' : \'password\' }}"/>\n        <button *ngIf="inputs.showPwdOnPwdForm" \n          mat-button matSuffix mat-icon-button aria-label="Clear" \n          color="primary" (click)="showPassword=!showPassword" \n          type="button">\n          <mat-icon>{{ showPassword ? \'visibility_off\' : \'visibility\' }}</mat-icon>\n        </button>\n        \x3c!-- NOTE: Error message --\x3e\n        <mat-hint align="start" *ngIf="formGroup.controls.newPassword.errors?.required && errors.pwd">\n          {{ labels.policy.required }}\n        </mat-hint>\n      </mat-form-field>\n    </div>\n  </div>\n  <div class="row w-100 no-gutters">\n    <div class="col">\n      <ul class="list-unstyled small">\n        <li class="check-policy">\n          <mat-icon class="red-policy" *ngIf="formGroup.controls.newPassword.errors && formGroup.controls.newPassword.errors.longEnough">close</mat-icon>\n          <mat-icon class="green-policy" *ngIf="!formGroup.controls.newPassword.errors || !formGroup.controls.newPassword.errors.longEnough">check</mat-icon>\n          {{ labels.policy.pwdLengthReplaced }}\n        </li>\n        <li class="check-policy" *ngIf="pwdPolicies.upper">\n          <mat-icon class="red-policy" *ngIf="formGroup.controls.newPassword.errors && formGroup.controls.newPassword.errors.upper">close</mat-icon>\n          <mat-icon class="green-policy" *ngIf="!formGroup.controls.newPassword.errors || !formGroup.controls.newPassword.errors.upper">check</mat-icon>\n          {{ labels.policy.pwdUppercase }}\n        </li>\n        <li class="check-policy" *ngIf="pwdPolicies.lower">\n          <mat-icon class="red-policy" *ngIf="formGroup.controls.newPassword.errors && formGroup.controls.newPassword.errors.lower">close</mat-icon>\n          <mat-icon class="green-policy" *ngIf="!formGroup.controls.newPassword.errors || !formGroup.controls.newPassword.errors.lower">check</mat-icon>\n          {{ labels.policy.pwdLowercase }}\n        </li>\n        <li class="check-policy" *ngIf="pwdPolicies.number">\n          <mat-icon class="red-policy" *ngIf="formGroup.controls.newPassword.errors && formGroup.controls.newPassword.errors.number">close</mat-icon>\n          <mat-icon class="green-policy" *ngIf="!formGroup.controls.newPassword.errors || !formGroup.controls.newPassword.errors.number">check</mat-icon>\n          {{ labels.policy.pwdNumber }}\n        </li>\n        <li class="check-policy" *ngIf="pwdPolicies.char">\n          <mat-icon class="red-policy" *ngIf="formGroup.controls.newPassword.errors && formGroup.controls.newPassword.errors.char">close</mat-icon>\n          <mat-icon class="green-policy" *ngIf="!formGroup.controls.newPassword.errors || !formGroup.controls.newPassword.errors.char">check</mat-icon>\n          {{ labels.policy.pwdSpecial }}\n        </li>\n      </ul>\n    </div>\n  </div>\n  \x3c!-- TODO: Enable Google Captcha --\x3e\n  \x3c!-- <div class="row w-100 no-gutters">\n    <div class="col">\n      <re-captcha site_key="6LdBtAkUAAAAAB2_l_TOz7oZmTLXaFjP1cxnu4yM"\n        (captchaResponse)="handleCorrectCaptcha($event)">\n      </re-captcha>\n    </div>\n  </div> --\x3e\n  <div class="pt-0 pb-4 px-4">\n    <div class="row w-100 no-gutters">\n      <div class="col text-right">\n        <button color="primary" mat-raised-button class="small text-uppercase" type="submit" [disabled]="!formGroup.valid">\n          {{ labels.button.send }}\n        </button>\n      </div>\n    </div>\n  </div>\n</form>',styles:[".green-policy{color:green}.red-policy{color:red}.check-policy{display:flex;align-items:center}.check-policy .mat-icon{margin-right:4px;font-size:22px;height:22px;width:22px}"]}]}],o.ctorParameters=function(){return[{type:s.FormBuilder}]},o.propDecorators={labels:[{type:r.Input}],errors:[{type:r.Input}],inputs:[{type:r.Input}],isFirst:[{type:r.Input}],pwdPolicies:[{type:r.Input}],firstConnection:[{type:r.Output}],lostPassword:[{type:r.Output}]},o}(),y=function(){function o(o){this.builder=o,this.saveMfa=new r.EventEmitter}return o.prototype.ngOnInit=function(){this.initFormGroups()},o.prototype.ngOnDestroy=function(){},o.prototype.send=function(){var o,t={};o=this.formGroup.controls.verifCode.value,t.code=o,this.saveMfa.emit(t)},o.prototype.initFormGroups=function(){this.formGroup=this.builder.group({verifCode:new s.FormControl({value:null,disabled:!1},[s.Validators.required])})},o.decorators=[{type:r.Component,args:[{selector:"cal-mfa-setup-form",template:'<div class="code text-center">\n  <qrcode [qrdata]="qrCode" [size]="100" [level]="\'L\'"></qrcode>\n  <p class="my-3">{{ code }}</p>\n</div>\n<form (ngSubmit)="send()" [formGroup]="formGroup" autocomplete="off">\n  <mat-form-field class="w-100">\n    <input matInput formControlName="verifCode" \n      name="verifCode" placeholder="{{ labels.input.verifCode }}" \n      pattern="\\d{6}" \n      type="text"/> \x3c!-- NOTE: Pattern matches 6 digits --\x3e\n    <button *ngIf="formGroup.controls.verifCode.valid && inputs.clearCodeOnMfaForm" \n      mat-button matSuffix mat-icon-button aria-label="Clear" \n      color="primary" (click)="formGroup.controls.verifCode.setValue(\'\')" \n      type="button">\n      <mat-icon>close</mat-icon>\n    </button>\n    \x3c!-- NOTE: Error messages --\x3e\n    <mat-hint align="start" *ngIf="formGroup.controls.verifCode.errors?.required && errors.mfa">\n      {{ labels.policy.required }}\n    </mat-hint>\n    <mat-hint align="start" *ngIf="formGroup.controls.verifCode.errors?.pattern && errors.mfa">\n      {{ labels.policy.sixDigits }}\n    </mat-hint>\n  </mat-form-field>\n  <div class="row w-100 no-gutters">\n    <div class="col text-right">\n      <button color="primary" mat-raised-button class="small text-uppercase" type="submit" [disabled]="!formGroup.valid">\n        {{ labels.button.save }}\n      </button>\n    </div>\n  </div>\n</form>',styles:[".code{display:flex;flex-direction:column;align-items:center}"]}]}],o.ctorParameters=function(){return[{type:s.FormBuilder}]},o.propDecorators={labels:[{type:r.Input}],errors:[{type:r.Input}],inputs:[{type:r.Input}],qrCode:[{type:r.Input}],code:[{type:r.Input}],saveMfa:[{type:r.Output}]},o}(),w=function(){function o(o){this.builder=o,this.sendMfa=new r.EventEmitter}return o.prototype.ngOnInit=function(){this.initFormGroups()},o.prototype.ngOnDestroy=function(){},o.prototype.send=function(){var o,t={};o=this.formGroup.controls.verifCode.value,t.code=o,this.sendMfa.emit(t)},o.prototype.initFormGroups=function(){this.formGroup=this.builder.group({verifCode:new s.FormControl({value:null,disabled:!1},[s.Validators.required])})},o.decorators=[{type:r.Component,args:[{selector:"cal-mfa-form",template:'<form (ngSubmit)="send()" [formGroup]="formGroup" autocomplete="off">\n  <mat-form-field class="w-100">\n    <input matInput formControlName="verifCode" \n      name="verifCode" placeholder="{{ labels.input.verifCode }}" \n      pattern="\\d{6}" \n      type="text"/> \x3c!-- NOTE: Pattern matches 6 digits --\x3e\n    <button *ngIf="formGroup.controls.verifCode.valid && inputs.clearCodeOnMfaForm" \n      mat-button matSuffix mat-icon-button aria-label="Clear" \n      color="primary" (click)="formGroup.controls.verifCode.setValue(\'\')" \n      type="button">\n      <mat-icon>close</mat-icon>\n    </button>\n    \x3c!-- NOTE: Error messages --\x3e\n    <mat-hint align="start" *ngIf="formGroup.controls.verifCode.errors?.required && errors.mfa">\n      {{ labels.policy.required }}\n    </mat-hint>\n    <mat-hint align="start" *ngIf="formGroup.controls.verifCode.errors?.pattern && errors.mfa">\n      {{ labels.policy.sixDigits }}\n    </mat-hint>\n  </mat-form-field>\n  <div class="row w-100 no-gutters">\n    <div class="col text-right">\n      <button color="primary" mat-raised-button class="small text-uppercase" type="submit" [disabled]="!formGroup.valid">\n        {{ labels.button.send }}\n      </button>\n    </div>\n  </div>\n</form>',styles:[""]}]}],o.ctorParameters=function(){return[{type:s.FormBuilder}]},o.propDecorators={labels:[{type:r.Input}],errors:[{type:r.Input}],inputs:[{type:r.Input}],sendMfa:[{type:r.Output}]},o}();var v=function(){function o(){}return o.prototype.transform=function(o,t){var e,n,r=!1;try{for(var s=function(o){var t="function"==typeof Symbol&&o[Symbol.iterator],e=0;return t?t.call(o):{next:function(){return o&&e>=o.length&&(o=void 0),{value:o&&o[e++],done:!o}}}}(Object.keys(o)),i=s.next();!i.done;i=s.next()){o[i.value]===t&&(r=!0)}}catch(a){e={error:a}}finally{try{i&&!i.done&&(n=s["return"])&&n.call(s)}finally{if(e)throw e.error}}return r},o.decorators=[{type:r.Pipe,args:[{name:"existsLayout"}]}],o}(),P=function(){function o(){}return o.decorators=[{type:r.NgModule,args:[{exports:[t.MatButtonModule,t.MatInputModule,t.MatIconModule,t.MatDialogModule,t.MatTabsModule]}]}],o}(),x=function(){function o(){}return o.decorators=[{type:r.NgModule,args:[{imports:[n.CommonModule,P,s.FormsModule,s.ReactiveFormsModule,i.QRCodeModule],declarations:[f,h,d,b,y,w,v],providers:[],entryComponents:[d],exports:[f,h,d,b,y,w,v]}]}],o}();o.LoginFormComponent=f,o.MaterialModule=P,o.LoginFormModule=x,o.ModalWrapperComponent=d,o.TabWrapperComponent=b,o.PwdFormComponent=h,o.ɵb=w,o.ɵa=y,o.ɵc=v,Object.defineProperty(o,"__esModule",{value:!0})});
//# sourceMappingURL=caliatys-login-form.umd.min.js.map